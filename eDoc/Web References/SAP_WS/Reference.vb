'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
'
Namespace SAP_WS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="B2B_AEU_WSSoap", [Namespace]:="http://tempuri.org/b2baeu_SAP_WS/Service1")>  _
    Partial Public Class B2B_AEU_WS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private Get_Billing_Detail_AEUOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Component_ComsumeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Material_HistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Serial_NoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Serial_No_By_PoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Serial_No_By_DNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Serial_No_By_GUIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Billing_From_SOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_So_From_Billing_NoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_ExchangeRateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Standard_Cost_4_DigitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Quotation_CREATEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ZGET_WHERE_UESD_BOM_RFCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ZSD_SPA_INSERTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SOC_CreateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private eBizAEU_GetMultiPriceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBackOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateNewCust3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConvertToExCurrencyValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SALESORDER_GETSTATUSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAdvantechStockPrice_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAdvantechStockPriceInt_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSOWarrantyFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSOWarrantyFlagByTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSOWarrantyFlag_TEST_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRMAStatus_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCreditBalance_NewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCreditBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private eBizAEU_SAPDYNSQL_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SAP_DynSql_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadSAPTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadSAPTable2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadSAPTable3_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CustomerInquiry_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private B2BValidation_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SerialNumberInquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TrackingInfoInquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Salesorder_Getlist_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Bapi_Salesorder_Getlist_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderHistory_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBackOrder_Track_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBackOrderList_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBackOrderItem_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Customer_AEU_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Next_WrokingDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Next_WorkingDate_ByCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAR_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAR_Detail_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAR_Detail_New_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAR_SO_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaterialStatusCost_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AR_DueDate_Inquiry_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustAP_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerAP_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiATP_NewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiATP_ACNOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiATP_New_USOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiATP_New2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSingleATPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSingleATP_NewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiDueDate_NewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiDueDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiDueDate_SpecialATPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiDueDate_RDQ_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GET_CUSTOMER_COUNTRYPOSTAL_CODE_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMaterialSingleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_Material_Detail_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GET_MATERIAL_WEIGHT_VOLUME_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GET_CTOS_DOCUMENTINFO_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GET_EXCHANGE_RATEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GET_CREDITLIMIT_USED_PERCENTAGEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GET_ORDER_SCHEDULE_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SALESORDER_GETSTATUS_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SALESORDER_GETSTATUS_Test_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiATPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMutiPrice_EQuoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiPriceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiPriceByTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMPriceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiPrice_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPriceRFCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPriceRFC_oldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVendorListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVendorDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SO_DeleteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SO_ChangeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SO_GetNumberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SO_CREATEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSOWarrantyFlag_TESTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiDueDate_RDQOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SO_CREATE_NadaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SO_CREATE_NEWOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SO_CREATE2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SO_CREATE_TESTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInvoiceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HelloKittyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SapXmlAbapDynSqlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SapAbapDynSqlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.EDOC.My.MySettings.Default.EDOC_SAP_WS_B2B_AEU_WS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event Get_Billing_Detail_AEUCompleted As Get_Billing_Detail_AEUCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Component_ComsumeCompleted As Get_Component_ComsumeCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Material_HistoryCompleted As Get_Material_HistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Serial_NoCompleted As Get_Serial_NoCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Serial_No_By_PoCompleted As Get_Serial_No_By_PoCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Serial_No_By_DNCompleted As Get_Serial_No_By_DNCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Serial_No_By_GUICompleted As Get_Serial_No_By_GUICompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Billing_From_SOCompleted As Get_Billing_From_SOCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_So_From_Billing_NoCompleted As Get_So_From_Billing_NoCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_ExchangeRateCompleted As Get_ExchangeRateCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Standard_Cost_4_DigitCompleted As Get_Standard_Cost_4_DigitCompletedEventHandler
        
        '''<remarks/>
        Public Event Quotation_CREATECompleted As Quotation_CREATECompletedEventHandler
        
        '''<remarks/>
        Public Event ZGET_WHERE_UESD_BOM_RFCCompleted As ZGET_WHERE_UESD_BOM_RFCCompletedEventHandler
        
        '''<remarks/>
        Public Event ZSD_SPA_INSERTCompleted As ZSD_SPA_INSERTCompletedEventHandler
        
        '''<remarks/>
        Public Event SOC_CreateCompleted As SOC_CreateCompletedEventHandler
        
        '''<remarks/>
        Public Event eBizAEU_GetMultiPriceCompleted As eBizAEU_GetMultiPriceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBackOrderCompleted As GetBackOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateNewCust3Completed As CreateNewCust3CompletedEventHandler
        
        '''<remarks/>
        Public Event ConvertToExCurrencyValueCompleted As ConvertToExCurrencyValueCompletedEventHandler
        
        '''<remarks/>
        Public Event SALESORDER_GETSTATUSCompleted As SALESORDER_GETSTATUSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAdvantechStockPrice_oldCompleted As GetAdvantechStockPrice_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAdvantechStockPriceInt_oldCompleted As GetAdvantechStockPriceInt_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSOWarrantyFlagCompleted As UpdateSOWarrantyFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSOWarrantyFlagByTableCompleted As UpdateSOWarrantyFlagByTableCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSOWarrantyFlag_TEST_oldCompleted As UpdateSOWarrantyFlag_TEST_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRMAStatus_oldCompleted As GetRMAStatus_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCreditBalance_NewCompleted As GetCreditBalance_NewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCreditBalanceCompleted As GetCreditBalanceCompletedEventHandler
        
        '''<remarks/>
        Public Event eBizAEU_SAPDYNSQL_oldCompleted As eBizAEU_SAPDYNSQL_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event SAP_DynSql_oldCompleted As SAP_DynSql_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadSAPTableCompleted As ReadSAPTableCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadSAPTable2Completed As ReadSAPTable2CompletedEventHandler
        
        '''<remarks/>
        Public Event ReadSAPTable3_oldCompleted As ReadSAPTable3_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event CustomerInquiry_oldCompleted As CustomerInquiry_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event B2BValidation_oldCompleted As B2BValidation_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event SerialNumberInquiryCompleted As SerialNumberInquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event TrackingInfoInquiryCompleted As TrackingInfoInquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event Salesorder_Getlist_oldCompleted As Salesorder_Getlist_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event Bapi_Salesorder_Getlist_oldCompleted As Bapi_Salesorder_Getlist_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderHistory_oldCompleted As GetOrderHistory_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBackOrder_Track_oldCompleted As GetBackOrder_Track_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBackOrderList_oldCompleted As GetBackOrderList_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBackOrderItem_oldCompleted As GetBackOrderItem_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Customer_AEU_oldCompleted As Get_Customer_AEU_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Next_WrokingDateCompleted As Get_Next_WrokingDateCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Next_WorkingDate_ByCodeCompleted As Get_Next_WorkingDate_ByCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAR_oldCompleted As GetAR_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAR_Detail_oldCompleted As GetAR_Detail_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAR_Detail_New_oldCompleted As GetAR_Detail_New_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAR_SO_oldCompleted As GetAR_SO_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaterialStatusCost_oldCompleted As GetMaterialStatusCost_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event AR_DueDate_Inquiry_oldCompleted As AR_DueDate_Inquiry_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustAP_oldCompleted As GetCustAP_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerAP_oldCompleted As GetCustomerAP_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiATP_NewCompleted As GetMultiATP_NewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiATP_ACNCompleted As GetMultiATP_ACNCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiATP_New_USCompleted As GetMultiATP_New_USCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiATP_New2Completed As GetMultiATP_New2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetSingleATPCompleted As GetSingleATPCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSingleATP_NewCompleted As GetSingleATP_NewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiDueDate_NewCompleted As GetMultiDueDate_NewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiDueDateCompleted As GetMultiDueDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiDueDate_SpecialATPCompleted As GetMultiDueDate_SpecialATPCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiDueDate_RDQ_oldCompleted As GetMultiDueDate_RDQ_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GET_CUSTOMER_COUNTRYPOSTAL_CODE_oldCompleted As GET_CUSTOMER_COUNTRYPOSTAL_CODE_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMaterialSingleCompleted As GetMaterialSingleCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_Material_Detail_oldCompleted As Get_Material_Detail_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GET_MATERIAL_WEIGHT_VOLUME_oldCompleted As GET_MATERIAL_WEIGHT_VOLUME_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GET_CTOS_DOCUMENTINFO_oldCompleted As GET_CTOS_DOCUMENTINFO_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GET_EXCHANGE_RATECompleted As GET_EXCHANGE_RATECompletedEventHandler
        
        '''<remarks/>
        Public Event GET_CREDITLIMIT_USED_PERCENTAGECompleted As GET_CREDITLIMIT_USED_PERCENTAGECompletedEventHandler
        
        '''<remarks/>
        Public Event GET_ORDER_SCHEDULE_oldCompleted As GET_ORDER_SCHEDULE_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event SALESORDER_GETSTATUS_oldCompleted As SALESORDER_GETSTATUS_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event SALESORDER_GETSTATUS_Test_oldCompleted As SALESORDER_GETSTATUS_Test_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiATPCompleted As GetMultiATPCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMutiPrice_EQuoteCompleted As GetMutiPrice_EQuoteCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiPriceCompleted As GetMultiPriceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiPriceByTableCompleted As GetMultiPriceByTableCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMPriceCompleted As GetMPriceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiPrice_oldCompleted As GetMultiPrice_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPriceRFCCompleted As GetPriceRFCCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPriceRFC_oldCompleted As GetPriceRFC_oldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVendorListCompleted As GetVendorListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVendorDetailCompleted As GetVendorDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event SO_DeleteCompleted As SO_DeleteCompletedEventHandler
        
        '''<remarks/>
        Public Event SO_ChangeCompleted As SO_ChangeCompletedEventHandler
        
        '''<remarks/>
        Public Event SO_GetNumberCompleted As SO_GetNumberCompletedEventHandler
        
        '''<remarks/>
        Public Event SO_CREATECompleted As SO_CREATECompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSOWarrantyFlag_TESTCompleted As UpdateSOWarrantyFlag_TESTCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiDueDate_RDQCompleted As GetMultiDueDate_RDQCompletedEventHandler
        
        '''<remarks/>
        Public Event SO_CREATE_NadaCompleted As SO_CREATE_NadaCompletedEventHandler
        
        '''<remarks/>
        Public Event SO_CREATE_NEWCompleted As SO_CREATE_NEWCompletedEventHandler
        
        '''<remarks/>
        Public Event SO_CREATE2Completed As SO_CREATE2CompletedEventHandler
        
        '''<remarks/>
        Public Event SO_CREATE_TESTCompleted As SO_CREATE_TESTCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInvoiceCompleted As GetInvoiceCompletedEventHandler
        
        '''<remarks/>
        Public Event HelloKittyCompleted As HelloKittyCompletedEventHandler
        
        '''<remarks/>
        Public Event SapXmlAbapDynSqlCompleted As SapXmlAbapDynSqlCompletedEventHandler
        
        '''<remarks/>
        Public Event SapAbapDynSqlCompleted As SapAbapDynSqlCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Get_Billing_Detail_AEU", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Billing_Detail_AEU(ByVal PI_VBELN As String, ByRef BILLING As String) As Object
            Dim results() As Object = Me.Invoke("Get_Billing_Detail_AEU", New Object() {PI_VBELN, BILLING})
            BILLING = CType(results(1),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Billing_Detail_AEUAsync(ByVal PI_VBELN As String, ByVal BILLING As String)
            Me.Get_Billing_Detail_AEUAsync(PI_VBELN, BILLING, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Billing_Detail_AEUAsync(ByVal PI_VBELN As String, ByVal BILLING As String, ByVal userState As Object)
            If (Me.Get_Billing_Detail_AEUOperationCompleted Is Nothing) Then
                Me.Get_Billing_Detail_AEUOperationCompleted = AddressOf Me.OnGet_Billing_Detail_AEUOperationCompleted
            End If
            Me.InvokeAsync("Get_Billing_Detail_AEU", New Object() {PI_VBELN, BILLING}, Me.Get_Billing_Detail_AEUOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Billing_Detail_AEUOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Billing_Detail_AEUCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Billing_Detail_AEUCompleted(Me, New Get_Billing_Detail_AEUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Get_Component_Comsume", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Component_Comsume(ByVal PI_MATRN As String, ByRef comp As String, ByRef cons As String) As Object
            Dim results() As Object = Me.Invoke("Get_Component_Comsume", New Object() {PI_MATRN, comp, cons})
            comp = CType(results(1),String)
            cons = CType(results(2),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Component_ComsumeAsync(ByVal PI_MATRN As String, ByVal comp As String, ByVal cons As String)
            Me.Get_Component_ComsumeAsync(PI_MATRN, comp, cons, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Component_ComsumeAsync(ByVal PI_MATRN As String, ByVal comp As String, ByVal cons As String, ByVal userState As Object)
            If (Me.Get_Component_ComsumeOperationCompleted Is Nothing) Then
                Me.Get_Component_ComsumeOperationCompleted = AddressOf Me.OnGet_Component_ComsumeOperationCompleted
            End If
            Me.InvokeAsync("Get_Component_Comsume", New Object() {PI_MATRN, comp, cons}, Me.Get_Component_ComsumeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Component_ComsumeOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Component_ComsumeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Component_ComsumeCompleted(Me, New Get_Component_ComsumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Get_Material_History", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Material_History(ByVal Material As String, ByVal Plant As String, ByRef returnMessge As Decimal) As Object
            Dim results() As Object = Me.Invoke("Get_Material_History", New Object() {Material, Plant, returnMessge})
            returnMessge = CType(results(1),Decimal)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Material_HistoryAsync(ByVal Material As String, ByVal Plant As String, ByVal returnMessge As Decimal)
            Me.Get_Material_HistoryAsync(Material, Plant, returnMessge, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Material_HistoryAsync(ByVal Material As String, ByVal Plant As String, ByVal returnMessge As Decimal, ByVal userState As Object)
            If (Me.Get_Material_HistoryOperationCompleted Is Nothing) Then
                Me.Get_Material_HistoryOperationCompleted = AddressOf Me.OnGet_Material_HistoryOperationCompleted
            End If
            Me.InvokeAsync("Get_Material_History", New Object() {Material, Plant, returnMessge}, Me.Get_Material_HistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Material_HistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Material_HistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Material_HistoryCompleted(Me, New Get_Material_HistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Get_Serial_No", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Serial_No(ByVal SerialNo As String, ByRef ItemList As String) As Object
            Dim results() As Object = Me.Invoke("Get_Serial_No", New Object() {SerialNo, ItemList})
            ItemList = CType(results(1),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Serial_NoAsync(ByVal SerialNo As String, ByVal ItemList As String)
            Me.Get_Serial_NoAsync(SerialNo, ItemList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Serial_NoAsync(ByVal SerialNo As String, ByVal ItemList As String, ByVal userState As Object)
            If (Me.Get_Serial_NoOperationCompleted Is Nothing) Then
                Me.Get_Serial_NoOperationCompleted = AddressOf Me.OnGet_Serial_NoOperationCompleted
            End If
            Me.InvokeAsync("Get_Serial_No", New Object() {SerialNo, ItemList}, Me.Get_Serial_NoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Serial_NoOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Serial_NoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Serial_NoCompleted(Me, New Get_Serial_NoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Get_Serial_No_By_Po", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Serial_No_By_Po(ByVal SerialNo As String, ByRef ItemList As String) As Object
            Dim results() As Object = Me.Invoke("Get_Serial_No_By_Po", New Object() {SerialNo, ItemList})
            ItemList = CType(results(1),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Serial_No_By_PoAsync(ByVal SerialNo As String, ByVal ItemList As String)
            Me.Get_Serial_No_By_PoAsync(SerialNo, ItemList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Serial_No_By_PoAsync(ByVal SerialNo As String, ByVal ItemList As String, ByVal userState As Object)
            If (Me.Get_Serial_No_By_PoOperationCompleted Is Nothing) Then
                Me.Get_Serial_No_By_PoOperationCompleted = AddressOf Me.OnGet_Serial_No_By_PoOperationCompleted
            End If
            Me.InvokeAsync("Get_Serial_No_By_Po", New Object() {SerialNo, ItemList}, Me.Get_Serial_No_By_PoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Serial_No_By_PoOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Serial_No_By_PoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Serial_No_By_PoCompleted(Me, New Get_Serial_No_By_PoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Get_Serial_No_By_DN", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Serial_No_By_DN(ByVal SerialNo As String, ByRef ItemList As String) As Object
            Dim results() As Object = Me.Invoke("Get_Serial_No_By_DN", New Object() {SerialNo, ItemList})
            ItemList = CType(results(1),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Serial_No_By_DNAsync(ByVal SerialNo As String, ByVal ItemList As String)
            Me.Get_Serial_No_By_DNAsync(SerialNo, ItemList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Serial_No_By_DNAsync(ByVal SerialNo As String, ByVal ItemList As String, ByVal userState As Object)
            If (Me.Get_Serial_No_By_DNOperationCompleted Is Nothing) Then
                Me.Get_Serial_No_By_DNOperationCompleted = AddressOf Me.OnGet_Serial_No_By_DNOperationCompleted
            End If
            Me.InvokeAsync("Get_Serial_No_By_DN", New Object() {SerialNo, ItemList}, Me.Get_Serial_No_By_DNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Serial_No_By_DNOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Serial_No_By_DNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Serial_No_By_DNCompleted(Me, New Get_Serial_No_By_DNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Get_Serial_No_By_GUI", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Serial_No_By_GUI(ByVal SerialNo As String, ByRef ItemList As String) As Object
            Dim results() As Object = Me.Invoke("Get_Serial_No_By_GUI", New Object() {SerialNo, ItemList})
            ItemList = CType(results(1),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Serial_No_By_GUIAsync(ByVal SerialNo As String, ByVal ItemList As String)
            Me.Get_Serial_No_By_GUIAsync(SerialNo, ItemList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Serial_No_By_GUIAsync(ByVal SerialNo As String, ByVal ItemList As String, ByVal userState As Object)
            If (Me.Get_Serial_No_By_GUIOperationCompleted Is Nothing) Then
                Me.Get_Serial_No_By_GUIOperationCompleted = AddressOf Me.OnGet_Serial_No_By_GUIOperationCompleted
            End If
            Me.InvokeAsync("Get_Serial_No_By_GUI", New Object() {SerialNo, ItemList}, Me.Get_Serial_No_By_GUIOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Serial_No_By_GUIOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Serial_No_By_GUICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Serial_No_By_GUICompleted(Me, New Get_Serial_No_By_GUICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Get_Billing_From_SO", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Billing_From_SO(ByVal SalesNo As String, ByRef ReturnBilling As String) As Object
            Dim results() As Object = Me.Invoke("Get_Billing_From_SO", New Object() {SalesNo, ReturnBilling})
            ReturnBilling = CType(results(1),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Billing_From_SOAsync(ByVal SalesNo As String, ByVal ReturnBilling As String)
            Me.Get_Billing_From_SOAsync(SalesNo, ReturnBilling, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Billing_From_SOAsync(ByVal SalesNo As String, ByVal ReturnBilling As String, ByVal userState As Object)
            If (Me.Get_Billing_From_SOOperationCompleted Is Nothing) Then
                Me.Get_Billing_From_SOOperationCompleted = AddressOf Me.OnGet_Billing_From_SOOperationCompleted
            End If
            Me.InvokeAsync("Get_Billing_From_SO", New Object() {SalesNo, ReturnBilling}, Me.Get_Billing_From_SOOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Billing_From_SOOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Billing_From_SOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Billing_From_SOCompleted(Me, New Get_Billing_From_SOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Get_So_From_Billing_No", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_So_From_Billing_No(ByVal BillingNo As String, ByRef ReturnBilling As String) As Object
            Dim results() As Object = Me.Invoke("Get_So_From_Billing_No", New Object() {BillingNo, ReturnBilling})
            ReturnBilling = CType(results(1),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_So_From_Billing_NoAsync(ByVal BillingNo As String, ByVal ReturnBilling As String)
            Me.Get_So_From_Billing_NoAsync(BillingNo, ReturnBilling, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_So_From_Billing_NoAsync(ByVal BillingNo As String, ByVal ReturnBilling As String, ByVal userState As Object)
            If (Me.Get_So_From_Billing_NoOperationCompleted Is Nothing) Then
                Me.Get_So_From_Billing_NoOperationCompleted = AddressOf Me.OnGet_So_From_Billing_NoOperationCompleted
            End If
            Me.InvokeAsync("Get_So_From_Billing_No", New Object() {BillingNo, ReturnBilling}, Me.Get_So_From_Billing_NoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_So_From_Billing_NoOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_So_From_Billing_NoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_So_From_Billing_NoCompleted(Me, New Get_So_From_Billing_NoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Get_ExchangeRate", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_ExchangeRate(ByVal fromCurr As String, ByVal toCurr As String, ByRef ReturnList As String) As Object
            Dim results() As Object = Me.Invoke("Get_ExchangeRate", New Object() {fromCurr, toCurr, ReturnList})
            ReturnList = CType(results(1),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_ExchangeRateAsync(ByVal fromCurr As String, ByVal toCurr As String, ByVal ReturnList As String)
            Me.Get_ExchangeRateAsync(fromCurr, toCurr, ReturnList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_ExchangeRateAsync(ByVal fromCurr As String, ByVal toCurr As String, ByVal ReturnList As String, ByVal userState As Object)
            If (Me.Get_ExchangeRateOperationCompleted Is Nothing) Then
                Me.Get_ExchangeRateOperationCompleted = AddressOf Me.OnGet_ExchangeRateOperationCompleted
            End If
            Me.InvokeAsync("Get_ExchangeRate", New Object() {fromCurr, toCurr, ReturnList}, Me.Get_ExchangeRateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_ExchangeRateOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_ExchangeRateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_ExchangeRateCompleted(Me, New Get_ExchangeRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Get_Standard_Cost_4_Digit", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Standard_Cost_4_Digit(ByVal matnr As String, ByVal werk As String, ByRef stand_cost As Decimal, ByRef Group_cost As Decimal) As Object
            Dim results() As Object = Me.Invoke("Get_Standard_Cost_4_Digit", New Object() {matnr, werk, stand_cost, Group_cost})
            stand_cost = CType(results(1),Decimal)
            Group_cost = CType(results(2),Decimal)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Standard_Cost_4_DigitAsync(ByVal matnr As String, ByVal werk As String, ByVal stand_cost As Decimal, ByVal Group_cost As Decimal)
            Me.Get_Standard_Cost_4_DigitAsync(matnr, werk, stand_cost, Group_cost, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Standard_Cost_4_DigitAsync(ByVal matnr As String, ByVal werk As String, ByVal stand_cost As Decimal, ByVal Group_cost As Decimal, ByVal userState As Object)
            If (Me.Get_Standard_Cost_4_DigitOperationCompleted Is Nothing) Then
                Me.Get_Standard_Cost_4_DigitOperationCompleted = AddressOf Me.OnGet_Standard_Cost_4_DigitOperationCompleted
            End If
            Me.InvokeAsync("Get_Standard_Cost_4_Digit", New Object() {matnr, werk, stand_cost, Group_cost}, Me.Get_Standard_Cost_4_DigitOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Standard_Cost_4_DigitOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Standard_Cost_4_DigitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Standard_Cost_4_DigitCompleted(Me, New Get_Standard_Cost_4_DigitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Quotation_CREATE", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Quotation_CREATE(ByVal Order_DataXML As String, ByRef Order_Status_XML As String) As Integer
            Dim results() As Object = Me.Invoke("Quotation_CREATE", New Object() {Order_DataXML})
            Order_Status_XML = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Quotation_CREATEAsync(ByVal Order_DataXML As String)
            Me.Quotation_CREATEAsync(Order_DataXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Quotation_CREATEAsync(ByVal Order_DataXML As String, ByVal userState As Object)
            If (Me.Quotation_CREATEOperationCompleted Is Nothing) Then
                Me.Quotation_CREATEOperationCompleted = AddressOf Me.OnQuotation_CREATEOperationCompleted
            End If
            Me.InvokeAsync("Quotation_CREATE", New Object() {Order_DataXML}, Me.Quotation_CREATEOperationCompleted, userState)
        End Sub
        
        Private Sub OnQuotation_CREATEOperationCompleted(ByVal arg As Object)
            If (Not (Me.Quotation_CREATECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Quotation_CREATECompleted(Me, New Quotation_CREATECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/ZGET_WHERE_UESD_BOM_RFC", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ZGET_WHERE_UESD_BOM_RFC(ByVal eolpart As String, ByVal finishgoods As String, ByVal werks As String, ByRef result As String)
            Dim results() As Object = Me.Invoke("ZGET_WHERE_UESD_BOM_RFC", New Object() {eolpart, finishgoods, werks, result})
            result = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ZGET_WHERE_UESD_BOM_RFCAsync(ByVal eolpart As String, ByVal finishgoods As String, ByVal werks As String, ByVal result As String)
            Me.ZGET_WHERE_UESD_BOM_RFCAsync(eolpart, finishgoods, werks, result, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ZGET_WHERE_UESD_BOM_RFCAsync(ByVal eolpart As String, ByVal finishgoods As String, ByVal werks As String, ByVal result As String, ByVal userState As Object)
            If (Me.ZGET_WHERE_UESD_BOM_RFCOperationCompleted Is Nothing) Then
                Me.ZGET_WHERE_UESD_BOM_RFCOperationCompleted = AddressOf Me.OnZGET_WHERE_UESD_BOM_RFCOperationCompleted
            End If
            Me.InvokeAsync("ZGET_WHERE_UESD_BOM_RFC", New Object() {eolpart, finishgoods, werks, result}, Me.ZGET_WHERE_UESD_BOM_RFCOperationCompleted, userState)
        End Sub
        
        Private Sub OnZGET_WHERE_UESD_BOM_RFCOperationCompleted(ByVal arg As Object)
            If (Not (Me.ZGET_WHERE_UESD_BOM_RFCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ZGET_WHERE_UESD_BOM_RFCCompleted(Me, New ZGET_WHERE_UESD_BOM_RFCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/ZSD_SPA_INSERT", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ZSD_SPA_INSERT( _
                    ByVal VKORG As String,  _
                    ByVal ZZ_SPA As String,  _
                    ByVal MATNR As String,  _
                    ByVal VTWEG As String,  _
                    ByVal SPART As String,  _
                    ByVal VKBUR As String,  _
                    ByVal VKGRP As String,  _
                    ByVal KUNNR As String,  _
                    ByVal WAERK As String,  _
                    ByVal NETPR As String,  _
                    ByVal ZMENG As String,  _
                    ByVal PEINH As String,  _
                    ByVal ERNAM As String,  _
                    ByVal ERNAM_EMAIL As String,  _
                    ByVal CATSAPNAME As String,  _
                    ByVal CATSAPNAME_EMAIL As String,  _
                    ByVal DATAB As String,  _
                    ByVal DATBI As String,  _
                    ByVal APPLSTATUS As String,  _
                    ByVal REMARKS As String) As Integer
            Dim results() As Object = Me.Invoke("ZSD_SPA_INSERT", New Object() {VKORG, ZZ_SPA, MATNR, VTWEG, SPART, VKBUR, VKGRP, KUNNR, WAERK, NETPR, ZMENG, PEINH, ERNAM, ERNAM_EMAIL, CATSAPNAME, CATSAPNAME_EMAIL, DATAB, DATBI, APPLSTATUS, REMARKS})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ZSD_SPA_INSERTAsync( _
                    ByVal VKORG As String,  _
                    ByVal ZZ_SPA As String,  _
                    ByVal MATNR As String,  _
                    ByVal VTWEG As String,  _
                    ByVal SPART As String,  _
                    ByVal VKBUR As String,  _
                    ByVal VKGRP As String,  _
                    ByVal KUNNR As String,  _
                    ByVal WAERK As String,  _
                    ByVal NETPR As String,  _
                    ByVal ZMENG As String,  _
                    ByVal PEINH As String,  _
                    ByVal ERNAM As String,  _
                    ByVal ERNAM_EMAIL As String,  _
                    ByVal CATSAPNAME As String,  _
                    ByVal CATSAPNAME_EMAIL As String,  _
                    ByVal DATAB As String,  _
                    ByVal DATBI As String,  _
                    ByVal APPLSTATUS As String,  _
                    ByVal REMARKS As String)
            Me.ZSD_SPA_INSERTAsync(VKORG, ZZ_SPA, MATNR, VTWEG, SPART, VKBUR, VKGRP, KUNNR, WAERK, NETPR, ZMENG, PEINH, ERNAM, ERNAM_EMAIL, CATSAPNAME, CATSAPNAME_EMAIL, DATAB, DATBI, APPLSTATUS, REMARKS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ZSD_SPA_INSERTAsync( _
                    ByVal VKORG As String,  _
                    ByVal ZZ_SPA As String,  _
                    ByVal MATNR As String,  _
                    ByVal VTWEG As String,  _
                    ByVal SPART As String,  _
                    ByVal VKBUR As String,  _
                    ByVal VKGRP As String,  _
                    ByVal KUNNR As String,  _
                    ByVal WAERK As String,  _
                    ByVal NETPR As String,  _
                    ByVal ZMENG As String,  _
                    ByVal PEINH As String,  _
                    ByVal ERNAM As String,  _
                    ByVal ERNAM_EMAIL As String,  _
                    ByVal CATSAPNAME As String,  _
                    ByVal CATSAPNAME_EMAIL As String,  _
                    ByVal DATAB As String,  _
                    ByVal DATBI As String,  _
                    ByVal APPLSTATUS As String,  _
                    ByVal REMARKS As String,  _
                    ByVal userState As Object)
            If (Me.ZSD_SPA_INSERTOperationCompleted Is Nothing) Then
                Me.ZSD_SPA_INSERTOperationCompleted = AddressOf Me.OnZSD_SPA_INSERTOperationCompleted
            End If
            Me.InvokeAsync("ZSD_SPA_INSERT", New Object() {VKORG, ZZ_SPA, MATNR, VTWEG, SPART, VKBUR, VKGRP, KUNNR, WAERK, NETPR, ZMENG, PEINH, ERNAM, ERNAM_EMAIL, CATSAPNAME, CATSAPNAME_EMAIL, DATAB, DATBI, APPLSTATUS, REMARKS}, Me.ZSD_SPA_INSERTOperationCompleted, userState)
        End Sub
        
        Private Sub OnZSD_SPA_INSERTOperationCompleted(ByVal arg As Object)
            If (Not (Me.ZSD_SPA_INSERTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ZSD_SPA_INSERTCompleted(Me, New ZSD_SPA_INSERTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SOC_Create", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SOC_Create(ByVal dt_set As System.Data.DataSet, ByRef log_XML As String) As String
            Dim results() As Object = Me.Invoke("SOC_Create", New Object() {dt_set, log_XML})
            log_XML = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SOC_CreateAsync(ByVal dt_set As System.Data.DataSet, ByVal log_XML As String)
            Me.SOC_CreateAsync(dt_set, log_XML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SOC_CreateAsync(ByVal dt_set As System.Data.DataSet, ByVal log_XML As String, ByVal userState As Object)
            If (Me.SOC_CreateOperationCompleted Is Nothing) Then
                Me.SOC_CreateOperationCompleted = AddressOf Me.OnSOC_CreateOperationCompleted
            End If
            Me.InvokeAsync("SOC_Create", New Object() {dt_set, log_XML}, Me.SOC_CreateOperationCompleted, userState)
        End Sub
        
        Private Sub OnSOC_CreateOperationCompleted(ByVal arg As Object)
            If (Not (Me.SOC_CreateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SOC_CreateCompleted(Me, New SOC_CreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/eBizAEU_GetMultiPrice", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function eBizAEU_GetMultiPrice(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal strADONETXMLin As String, ByRef strADONETXMLOut As String) As Integer
            Dim results() As Object = Me.Invoke("eBizAEU_GetMultiPrice", New Object() {Mandt, Vkorg, Kunnr, strADONETXMLin})
            strADONETXMLOut = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub eBizAEU_GetMultiPriceAsync(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal strADONETXMLin As String)
            Me.eBizAEU_GetMultiPriceAsync(Mandt, Vkorg, Kunnr, strADONETXMLin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub eBizAEU_GetMultiPriceAsync(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal strADONETXMLin As String, ByVal userState As Object)
            If (Me.eBizAEU_GetMultiPriceOperationCompleted Is Nothing) Then
                Me.eBizAEU_GetMultiPriceOperationCompleted = AddressOf Me.OneBizAEU_GetMultiPriceOperationCompleted
            End If
            Me.InvokeAsync("eBizAEU_GetMultiPrice", New Object() {Mandt, Vkorg, Kunnr, strADONETXMLin}, Me.eBizAEU_GetMultiPriceOperationCompleted, userState)
        End Sub
        
        Private Sub OneBizAEU_GetMultiPriceOperationCompleted(ByVal arg As Object)
            If (Not (Me.eBizAEU_GetMultiPriceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent eBizAEU_GetMultiPriceCompleted(Me, New eBizAEU_GetMultiPriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetBackOrder", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBackOrder(ByVal company_id As String, ByVal org_id As String, ByVal part_no As String, ByVal so_no As String, ByVal po_no As String, ByVal order_date_from As String, ByVal order_date_to As String, ByVal user_id As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBackOrder", New Object() {company_id, org_id, part_no, so_no, po_no, order_date_from, order_date_to, user_id})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBackOrderAsync(ByVal company_id As String, ByVal org_id As String, ByVal part_no As String, ByVal so_no As String, ByVal po_no As String, ByVal order_date_from As String, ByVal order_date_to As String, ByVal user_id As String)
            Me.GetBackOrderAsync(company_id, org_id, part_no, so_no, po_no, order_date_from, order_date_to, user_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBackOrderAsync(ByVal company_id As String, ByVal org_id As String, ByVal part_no As String, ByVal so_no As String, ByVal po_no As String, ByVal order_date_from As String, ByVal order_date_to As String, ByVal user_id As String, ByVal userState As Object)
            If (Me.GetBackOrderOperationCompleted Is Nothing) Then
                Me.GetBackOrderOperationCompleted = AddressOf Me.OnGetBackOrderOperationCompleted
            End If
            Me.InvokeAsync("GetBackOrder", New Object() {company_id, org_id, part_no, so_no, po_no, order_date_from, order_date_to, user_id}, Me.GetBackOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBackOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBackOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBackOrderCompleted(Me, New GetBackOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/CreateNewCust3", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateNewCust3( _
                    ByVal KTOKD As String,  _
                    ByVal KUNNR As String,  _
                    ByVal VKORG As String,  _
                    ByVal VTWEG As String,  _
                    ByVal SPART As String,  _
                    ByVal NAME1 As String,  _
                    ByVal NAME2 As String,  _
                    ByVal SORT1 As String,  _
                    ByVal SORT2 As String,  _
                    ByVal NAME_CO As String,  _
                    ByVal STREET As String,  _
                    ByVal STR_SUPPL3 As String,  _
                    ByVal LOCATION As String,  _
                    ByVal CITY1 As String,  _
                    ByVal REGION As String,  _
                    ByVal POST_CODE1 As String,  _
                    ByVal COUNTRY As String,  _
                    ByVal TXJCD As String,  _
                    ByVal TRANSPZONE As String,  _
                    ByVal FAX_NUMBER As String,  _
                    ByVal TEL_NUMBER As String,  _
                    ByVal MOB_NUMBER As String,  _
                    ByVal SMTP_ADDR As String,  _
                    ByVal REMARK As String,  _
                    ByVal KUKLA As String,  _
                    ByVal BRSCH As String,  _
                    ByVal STCD1 As String,  _
                    ByVal STCEG As String,  _
                    ByVal AKONT As String,  _
                    ByVal ZUAWA As String,  _
                    ByVal FDGRV As String,  _
                    ByVal BUSAB As String,  _
                    ByVal BZIRK As String,  _
                    ByVal VKBUR As String,  _
                    ByVal VKGRP As String,  _
                    ByVal KDGRP As String,  _
                    ByVal WAERS As String,  _
                    ByVal KLIMK As Decimal,  _
                    ByVal KONDA As String,  _
                    ByVal VSBED As String,  _
                    ByVal VWERK As String,  _
                    ByVal INCO1 As String,  _
                    ByVal INCO2 As String,  _
                    ByVal ZTERM As String,  _
                    ByVal KTGRD As String,  _
                    ByVal KVGR1 As String,  _
                    ByVal CUSTATTR1 As String,  _
                    ByVal CUSTATTR2 As String,  _
                    ByVal CUSTATTR3 As String,  _
                    ByVal CUSTATTR4 As String,  _
                    ByVal CUSTCOND1 As String,  _
                    ByVal CUSTCOND2 As String,  _
                    ByVal CUSTCOND3 As String,  _
                    ByVal CUSTCOND4 As String,  _
                    ByVal CUSTCOND5 As String,  _
                    ByVal TAXCODE1 As String,  _
                    ByVal TAXCODE2 As String,  _
                    ByVal TAXCODE3 As String,  _
                    ByVal TAXCODE4 As String,  _
                    ByVal EMPCODE1 As String,  _
                    ByVal EMPCODE2 As String,  _
                    ByVal EMPCODE3 As String,  _
                    ByVal Lprio As String,  _
                    ByRef retResult As String) As Integer
            Dim results() As Object = Me.Invoke("CreateNewCust3", New Object() {KTOKD, KUNNR, VKORG, VTWEG, SPART, NAME1, NAME2, SORT1, SORT2, NAME_CO, STREET, STR_SUPPL3, LOCATION, CITY1, REGION, POST_CODE1, COUNTRY, TXJCD, TRANSPZONE, FAX_NUMBER, TEL_NUMBER, MOB_NUMBER, SMTP_ADDR, REMARK, KUKLA, BRSCH, STCD1, STCEG, AKONT, ZUAWA, FDGRV, BUSAB, BZIRK, VKBUR, VKGRP, KDGRP, WAERS, KLIMK, KONDA, VSBED, VWERK, INCO1, INCO2, ZTERM, KTGRD, KVGR1, CUSTATTR1, CUSTATTR2, CUSTATTR3, CUSTATTR4, CUSTCOND1, CUSTCOND2, CUSTCOND3, CUSTCOND4, CUSTCOND5, TAXCODE1, TAXCODE2, TAXCODE3, TAXCODE4, EMPCODE1, EMPCODE2, EMPCODE3, Lprio, retResult})
            retResult = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateNewCust3Async( _
                    ByVal KTOKD As String,  _
                    ByVal KUNNR As String,  _
                    ByVal VKORG As String,  _
                    ByVal VTWEG As String,  _
                    ByVal SPART As String,  _
                    ByVal NAME1 As String,  _
                    ByVal NAME2 As String,  _
                    ByVal SORT1 As String,  _
                    ByVal SORT2 As String,  _
                    ByVal NAME_CO As String,  _
                    ByVal STREET As String,  _
                    ByVal STR_SUPPL3 As String,  _
                    ByVal LOCATION As String,  _
                    ByVal CITY1 As String,  _
                    ByVal REGION As String,  _
                    ByVal POST_CODE1 As String,  _
                    ByVal COUNTRY As String,  _
                    ByVal TXJCD As String,  _
                    ByVal TRANSPZONE As String,  _
                    ByVal FAX_NUMBER As String,  _
                    ByVal TEL_NUMBER As String,  _
                    ByVal MOB_NUMBER As String,  _
                    ByVal SMTP_ADDR As String,  _
                    ByVal REMARK As String,  _
                    ByVal KUKLA As String,  _
                    ByVal BRSCH As String,  _
                    ByVal STCD1 As String,  _
                    ByVal STCEG As String,  _
                    ByVal AKONT As String,  _
                    ByVal ZUAWA As String,  _
                    ByVal FDGRV As String,  _
                    ByVal BUSAB As String,  _
                    ByVal BZIRK As String,  _
                    ByVal VKBUR As String,  _
                    ByVal VKGRP As String,  _
                    ByVal KDGRP As String,  _
                    ByVal WAERS As String,  _
                    ByVal KLIMK As Decimal,  _
                    ByVal KONDA As String,  _
                    ByVal VSBED As String,  _
                    ByVal VWERK As String,  _
                    ByVal INCO1 As String,  _
                    ByVal INCO2 As String,  _
                    ByVal ZTERM As String,  _
                    ByVal KTGRD As String,  _
                    ByVal KVGR1 As String,  _
                    ByVal CUSTATTR1 As String,  _
                    ByVal CUSTATTR2 As String,  _
                    ByVal CUSTATTR3 As String,  _
                    ByVal CUSTATTR4 As String,  _
                    ByVal CUSTCOND1 As String,  _
                    ByVal CUSTCOND2 As String,  _
                    ByVal CUSTCOND3 As String,  _
                    ByVal CUSTCOND4 As String,  _
                    ByVal CUSTCOND5 As String,  _
                    ByVal TAXCODE1 As String,  _
                    ByVal TAXCODE2 As String,  _
                    ByVal TAXCODE3 As String,  _
                    ByVal TAXCODE4 As String,  _
                    ByVal EMPCODE1 As String,  _
                    ByVal EMPCODE2 As String,  _
                    ByVal EMPCODE3 As String,  _
                    ByVal Lprio As String,  _
                    ByVal retResult As String)
            Me.CreateNewCust3Async(KTOKD, KUNNR, VKORG, VTWEG, SPART, NAME1, NAME2, SORT1, SORT2, NAME_CO, STREET, STR_SUPPL3, LOCATION, CITY1, REGION, POST_CODE1, COUNTRY, TXJCD, TRANSPZONE, FAX_NUMBER, TEL_NUMBER, MOB_NUMBER, SMTP_ADDR, REMARK, KUKLA, BRSCH, STCD1, STCEG, AKONT, ZUAWA, FDGRV, BUSAB, BZIRK, VKBUR, VKGRP, KDGRP, WAERS, KLIMK, KONDA, VSBED, VWERK, INCO1, INCO2, ZTERM, KTGRD, KVGR1, CUSTATTR1, CUSTATTR2, CUSTATTR3, CUSTATTR4, CUSTCOND1, CUSTCOND2, CUSTCOND3, CUSTCOND4, CUSTCOND5, TAXCODE1, TAXCODE2, TAXCODE3, TAXCODE4, EMPCODE1, EMPCODE2, EMPCODE3, Lprio, retResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateNewCust3Async( _
                    ByVal KTOKD As String,  _
                    ByVal KUNNR As String,  _
                    ByVal VKORG As String,  _
                    ByVal VTWEG As String,  _
                    ByVal SPART As String,  _
                    ByVal NAME1 As String,  _
                    ByVal NAME2 As String,  _
                    ByVal SORT1 As String,  _
                    ByVal SORT2 As String,  _
                    ByVal NAME_CO As String,  _
                    ByVal STREET As String,  _
                    ByVal STR_SUPPL3 As String,  _
                    ByVal LOCATION As String,  _
                    ByVal CITY1 As String,  _
                    ByVal REGION As String,  _
                    ByVal POST_CODE1 As String,  _
                    ByVal COUNTRY As String,  _
                    ByVal TXJCD As String,  _
                    ByVal TRANSPZONE As String,  _
                    ByVal FAX_NUMBER As String,  _
                    ByVal TEL_NUMBER As String,  _
                    ByVal MOB_NUMBER As String,  _
                    ByVal SMTP_ADDR As String,  _
                    ByVal REMARK As String,  _
                    ByVal KUKLA As String,  _
                    ByVal BRSCH As String,  _
                    ByVal STCD1 As String,  _
                    ByVal STCEG As String,  _
                    ByVal AKONT As String,  _
                    ByVal ZUAWA As String,  _
                    ByVal FDGRV As String,  _
                    ByVal BUSAB As String,  _
                    ByVal BZIRK As String,  _
                    ByVal VKBUR As String,  _
                    ByVal VKGRP As String,  _
                    ByVal KDGRP As String,  _
                    ByVal WAERS As String,  _
                    ByVal KLIMK As Decimal,  _
                    ByVal KONDA As String,  _
                    ByVal VSBED As String,  _
                    ByVal VWERK As String,  _
                    ByVal INCO1 As String,  _
                    ByVal INCO2 As String,  _
                    ByVal ZTERM As String,  _
                    ByVal KTGRD As String,  _
                    ByVal KVGR1 As String,  _
                    ByVal CUSTATTR1 As String,  _
                    ByVal CUSTATTR2 As String,  _
                    ByVal CUSTATTR3 As String,  _
                    ByVal CUSTATTR4 As String,  _
                    ByVal CUSTCOND1 As String,  _
                    ByVal CUSTCOND2 As String,  _
                    ByVal CUSTCOND3 As String,  _
                    ByVal CUSTCOND4 As String,  _
                    ByVal CUSTCOND5 As String,  _
                    ByVal TAXCODE1 As String,  _
                    ByVal TAXCODE2 As String,  _
                    ByVal TAXCODE3 As String,  _
                    ByVal TAXCODE4 As String,  _
                    ByVal EMPCODE1 As String,  _
                    ByVal EMPCODE2 As String,  _
                    ByVal EMPCODE3 As String,  _
                    ByVal Lprio As String,  _
                    ByVal retResult As String,  _
                    ByVal userState As Object)
            If (Me.CreateNewCust3OperationCompleted Is Nothing) Then
                Me.CreateNewCust3OperationCompleted = AddressOf Me.OnCreateNewCust3OperationCompleted
            End If
            Me.InvokeAsync("CreateNewCust3", New Object() {KTOKD, KUNNR, VKORG, VTWEG, SPART, NAME1, NAME2, SORT1, SORT2, NAME_CO, STREET, STR_SUPPL3, LOCATION, CITY1, REGION, POST_CODE1, COUNTRY, TXJCD, TRANSPZONE, FAX_NUMBER, TEL_NUMBER, MOB_NUMBER, SMTP_ADDR, REMARK, KUKLA, BRSCH, STCD1, STCEG, AKONT, ZUAWA, FDGRV, BUSAB, BZIRK, VKBUR, VKGRP, KDGRP, WAERS, KLIMK, KONDA, VSBED, VWERK, INCO1, INCO2, ZTERM, KTGRD, KVGR1, CUSTATTR1, CUSTATTR2, CUSTATTR3, CUSTATTR4, CUSTCOND1, CUSTCOND2, CUSTCOND3, CUSTCOND4, CUSTCOND5, TAXCODE1, TAXCODE2, TAXCODE3, TAXCODE4, EMPCODE1, EMPCODE2, EMPCODE3, Lprio, retResult}, Me.CreateNewCust3OperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateNewCust3OperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateNewCust3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateNewCust3Completed(Me, New CreateNewCust3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/ConvertToExCurrencyValue", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConvertToExCurrencyValue(ByVal amount As Decimal, ByVal currency As String) As Decimal
            Dim results() As Object = Me.Invoke("ConvertToExCurrencyValue", New Object() {amount, currency})
            Return CType(results(0),Decimal)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConvertToExCurrencyValueAsync(ByVal amount As Decimal, ByVal currency As String)
            Me.ConvertToExCurrencyValueAsync(amount, currency, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConvertToExCurrencyValueAsync(ByVal amount As Decimal, ByVal currency As String, ByVal userState As Object)
            If (Me.ConvertToExCurrencyValueOperationCompleted Is Nothing) Then
                Me.ConvertToExCurrencyValueOperationCompleted = AddressOf Me.OnConvertToExCurrencyValueOperationCompleted
            End If
            Me.InvokeAsync("ConvertToExCurrencyValue", New Object() {amount, currency}, Me.ConvertToExCurrencyValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnConvertToExCurrencyValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConvertToExCurrencyValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConvertToExCurrencyValueCompleted(Me, New ConvertToExCurrencyValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SALESORDER_GETSTATUS", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SALESORDER_GETSTATUS(ByVal Order_No As String, ByRef Order_Status_XML As String) As Integer
            Dim results() As Object = Me.Invoke("SALESORDER_GETSTATUS", New Object() {Order_No})
            Order_Status_XML = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SALESORDER_GETSTATUSAsync(ByVal Order_No As String)
            Me.SALESORDER_GETSTATUSAsync(Order_No, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SALESORDER_GETSTATUSAsync(ByVal Order_No As String, ByVal userState As Object)
            If (Me.SALESORDER_GETSTATUSOperationCompleted Is Nothing) Then
                Me.SALESORDER_GETSTATUSOperationCompleted = AddressOf Me.OnSALESORDER_GETSTATUSOperationCompleted
            End If
            Me.InvokeAsync("SALESORDER_GETSTATUS", New Object() {Order_No}, Me.SALESORDER_GETSTATUSOperationCompleted, userState)
        End Sub
        
        Private Sub OnSALESORDER_GETSTATUSOperationCompleted(ByVal arg As Object)
            If (Not (Me.SALESORDER_GETSTATUSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SALESORDER_GETSTATUSCompleted(Me, New SALESORDER_GETSTATUSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetAdvantechStockPrice_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAdvantechStockPrice_old() As String
            Dim results() As Object = Me.Invoke("GetAdvantechStockPrice_old", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAdvantechStockPrice_oldAsync()
            Me.GetAdvantechStockPrice_oldAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAdvantechStockPrice_oldAsync(ByVal userState As Object)
            If (Me.GetAdvantechStockPrice_oldOperationCompleted Is Nothing) Then
                Me.GetAdvantechStockPrice_oldOperationCompleted = AddressOf Me.OnGetAdvantechStockPrice_oldOperationCompleted
            End If
            Me.InvokeAsync("GetAdvantechStockPrice_old", New Object(-1) {}, Me.GetAdvantechStockPrice_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAdvantechStockPrice_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAdvantechStockPrice_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAdvantechStockPrice_oldCompleted(Me, New GetAdvantechStockPrice_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetAdvantechStockPriceInt_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAdvantechStockPriceInt_old() As String
            Dim results() As Object = Me.Invoke("GetAdvantechStockPriceInt_old", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAdvantechStockPriceInt_oldAsync()
            Me.GetAdvantechStockPriceInt_oldAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAdvantechStockPriceInt_oldAsync(ByVal userState As Object)
            If (Me.GetAdvantechStockPriceInt_oldOperationCompleted Is Nothing) Then
                Me.GetAdvantechStockPriceInt_oldOperationCompleted = AddressOf Me.OnGetAdvantechStockPriceInt_oldOperationCompleted
            End If
            Me.InvokeAsync("GetAdvantechStockPriceInt_old", New Object(-1) {}, Me.GetAdvantechStockPriceInt_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAdvantechStockPriceInt_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAdvantechStockPriceInt_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAdvantechStockPriceInt_oldCompleted(Me, New GetAdvantechStockPriceInt_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/UpdateSOWarrantyFlag", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateSOWarrantyFlag(ByVal inxml As String, ByRef status As String, ByRef retCode As Boolean)
            Dim results() As Object = Me.Invoke("UpdateSOWarrantyFlag", New Object() {inxml, status, retCode})
            status = CType(results(0),String)
            retCode = CType(results(1),Boolean)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSOWarrantyFlagAsync(ByVal inxml As String, ByVal status As String, ByVal retCode As Boolean)
            Me.UpdateSOWarrantyFlagAsync(inxml, status, retCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSOWarrantyFlagAsync(ByVal inxml As String, ByVal status As String, ByVal retCode As Boolean, ByVal userState As Object)
            If (Me.UpdateSOWarrantyFlagOperationCompleted Is Nothing) Then
                Me.UpdateSOWarrantyFlagOperationCompleted = AddressOf Me.OnUpdateSOWarrantyFlagOperationCompleted
            End If
            Me.InvokeAsync("UpdateSOWarrantyFlag", New Object() {inxml, status, retCode}, Me.UpdateSOWarrantyFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSOWarrantyFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSOWarrantyFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSOWarrantyFlagCompleted(Me, New UpdateSOWarrantyFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/UpdateSOWarrantyFlagByTable", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateSOWarrantyFlagByTable(ByVal DT As System.Data.DataTable, ByRef status As String, ByRef retCode As Boolean)
            Dim results() As Object = Me.Invoke("UpdateSOWarrantyFlagByTable", New Object() {DT, status, retCode})
            status = CType(results(0),String)
            retCode = CType(results(1),Boolean)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSOWarrantyFlagByTableAsync(ByVal DT As System.Data.DataTable, ByVal status As String, ByVal retCode As Boolean)
            Me.UpdateSOWarrantyFlagByTableAsync(DT, status, retCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSOWarrantyFlagByTableAsync(ByVal DT As System.Data.DataTable, ByVal status As String, ByVal retCode As Boolean, ByVal userState As Object)
            If (Me.UpdateSOWarrantyFlagByTableOperationCompleted Is Nothing) Then
                Me.UpdateSOWarrantyFlagByTableOperationCompleted = AddressOf Me.OnUpdateSOWarrantyFlagByTableOperationCompleted
            End If
            Me.InvokeAsync("UpdateSOWarrantyFlagByTable", New Object() {DT, status, retCode}, Me.UpdateSOWarrantyFlagByTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSOWarrantyFlagByTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSOWarrantyFlagByTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSOWarrantyFlagByTableCompleted(Me, New UpdateSOWarrantyFlagByTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/UpdateSOWarrantyFlag_TEST_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateSOWarrantyFlag_TEST_old(ByVal inxml As String, ByRef status As String, ByRef retCode As Boolean)
            Dim results() As Object = Me.Invoke("UpdateSOWarrantyFlag_TEST_old", New Object() {inxml, status, retCode})
            status = CType(results(0),String)
            retCode = CType(results(1),Boolean)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSOWarrantyFlag_TEST_oldAsync(ByVal inxml As String, ByVal status As String, ByVal retCode As Boolean)
            Me.UpdateSOWarrantyFlag_TEST_oldAsync(inxml, status, retCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSOWarrantyFlag_TEST_oldAsync(ByVal inxml As String, ByVal status As String, ByVal retCode As Boolean, ByVal userState As Object)
            If (Me.UpdateSOWarrantyFlag_TEST_oldOperationCompleted Is Nothing) Then
                Me.UpdateSOWarrantyFlag_TEST_oldOperationCompleted = AddressOf Me.OnUpdateSOWarrantyFlag_TEST_oldOperationCompleted
            End If
            Me.InvokeAsync("UpdateSOWarrantyFlag_TEST_old", New Object() {inxml, status, retCode}, Me.UpdateSOWarrantyFlag_TEST_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSOWarrantyFlag_TEST_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSOWarrantyFlag_TEST_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSOWarrantyFlag_TEST_oldCompleted(Me, New UpdateSOWarrantyFlag_TEST_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetRMAStatus_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub GetRMAStatus_old(ByRef customer As String, ByRef rma_no As String, ByRef part_no As String, ByRef order_from As String, ByRef status As String, ByRef Xmlresult As String, ByRef retCode As Boolean)
            Dim results() As Object = Me.Invoke("GetRMAStatus_old", New Object() {customer, rma_no, part_no, order_from, status, Xmlresult, retCode})
            customer = CType(results(0),String)
            rma_no = CType(results(1),String)
            part_no = CType(results(2),String)
            order_from = CType(results(3),String)
            status = CType(results(4),String)
            Xmlresult = CType(results(5),String)
            retCode = CType(results(6),Boolean)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRMAStatus_oldAsync(ByVal customer As String, ByVal rma_no As String, ByVal part_no As String, ByVal order_from As String, ByVal status As String, ByVal Xmlresult As String, ByVal retCode As Boolean)
            Me.GetRMAStatus_oldAsync(customer, rma_no, part_no, order_from, status, Xmlresult, retCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRMAStatus_oldAsync(ByVal customer As String, ByVal rma_no As String, ByVal part_no As String, ByVal order_from As String, ByVal status As String, ByVal Xmlresult As String, ByVal retCode As Boolean, ByVal userState As Object)
            If (Me.GetRMAStatus_oldOperationCompleted Is Nothing) Then
                Me.GetRMAStatus_oldOperationCompleted = AddressOf Me.OnGetRMAStatus_oldOperationCompleted
            End If
            Me.InvokeAsync("GetRMAStatus_old", New Object() {customer, rma_no, part_no, order_from, status, Xmlresult, retCode}, Me.GetRMAStatus_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRMAStatus_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRMAStatus_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRMAStatus_oldCompleted(Me, New GetRMAStatus_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetCreditBalance_New", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub GetCreditBalance_New(ByRef company_code As String, ByRef customer As String, ByRef keyDate As String, ByRef CreditBalance As String)
            Dim results() As Object = Me.Invoke("GetCreditBalance_New", New Object() {company_code, customer, keyDate, CreditBalance})
            company_code = CType(results(0),String)
            customer = CType(results(1),String)
            keyDate = CType(results(2),String)
            CreditBalance = CType(results(3),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCreditBalance_NewAsync(ByVal company_code As String, ByVal customer As String, ByVal keyDate As String, ByVal CreditBalance As String)
            Me.GetCreditBalance_NewAsync(company_code, customer, keyDate, CreditBalance, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCreditBalance_NewAsync(ByVal company_code As String, ByVal customer As String, ByVal keyDate As String, ByVal CreditBalance As String, ByVal userState As Object)
            If (Me.GetCreditBalance_NewOperationCompleted Is Nothing) Then
                Me.GetCreditBalance_NewOperationCompleted = AddressOf Me.OnGetCreditBalance_NewOperationCompleted
            End If
            Me.InvokeAsync("GetCreditBalance_New", New Object() {company_code, customer, keyDate, CreditBalance}, Me.GetCreditBalance_NewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCreditBalance_NewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCreditBalance_NewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCreditBalance_NewCompleted(Me, New GetCreditBalance_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetCreditBalance", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCreditBalance(ByVal company_code As String, ByVal customer As String, ByVal keyDate As String) As String
            Dim results() As Object = Me.Invoke("GetCreditBalance", New Object() {company_code, customer, keyDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCreditBalanceAsync(ByVal company_code As String, ByVal customer As String, ByVal keyDate As String)
            Me.GetCreditBalanceAsync(company_code, customer, keyDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCreditBalanceAsync(ByVal company_code As String, ByVal customer As String, ByVal keyDate As String, ByVal userState As Object)
            If (Me.GetCreditBalanceOperationCompleted Is Nothing) Then
                Me.GetCreditBalanceOperationCompleted = AddressOf Me.OnGetCreditBalanceOperationCompleted
            End If
            Me.InvokeAsync("GetCreditBalance", New Object() {company_code, customer, keyDate}, Me.GetCreditBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCreditBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCreditBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCreditBalanceCompleted(Me, New GetCreditBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/eBizAEU_SAPDYNSQL_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function eBizAEU_SAPDYNSQL_old(ByVal strSql As String, ByVal id As String, ByVal pwd As String) As String
            Dim results() As Object = Me.Invoke("eBizAEU_SAPDYNSQL_old", New Object() {strSql, id, pwd})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub eBizAEU_SAPDYNSQL_oldAsync(ByVal strSql As String, ByVal id As String, ByVal pwd As String)
            Me.eBizAEU_SAPDYNSQL_oldAsync(strSql, id, pwd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub eBizAEU_SAPDYNSQL_oldAsync(ByVal strSql As String, ByVal id As String, ByVal pwd As String, ByVal userState As Object)
            If (Me.eBizAEU_SAPDYNSQL_oldOperationCompleted Is Nothing) Then
                Me.eBizAEU_SAPDYNSQL_oldOperationCompleted = AddressOf Me.OneBizAEU_SAPDYNSQL_oldOperationCompleted
            End If
            Me.InvokeAsync("eBizAEU_SAPDYNSQL_old", New Object() {strSql, id, pwd}, Me.eBizAEU_SAPDYNSQL_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OneBizAEU_SAPDYNSQL_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.eBizAEU_SAPDYNSQL_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent eBizAEU_SAPDYNSQL_oldCompleted(Me, New eBizAEU_SAPDYNSQL_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SAP_DynSql_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SAP_DynSql_old(ByVal sqlStatement As String, ByVal IP As String, ByVal Client As String, ByVal SysNum As String, ByVal Account As String, ByVal pwd As String, ByRef SapError As String, ByRef runtimeError As String, ByRef xmlResult As String) As Integer
            Dim results() As Object = Me.Invoke("SAP_DynSql_old", New Object() {sqlStatement, IP, Client, SysNum, Account, pwd, SapError, runtimeError, xmlResult})
            SapError = CType(results(1),String)
            runtimeError = CType(results(2),String)
            xmlResult = CType(results(3),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SAP_DynSql_oldAsync(ByVal sqlStatement As String, ByVal IP As String, ByVal Client As String, ByVal SysNum As String, ByVal Account As String, ByVal pwd As String, ByVal SapError As String, ByVal runtimeError As String, ByVal xmlResult As String)
            Me.SAP_DynSql_oldAsync(sqlStatement, IP, Client, SysNum, Account, pwd, SapError, runtimeError, xmlResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SAP_DynSql_oldAsync(ByVal sqlStatement As String, ByVal IP As String, ByVal Client As String, ByVal SysNum As String, ByVal Account As String, ByVal pwd As String, ByVal SapError As String, ByVal runtimeError As String, ByVal xmlResult As String, ByVal userState As Object)
            If (Me.SAP_DynSql_oldOperationCompleted Is Nothing) Then
                Me.SAP_DynSql_oldOperationCompleted = AddressOf Me.OnSAP_DynSql_oldOperationCompleted
            End If
            Me.InvokeAsync("SAP_DynSql_old", New Object() {sqlStatement, IP, Client, SysNum, Account, pwd, SapError, runtimeError, xmlResult}, Me.SAP_DynSql_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnSAP_DynSql_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.SAP_DynSql_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SAP_DynSql_oldCompleted(Me, New SAP_DynSql_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/ReadSAPTable", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadSAPTable(ByVal table_name As String, ByVal Where As String, ByVal FieldXml As String, ByRef strXml As String) As Integer
            Dim results() As Object = Me.Invoke("ReadSAPTable", New Object() {table_name, Where, FieldXml, strXml})
            strXml = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadSAPTableAsync(ByVal table_name As String, ByVal Where As String, ByVal FieldXml As String, ByVal strXml As String)
            Me.ReadSAPTableAsync(table_name, Where, FieldXml, strXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadSAPTableAsync(ByVal table_name As String, ByVal Where As String, ByVal FieldXml As String, ByVal strXml As String, ByVal userState As Object)
            If (Me.ReadSAPTableOperationCompleted Is Nothing) Then
                Me.ReadSAPTableOperationCompleted = AddressOf Me.OnReadSAPTableOperationCompleted
            End If
            Me.InvokeAsync("ReadSAPTable", New Object() {table_name, Where, FieldXml, strXml}, Me.ReadSAPTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadSAPTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadSAPTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadSAPTableCompleted(Me, New ReadSAPTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/ReadSAPTable2", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadSAPTable2(ByVal table_name As String, ByVal Where As String, ByVal FieldString As String, ByVal top As Integer, ByRef strXml As String) As Integer
            Dim results() As Object = Me.Invoke("ReadSAPTable2", New Object() {table_name, Where, FieldString, top, strXml})
            strXml = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadSAPTable2Async(ByVal table_name As String, ByVal Where As String, ByVal FieldString As String, ByVal top As Integer, ByVal strXml As String)
            Me.ReadSAPTable2Async(table_name, Where, FieldString, top, strXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadSAPTable2Async(ByVal table_name As String, ByVal Where As String, ByVal FieldString As String, ByVal top As Integer, ByVal strXml As String, ByVal userState As Object)
            If (Me.ReadSAPTable2OperationCompleted Is Nothing) Then
                Me.ReadSAPTable2OperationCompleted = AddressOf Me.OnReadSAPTable2OperationCompleted
            End If
            Me.InvokeAsync("ReadSAPTable2", New Object() {table_name, Where, FieldString, top, strXml}, Me.ReadSAPTable2OperationCompleted, userState)
        End Sub
        
        Private Sub OnReadSAPTable2OperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadSAPTable2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadSAPTable2Completed(Me, New ReadSAPTable2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/ReadSAPTable3_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadSAPTable3_old(ByVal table_name As String, ByVal Where As String, ByVal FieldString As String, ByVal top As Integer) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("ReadSAPTable3_old", New Object() {table_name, Where, FieldString, top})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadSAPTable3_oldAsync(ByVal table_name As String, ByVal Where As String, ByVal FieldString As String, ByVal top As Integer)
            Me.ReadSAPTable3_oldAsync(table_name, Where, FieldString, top, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadSAPTable3_oldAsync(ByVal table_name As String, ByVal Where As String, ByVal FieldString As String, ByVal top As Integer, ByVal userState As Object)
            If (Me.ReadSAPTable3_oldOperationCompleted Is Nothing) Then
                Me.ReadSAPTable3_oldOperationCompleted = AddressOf Me.OnReadSAPTable3_oldOperationCompleted
            End If
            Me.InvokeAsync("ReadSAPTable3_old", New Object() {table_name, Where, FieldString, top}, Me.ReadSAPTable3_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadSAPTable3_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadSAPTable3_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadSAPTable3_oldCompleted(Me, New ReadSAPTable3_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/CustomerInquiry_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CustomerInquiry_old(ByVal customer_id As String, ByVal customer_name As String, ByVal customer_addr As String, ByRef errMsg As String) As String
            Dim results() As Object = Me.Invoke("CustomerInquiry_old", New Object() {customer_id, customer_name, customer_addr, errMsg})
            errMsg = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CustomerInquiry_oldAsync(ByVal customer_id As String, ByVal customer_name As String, ByVal customer_addr As String, ByVal errMsg As String)
            Me.CustomerInquiry_oldAsync(customer_id, customer_name, customer_addr, errMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CustomerInquiry_oldAsync(ByVal customer_id As String, ByVal customer_name As String, ByVal customer_addr As String, ByVal errMsg As String, ByVal userState As Object)
            If (Me.CustomerInquiry_oldOperationCompleted Is Nothing) Then
                Me.CustomerInquiry_oldOperationCompleted = AddressOf Me.OnCustomerInquiry_oldOperationCompleted
            End If
            Me.InvokeAsync("CustomerInquiry_old", New Object() {customer_id, customer_name, customer_addr, errMsg}, Me.CustomerInquiry_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnCustomerInquiry_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.CustomerInquiry_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CustomerInquiry_oldCompleted(Me, New CustomerInquiry_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/B2BValidation_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function B2BValidation_old(ByVal sales_org As String, ByVal userid As String, ByVal pwd As String, ByRef errMsg As String) As Integer
            Dim results() As Object = Me.Invoke("B2BValidation_old", New Object() {sales_org, userid, pwd, errMsg})
            errMsg = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub B2BValidation_oldAsync(ByVal sales_org As String, ByVal userid As String, ByVal pwd As String, ByVal errMsg As String)
            Me.B2BValidation_oldAsync(sales_org, userid, pwd, errMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub B2BValidation_oldAsync(ByVal sales_org As String, ByVal userid As String, ByVal pwd As String, ByVal errMsg As String, ByVal userState As Object)
            If (Me.B2BValidation_oldOperationCompleted Is Nothing) Then
                Me.B2BValidation_oldOperationCompleted = AddressOf Me.OnB2BValidation_oldOperationCompleted
            End If
            Me.InvokeAsync("B2BValidation_old", New Object() {sales_org, userid, pwd, errMsg}, Me.B2BValidation_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnB2BValidation_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.B2BValidation_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent B2BValidation_oldCompleted(Me, New B2BValidation_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SerialNumberInquiry", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SerialNumberInquiry(ByVal soXml As String, ByRef SNXml As String) As Integer
            Dim results() As Object = Me.Invoke("SerialNumberInquiry", New Object() {soXml, SNXml})
            SNXml = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SerialNumberInquiryAsync(ByVal soXml As String, ByVal SNXml As String)
            Me.SerialNumberInquiryAsync(soXml, SNXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SerialNumberInquiryAsync(ByVal soXml As String, ByVal SNXml As String, ByVal userState As Object)
            If (Me.SerialNumberInquiryOperationCompleted Is Nothing) Then
                Me.SerialNumberInquiryOperationCompleted = AddressOf Me.OnSerialNumberInquiryOperationCompleted
            End If
            Me.InvokeAsync("SerialNumberInquiry", New Object() {soXml, SNXml}, Me.SerialNumberInquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnSerialNumberInquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.SerialNumberInquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SerialNumberInquiryCompleted(Me, New SerialNumberInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/TrackingInfoInquiry", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TrackingInfoInquiry(ByVal soXml As String, ByRef TrackInfoXml As String) As Integer
            Dim results() As Object = Me.Invoke("TrackingInfoInquiry", New Object() {soXml, TrackInfoXml})
            TrackInfoXml = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TrackingInfoInquiryAsync(ByVal soXml As String, ByVal TrackInfoXml As String)
            Me.TrackingInfoInquiryAsync(soXml, TrackInfoXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TrackingInfoInquiryAsync(ByVal soXml As String, ByVal TrackInfoXml As String, ByVal userState As Object)
            If (Me.TrackingInfoInquiryOperationCompleted Is Nothing) Then
                Me.TrackingInfoInquiryOperationCompleted = AddressOf Me.OnTrackingInfoInquiryOperationCompleted
            End If
            Me.InvokeAsync("TrackingInfoInquiry", New Object() {soXml, TrackInfoXml}, Me.TrackingInfoInquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnTrackingInfoInquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.TrackingInfoInquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TrackingInfoInquiryCompleted(Me, New TrackingInfoInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Salesorder_Getlist_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Salesorder_Getlist_old(ByVal SalesOrg As String, ByVal CustId As String, ByVal dateFrom As String, ByVal dateTo As String, ByVal so_no As String, ByVal po_no As String, ByVal part_no As String, ByRef strXml As String, ByRef retCode As Boolean)
            Dim results() As Object = Me.Invoke("Salesorder_Getlist_old", New Object() {SalesOrg, CustId, dateFrom, dateTo, so_no, po_no, part_no, strXml, retCode})
            strXml = CType(results(0),String)
            retCode = CType(results(1),Boolean)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Salesorder_Getlist_oldAsync(ByVal SalesOrg As String, ByVal CustId As String, ByVal dateFrom As String, ByVal dateTo As String, ByVal so_no As String, ByVal po_no As String, ByVal part_no As String, ByVal strXml As String, ByVal retCode As Boolean)
            Me.Salesorder_Getlist_oldAsync(SalesOrg, CustId, dateFrom, dateTo, so_no, po_no, part_no, strXml, retCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Salesorder_Getlist_oldAsync(ByVal SalesOrg As String, ByVal CustId As String, ByVal dateFrom As String, ByVal dateTo As String, ByVal so_no As String, ByVal po_no As String, ByVal part_no As String, ByVal strXml As String, ByVal retCode As Boolean, ByVal userState As Object)
            If (Me.Salesorder_Getlist_oldOperationCompleted Is Nothing) Then
                Me.Salesorder_Getlist_oldOperationCompleted = AddressOf Me.OnSalesorder_Getlist_oldOperationCompleted
            End If
            Me.InvokeAsync("Salesorder_Getlist_old", New Object() {SalesOrg, CustId, dateFrom, dateTo, so_no, po_no, part_no, strXml, retCode}, Me.Salesorder_Getlist_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnSalesorder_Getlist_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.Salesorder_Getlist_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Salesorder_Getlist_oldCompleted(Me, New Salesorder_Getlist_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Bapi_Salesorder_Getlist_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Bapi_Salesorder_Getlist_old(ByVal SalesOrg As String, ByVal CustId As String, ByVal dateFrom As String, ByVal dateTo As String, ByVal so_no As String, ByVal po_no As String, ByVal part_no As String, ByRef strXml As String) As Boolean
            Dim results() As Object = Me.Invoke("Bapi_Salesorder_Getlist_old", New Object() {SalesOrg, CustId, dateFrom, dateTo, so_no, po_no, part_no, strXml})
            strXml = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Bapi_Salesorder_Getlist_oldAsync(ByVal SalesOrg As String, ByVal CustId As String, ByVal dateFrom As String, ByVal dateTo As String, ByVal so_no As String, ByVal po_no As String, ByVal part_no As String, ByVal strXml As String)
            Me.Bapi_Salesorder_Getlist_oldAsync(SalesOrg, CustId, dateFrom, dateTo, so_no, po_no, part_no, strXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Bapi_Salesorder_Getlist_oldAsync(ByVal SalesOrg As String, ByVal CustId As String, ByVal dateFrom As String, ByVal dateTo As String, ByVal so_no As String, ByVal po_no As String, ByVal part_no As String, ByVal strXml As String, ByVal userState As Object)
            If (Me.Bapi_Salesorder_Getlist_oldOperationCompleted Is Nothing) Then
                Me.Bapi_Salesorder_Getlist_oldOperationCompleted = AddressOf Me.OnBapi_Salesorder_Getlist_oldOperationCompleted
            End If
            Me.InvokeAsync("Bapi_Salesorder_Getlist_old", New Object() {SalesOrg, CustId, dateFrom, dateTo, so_no, po_no, part_no, strXml}, Me.Bapi_Salesorder_Getlist_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnBapi_Salesorder_Getlist_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.Bapi_Salesorder_Getlist_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Bapi_Salesorder_Getlist_oldCompleted(Me, New Bapi_Salesorder_Getlist_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetOrderHistory_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderHistory_old(ByVal SalesOrg As String, ByVal CustId As String, ByVal dateFrom As String, ByVal dateTo As String, ByVal so_no As String, ByVal po_no As String, ByVal part_no As String, ByRef strXml As String) As Boolean
            Dim results() As Object = Me.Invoke("GetOrderHistory_old", New Object() {SalesOrg, CustId, dateFrom, dateTo, so_no, po_no, part_no, strXml})
            strXml = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderHistory_oldAsync(ByVal SalesOrg As String, ByVal CustId As String, ByVal dateFrom As String, ByVal dateTo As String, ByVal so_no As String, ByVal po_no As String, ByVal part_no As String, ByVal strXml As String)
            Me.GetOrderHistory_oldAsync(SalesOrg, CustId, dateFrom, dateTo, so_no, po_no, part_no, strXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderHistory_oldAsync(ByVal SalesOrg As String, ByVal CustId As String, ByVal dateFrom As String, ByVal dateTo As String, ByVal so_no As String, ByVal po_no As String, ByVal part_no As String, ByVal strXml As String, ByVal userState As Object)
            If (Me.GetOrderHistory_oldOperationCompleted Is Nothing) Then
                Me.GetOrderHistory_oldOperationCompleted = AddressOf Me.OnGetOrderHistory_oldOperationCompleted
            End If
            Me.InvokeAsync("GetOrderHistory_old", New Object() {SalesOrg, CustId, dateFrom, dateTo, so_no, po_no, part_no, strXml}, Me.GetOrderHistory_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderHistory_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderHistory_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderHistory_oldCompleted(Me, New GetOrderHistory_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetBackOrder_Track_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBackOrder_Track_old(ByVal xSalesOrg As String, ByVal xCustomer As String, ByVal xDateFrom As String, ByVal xDateTo As String, ByVal xMaterial As String, ByVal xPO_NO As String, ByVal xSO_NO As String, ByRef BackOrder_XML As String) As Integer
            Dim results() As Object = Me.Invoke("GetBackOrder_Track_old", New Object() {xSalesOrg, xCustomer, xDateFrom, xDateTo, xMaterial, xPO_NO, xSO_NO, BackOrder_XML})
            BackOrder_XML = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBackOrder_Track_oldAsync(ByVal xSalesOrg As String, ByVal xCustomer As String, ByVal xDateFrom As String, ByVal xDateTo As String, ByVal xMaterial As String, ByVal xPO_NO As String, ByVal xSO_NO As String, ByVal BackOrder_XML As String)
            Me.GetBackOrder_Track_oldAsync(xSalesOrg, xCustomer, xDateFrom, xDateTo, xMaterial, xPO_NO, xSO_NO, BackOrder_XML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBackOrder_Track_oldAsync(ByVal xSalesOrg As String, ByVal xCustomer As String, ByVal xDateFrom As String, ByVal xDateTo As String, ByVal xMaterial As String, ByVal xPO_NO As String, ByVal xSO_NO As String, ByVal BackOrder_XML As String, ByVal userState As Object)
            If (Me.GetBackOrder_Track_oldOperationCompleted Is Nothing) Then
                Me.GetBackOrder_Track_oldOperationCompleted = AddressOf Me.OnGetBackOrder_Track_oldOperationCompleted
            End If
            Me.InvokeAsync("GetBackOrder_Track_old", New Object() {xSalesOrg, xCustomer, xDateFrom, xDateTo, xMaterial, xPO_NO, xSO_NO, BackOrder_XML}, Me.GetBackOrder_Track_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBackOrder_Track_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBackOrder_Track_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBackOrder_Track_oldCompleted(Me, New GetBackOrder_Track_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetBackOrderList_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBackOrderList_old(ByVal xSO_NO As String, ByVal xSoldTo As String, ByVal xSalesOrg As String, ByVal xDisChnl As String, ByVal xDateFrom As String, ByVal xDateTo As String, ByRef BackOrder_XML As String) As Integer
            Dim results() As Object = Me.Invoke("GetBackOrderList_old", New Object() {xSO_NO, xSoldTo, xSalesOrg, xDisChnl, xDateFrom, xDateTo, BackOrder_XML})
            BackOrder_XML = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBackOrderList_oldAsync(ByVal xSO_NO As String, ByVal xSoldTo As String, ByVal xSalesOrg As String, ByVal xDisChnl As String, ByVal xDateFrom As String, ByVal xDateTo As String, ByVal BackOrder_XML As String)
            Me.GetBackOrderList_oldAsync(xSO_NO, xSoldTo, xSalesOrg, xDisChnl, xDateFrom, xDateTo, BackOrder_XML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBackOrderList_oldAsync(ByVal xSO_NO As String, ByVal xSoldTo As String, ByVal xSalesOrg As String, ByVal xDisChnl As String, ByVal xDateFrom As String, ByVal xDateTo As String, ByVal BackOrder_XML As String, ByVal userState As Object)
            If (Me.GetBackOrderList_oldOperationCompleted Is Nothing) Then
                Me.GetBackOrderList_oldOperationCompleted = AddressOf Me.OnGetBackOrderList_oldOperationCompleted
            End If
            Me.InvokeAsync("GetBackOrderList_old", New Object() {xSO_NO, xSoldTo, xSalesOrg, xDisChnl, xDateFrom, xDateTo, BackOrder_XML}, Me.GetBackOrderList_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBackOrderList_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBackOrderList_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBackOrderList_oldCompleted(Me, New GetBackOrderList_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetBackOrderItem_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBackOrderItem_old(ByVal xSO_NO As String, ByRef BackOrderItem_XML As String, ByRef strMsg1 As String) As Integer
            Dim results() As Object = Me.Invoke("GetBackOrderItem_old", New Object() {xSO_NO, BackOrderItem_XML, strMsg1})
            BackOrderItem_XML = CType(results(1),String)
            strMsg1 = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBackOrderItem_oldAsync(ByVal xSO_NO As String, ByVal BackOrderItem_XML As String, ByVal strMsg1 As String)
            Me.GetBackOrderItem_oldAsync(xSO_NO, BackOrderItem_XML, strMsg1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBackOrderItem_oldAsync(ByVal xSO_NO As String, ByVal BackOrderItem_XML As String, ByVal strMsg1 As String, ByVal userState As Object)
            If (Me.GetBackOrderItem_oldOperationCompleted Is Nothing) Then
                Me.GetBackOrderItem_oldOperationCompleted = AddressOf Me.OnGetBackOrderItem_oldOperationCompleted
            End If
            Me.InvokeAsync("GetBackOrderItem_old", New Object() {xSO_NO, BackOrderItem_XML, strMsg1}, Me.GetBackOrderItem_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBackOrderItem_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBackOrderItem_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBackOrderItem_oldCompleted(Me, New GetBackOrderItem_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Get_Customer_AEU_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Customer_AEU_old(ByVal Cus_ID As String, ByVal sales_org As String, ByRef Cus_Add As String, ByRef Cus_Gen As String, ByRef cur As String, ByRef credit_term As String, ByRef ship_via As String, ByRef company_price_type As String, ByRef ship_condition As String, ByRef parent_company_id As String, ByRef add2 As String, ByRef attention As String, ByRef fax_no As String) As String
            Dim results() As Object = Me.Invoke("Get_Customer_AEU_old", New Object() {Cus_ID, sales_org, Cus_Add, Cus_Gen, cur, credit_term, ship_via, company_price_type, ship_condition, parent_company_id, add2, attention, fax_no})
            Cus_Add = CType(results(1),String)
            Cus_Gen = CType(results(2),String)
            cur = CType(results(3),String)
            credit_term = CType(results(4),String)
            ship_via = CType(results(5),String)
            company_price_type = CType(results(6),String)
            ship_condition = CType(results(7),String)
            parent_company_id = CType(results(8),String)
            add2 = CType(results(9),String)
            attention = CType(results(10),String)
            fax_no = CType(results(11),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Customer_AEU_oldAsync(ByVal Cus_ID As String, ByVal sales_org As String, ByVal Cus_Add As String, ByVal Cus_Gen As String, ByVal cur As String, ByVal credit_term As String, ByVal ship_via As String, ByVal company_price_type As String, ByVal ship_condition As String, ByVal parent_company_id As String, ByVal add2 As String, ByVal attention As String, ByVal fax_no As String)
            Me.Get_Customer_AEU_oldAsync(Cus_ID, sales_org, Cus_Add, Cus_Gen, cur, credit_term, ship_via, company_price_type, ship_condition, parent_company_id, add2, attention, fax_no, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Customer_AEU_oldAsync(ByVal Cus_ID As String, ByVal sales_org As String, ByVal Cus_Add As String, ByVal Cus_Gen As String, ByVal cur As String, ByVal credit_term As String, ByVal ship_via As String, ByVal company_price_type As String, ByVal ship_condition As String, ByVal parent_company_id As String, ByVal add2 As String, ByVal attention As String, ByVal fax_no As String, ByVal userState As Object)
            If (Me.Get_Customer_AEU_oldOperationCompleted Is Nothing) Then
                Me.Get_Customer_AEU_oldOperationCompleted = AddressOf Me.OnGet_Customer_AEU_oldOperationCompleted
            End If
            Me.InvokeAsync("Get_Customer_AEU_old", New Object() {Cus_ID, sales_org, Cus_Add, Cus_Gen, cur, credit_term, ship_via, company_price_type, ship_condition, parent_company_id, add2, attention, fax_no}, Me.Get_Customer_AEU_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Customer_AEU_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Customer_AEU_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Customer_AEU_oldCompleted(Me, New Get_Customer_AEU_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Get_Next_WrokingDate", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Next_WrokingDate(ByRef iATPDate As String, ByVal Loading_Days As String) As Integer
            Dim results() As Object = Me.Invoke("Get_Next_WrokingDate", New Object() {iATPDate, Loading_Days})
            iATPDate = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Next_WrokingDateAsync(ByVal iATPDate As String, ByVal Loading_Days As String)
            Me.Get_Next_WrokingDateAsync(iATPDate, Loading_Days, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Next_WrokingDateAsync(ByVal iATPDate As String, ByVal Loading_Days As String, ByVal userState As Object)
            If (Me.Get_Next_WrokingDateOperationCompleted Is Nothing) Then
                Me.Get_Next_WrokingDateOperationCompleted = AddressOf Me.OnGet_Next_WrokingDateOperationCompleted
            End If
            Me.InvokeAsync("Get_Next_WrokingDate", New Object() {iATPDate, Loading_Days}, Me.Get_Next_WrokingDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Next_WrokingDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Next_WrokingDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Next_WrokingDateCompleted(Me, New Get_Next_WrokingDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Get_Next_WorkingDate_ByCode", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Next_WorkingDate_ByCode(ByRef iATPDate As String, ByVal Loading_Days As String, ByVal code As String) As Integer
            Dim results() As Object = Me.Invoke("Get_Next_WorkingDate_ByCode", New Object() {iATPDate, Loading_Days, code})
            iATPDate = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Next_WorkingDate_ByCodeAsync(ByVal iATPDate As String, ByVal Loading_Days As String, ByVal code As String)
            Me.Get_Next_WorkingDate_ByCodeAsync(iATPDate, Loading_Days, code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Next_WorkingDate_ByCodeAsync(ByVal iATPDate As String, ByVal Loading_Days As String, ByVal code As String, ByVal userState As Object)
            If (Me.Get_Next_WorkingDate_ByCodeOperationCompleted Is Nothing) Then
                Me.Get_Next_WorkingDate_ByCodeOperationCompleted = AddressOf Me.OnGet_Next_WorkingDate_ByCodeOperationCompleted
            End If
            Me.InvokeAsync("Get_Next_WorkingDate_ByCode", New Object() {iATPDate, Loading_Days, code}, Me.Get_Next_WorkingDate_ByCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Next_WorkingDate_ByCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Next_WorkingDate_ByCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Next_WorkingDate_ByCodeCompleted(Me, New Get_Next_WorkingDate_ByCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetAR_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub GetAR_old(ByVal Sales_Org As String, ByVal discha As String, ByVal division As String, ByRef customer_id As String, ByVal SDate As String, ByVal EDate As String, ByVal S_Due_Date As String, ByVal E_Due_Date As String, ByRef ArResult As String, ByRef retCode As Boolean)
            Dim results() As Object = Me.Invoke("GetAR_old", New Object() {Sales_Org, discha, division, customer_id, SDate, EDate, S_Due_Date, E_Due_Date, ArResult, retCode})
            customer_id = CType(results(0),String)
            ArResult = CType(results(1),String)
            retCode = CType(results(2),Boolean)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAR_oldAsync(ByVal Sales_Org As String, ByVal discha As String, ByVal division As String, ByVal customer_id As String, ByVal SDate As String, ByVal EDate As String, ByVal S_Due_Date As String, ByVal E_Due_Date As String, ByVal ArResult As String, ByVal retCode As Boolean)
            Me.GetAR_oldAsync(Sales_Org, discha, division, customer_id, SDate, EDate, S_Due_Date, E_Due_Date, ArResult, retCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAR_oldAsync(ByVal Sales_Org As String, ByVal discha As String, ByVal division As String, ByVal customer_id As String, ByVal SDate As String, ByVal EDate As String, ByVal S_Due_Date As String, ByVal E_Due_Date As String, ByVal ArResult As String, ByVal retCode As Boolean, ByVal userState As Object)
            If (Me.GetAR_oldOperationCompleted Is Nothing) Then
                Me.GetAR_oldOperationCompleted = AddressOf Me.OnGetAR_oldOperationCompleted
            End If
            Me.InvokeAsync("GetAR_old", New Object() {Sales_Org, discha, division, customer_id, SDate, EDate, S_Due_Date, E_Due_Date, ArResult, retCode}, Me.GetAR_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAR_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAR_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAR_oldCompleted(Me, New GetAR_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetAR_Detail_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAR_Detail_old(ByVal Sales_Org As String, ByVal discha As String, ByVal division As String, ByVal customer_id As String, ByVal SDate As String, ByVal EDate As String, ByVal S_Due_Date As String, ByVal E_Due_Date As String, ByRef ArResult As String) As Integer
            Dim results() As Object = Me.Invoke("GetAR_Detail_old", New Object() {Sales_Org, discha, division, customer_id, SDate, EDate, S_Due_Date, E_Due_Date, ArResult})
            ArResult = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAR_Detail_oldAsync(ByVal Sales_Org As String, ByVal discha As String, ByVal division As String, ByVal customer_id As String, ByVal SDate As String, ByVal EDate As String, ByVal S_Due_Date As String, ByVal E_Due_Date As String, ByVal ArResult As String)
            Me.GetAR_Detail_oldAsync(Sales_Org, discha, division, customer_id, SDate, EDate, S_Due_Date, E_Due_Date, ArResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAR_Detail_oldAsync(ByVal Sales_Org As String, ByVal discha As String, ByVal division As String, ByVal customer_id As String, ByVal SDate As String, ByVal EDate As String, ByVal S_Due_Date As String, ByVal E_Due_Date As String, ByVal ArResult As String, ByVal userState As Object)
            If (Me.GetAR_Detail_oldOperationCompleted Is Nothing) Then
                Me.GetAR_Detail_oldOperationCompleted = AddressOf Me.OnGetAR_Detail_oldOperationCompleted
            End If
            Me.InvokeAsync("GetAR_Detail_old", New Object() {Sales_Org, discha, division, customer_id, SDate, EDate, S_Due_Date, E_Due_Date, ArResult}, Me.GetAR_Detail_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAR_Detail_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAR_Detail_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAR_Detail_oldCompleted(Me, New GetAR_Detail_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetAR_Detail_New_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAR_Detail_New_old(ByVal Sales_Org As String, ByVal discha As String, ByVal division As String, ByVal customer_id As String, ByVal SDate As String, ByVal EDate As String, ByVal S_Due_Date As String, ByVal E_Due_Date As String, ByVal status As String, ByRef ArResult As String) As Integer
            Dim results() As Object = Me.Invoke("GetAR_Detail_New_old", New Object() {Sales_Org, discha, division, customer_id, SDate, EDate, S_Due_Date, E_Due_Date, status, ArResult})
            ArResult = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAR_Detail_New_oldAsync(ByVal Sales_Org As String, ByVal discha As String, ByVal division As String, ByVal customer_id As String, ByVal SDate As String, ByVal EDate As String, ByVal S_Due_Date As String, ByVal E_Due_Date As String, ByVal status As String, ByVal ArResult As String)
            Me.GetAR_Detail_New_oldAsync(Sales_Org, discha, division, customer_id, SDate, EDate, S_Due_Date, E_Due_Date, status, ArResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAR_Detail_New_oldAsync(ByVal Sales_Org As String, ByVal discha As String, ByVal division As String, ByVal customer_id As String, ByVal SDate As String, ByVal EDate As String, ByVal S_Due_Date As String, ByVal E_Due_Date As String, ByVal status As String, ByVal ArResult As String, ByVal userState As Object)
            If (Me.GetAR_Detail_New_oldOperationCompleted Is Nothing) Then
                Me.GetAR_Detail_New_oldOperationCompleted = AddressOf Me.OnGetAR_Detail_New_oldOperationCompleted
            End If
            Me.InvokeAsync("GetAR_Detail_New_old", New Object() {Sales_Org, discha, division, customer_id, SDate, EDate, S_Due_Date, E_Due_Date, status, ArResult}, Me.GetAR_Detail_New_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAR_Detail_New_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAR_Detail_New_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAR_Detail_New_oldCompleted(Me, New GetAR_Detail_New_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetAR_SO_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAR_SO_old(ByVal Sales_Org As String, ByVal ar_no As String, ByVal disCha As String, ByVal Div As String, ByRef strResult As String) As Integer
            Dim results() As Object = Me.Invoke("GetAR_SO_old", New Object() {Sales_Org, ar_no, disCha, Div, strResult})
            strResult = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAR_SO_oldAsync(ByVal Sales_Org As String, ByVal ar_no As String, ByVal disCha As String, ByVal Div As String, ByVal strResult As String)
            Me.GetAR_SO_oldAsync(Sales_Org, ar_no, disCha, Div, strResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAR_SO_oldAsync(ByVal Sales_Org As String, ByVal ar_no As String, ByVal disCha As String, ByVal Div As String, ByVal strResult As String, ByVal userState As Object)
            If (Me.GetAR_SO_oldOperationCompleted Is Nothing) Then
                Me.GetAR_SO_oldOperationCompleted = AddressOf Me.OnGetAR_SO_oldOperationCompleted
            End If
            Me.InvokeAsync("GetAR_SO_old", New Object() {Sales_Org, ar_no, disCha, Div, strResult}, Me.GetAR_SO_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAR_SO_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAR_SO_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAR_SO_oldCompleted(Me, New GetAR_SO_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMaterialStatusCost_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaterialStatusCost_old(ByVal Sales_Org As String, ByVal part_no As String, ByRef MPlant As String, ByRef MCurrency As String, ByRef MCost As Decimal, ByRef MStatus As String) As Integer
            Dim results() As Object = Me.Invoke("GetMaterialStatusCost_old", New Object() {Sales_Org, part_no, MPlant, MCurrency, MCost, MStatus})
            MPlant = CType(results(1),String)
            MCurrency = CType(results(2),String)
            MCost = CType(results(3),Decimal)
            MStatus = CType(results(4),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaterialStatusCost_oldAsync(ByVal Sales_Org As String, ByVal part_no As String, ByVal MPlant As String, ByVal MCurrency As String, ByVal MCost As Decimal, ByVal MStatus As String)
            Me.GetMaterialStatusCost_oldAsync(Sales_Org, part_no, MPlant, MCurrency, MCost, MStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaterialStatusCost_oldAsync(ByVal Sales_Org As String, ByVal part_no As String, ByVal MPlant As String, ByVal MCurrency As String, ByVal MCost As Decimal, ByVal MStatus As String, ByVal userState As Object)
            If (Me.GetMaterialStatusCost_oldOperationCompleted Is Nothing) Then
                Me.GetMaterialStatusCost_oldOperationCompleted = AddressOf Me.OnGetMaterialStatusCost_oldOperationCompleted
            End If
            Me.InvokeAsync("GetMaterialStatusCost_old", New Object() {Sales_Org, part_no, MPlant, MCurrency, MCost, MStatus}, Me.GetMaterialStatusCost_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaterialStatusCost_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaterialStatusCost_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaterialStatusCost_oldCompleted(Me, New GetMaterialStatusCost_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/AR_DueDate_Inquiry_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AR_DueDate_Inquiry_old(ByVal ARXml As String, ByRef ARDueResult As String) As Integer
            Dim results() As Object = Me.Invoke("AR_DueDate_Inquiry_old", New Object() {ARXml, ARDueResult})
            ARDueResult = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AR_DueDate_Inquiry_oldAsync(ByVal ARXml As String, ByVal ARDueResult As String)
            Me.AR_DueDate_Inquiry_oldAsync(ARXml, ARDueResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AR_DueDate_Inquiry_oldAsync(ByVal ARXml As String, ByVal ARDueResult As String, ByVal userState As Object)
            If (Me.AR_DueDate_Inquiry_oldOperationCompleted Is Nothing) Then
                Me.AR_DueDate_Inquiry_oldOperationCompleted = AddressOf Me.OnAR_DueDate_Inquiry_oldOperationCompleted
            End If
            Me.InvokeAsync("AR_DueDate_Inquiry_old", New Object() {ARXml, ARDueResult}, Me.AR_DueDate_Inquiry_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnAR_DueDate_Inquiry_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.AR_DueDate_Inquiry_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AR_DueDate_Inquiry_oldCompleted(Me, New AR_DueDate_Inquiry_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetCustAP_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub GetCustAP_old(ByVal Sales_Org As String, ByRef customer_id As String, ByVal FromDate As String, ByVal ToDate As String, ByRef APResult As String, ByRef retCode As Boolean)
            Dim results() As Object = Me.Invoke("GetCustAP_old", New Object() {Sales_Org, customer_id, FromDate, ToDate, APResult, retCode})
            customer_id = CType(results(0),String)
            APResult = CType(results(1),String)
            retCode = CType(results(2),Boolean)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustAP_oldAsync(ByVal Sales_Org As String, ByVal customer_id As String, ByVal FromDate As String, ByVal ToDate As String, ByVal APResult As String, ByVal retCode As Boolean)
            Me.GetCustAP_oldAsync(Sales_Org, customer_id, FromDate, ToDate, APResult, retCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustAP_oldAsync(ByVal Sales_Org As String, ByVal customer_id As String, ByVal FromDate As String, ByVal ToDate As String, ByVal APResult As String, ByVal retCode As Boolean, ByVal userState As Object)
            If (Me.GetCustAP_oldOperationCompleted Is Nothing) Then
                Me.GetCustAP_oldOperationCompleted = AddressOf Me.OnGetCustAP_oldOperationCompleted
            End If
            Me.InvokeAsync("GetCustAP_old", New Object() {Sales_Org, customer_id, FromDate, ToDate, APResult, retCode}, Me.GetCustAP_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustAP_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustAP_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustAP_oldCompleted(Me, New GetCustAP_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetCustomerAP_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerAP_old(ByVal Sales_Org As String, ByVal customer_id As String, ByVal FromDate As String, ByVal ToDate As String, ByRef APResult As String) As Integer
            Dim results() As Object = Me.Invoke("GetCustomerAP_old", New Object() {Sales_Org, customer_id, FromDate, ToDate, APResult})
            APResult = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerAP_oldAsync(ByVal Sales_Org As String, ByVal customer_id As String, ByVal FromDate As String, ByVal ToDate As String, ByVal APResult As String)
            Me.GetCustomerAP_oldAsync(Sales_Org, customer_id, FromDate, ToDate, APResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerAP_oldAsync(ByVal Sales_Org As String, ByVal customer_id As String, ByVal FromDate As String, ByVal ToDate As String, ByVal APResult As String, ByVal userState As Object)
            If (Me.GetCustomerAP_oldOperationCompleted Is Nothing) Then
                Me.GetCustomerAP_oldOperationCompleted = AddressOf Me.OnGetCustomerAP_oldOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerAP_old", New Object() {Sales_Org, customer_id, FromDate, ToDate, APResult}, Me.GetCustomerAP_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerAP_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerAP_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerAP_oldCompleted(Me, New GetCustomerAP_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMultiATP_New", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiATP_New(ByVal strXML As String, ByRef strResult As String, ByRef strRemark As String) As Integer
            Dim results() As Object = Me.Invoke("GetMultiATP_New", New Object() {strXML})
            strResult = CType(results(1),String)
            strRemark = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiATP_NewAsync(ByVal strXML As String)
            Me.GetMultiATP_NewAsync(strXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiATP_NewAsync(ByVal strXML As String, ByVal userState As Object)
            If (Me.GetMultiATP_NewOperationCompleted Is Nothing) Then
                Me.GetMultiATP_NewOperationCompleted = AddressOf Me.OnGetMultiATP_NewOperationCompleted
            End If
            Me.InvokeAsync("GetMultiATP_New", New Object() {strXML}, Me.GetMultiATP_NewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiATP_NewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiATP_NewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiATP_NewCompleted(Me, New GetMultiATP_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMultiATP_ACN", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiATP_ACN(ByVal strXML As String, ByRef strResult As String, ByRef strRemark As String) As Integer
            Dim results() As Object = Me.Invoke("GetMultiATP_ACN", New Object() {strXML})
            strResult = CType(results(1),String)
            strRemark = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiATP_ACNAsync(ByVal strXML As String)
            Me.GetMultiATP_ACNAsync(strXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiATP_ACNAsync(ByVal strXML As String, ByVal userState As Object)
            If (Me.GetMultiATP_ACNOperationCompleted Is Nothing) Then
                Me.GetMultiATP_ACNOperationCompleted = AddressOf Me.OnGetMultiATP_ACNOperationCompleted
            End If
            Me.InvokeAsync("GetMultiATP_ACN", New Object() {strXML}, Me.GetMultiATP_ACNOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiATP_ACNOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiATP_ACNCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiATP_ACNCompleted(Me, New GetMultiATP_ACNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMultiATP_New_US", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiATP_New_US(ByVal strXML As String, ByRef strResult As String, ByRef strRemark As String) As Integer
            Dim results() As Object = Me.Invoke("GetMultiATP_New_US", New Object() {strXML})
            strResult = CType(results(1),String)
            strRemark = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiATP_New_USAsync(ByVal strXML As String)
            Me.GetMultiATP_New_USAsync(strXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiATP_New_USAsync(ByVal strXML As String, ByVal userState As Object)
            If (Me.GetMultiATP_New_USOperationCompleted Is Nothing) Then
                Me.GetMultiATP_New_USOperationCompleted = AddressOf Me.OnGetMultiATP_New_USOperationCompleted
            End If
            Me.InvokeAsync("GetMultiATP_New_US", New Object() {strXML}, Me.GetMultiATP_New_USOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiATP_New_USOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiATP_New_USCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiATP_New_USCompleted(Me, New GetMultiATP_New_USCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMultiATP_New2", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiATP_New2(ByVal strXML As String, ByRef strResult As String, ByRef strRemark As String) As Integer
            Dim results() As Object = Me.Invoke("GetMultiATP_New2", New Object() {strXML})
            strResult = CType(results(1),String)
            strRemark = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiATP_New2Async(ByVal strXML As String)
            Me.GetMultiATP_New2Async(strXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiATP_New2Async(ByVal strXML As String, ByVal userState As Object)
            If (Me.GetMultiATP_New2OperationCompleted Is Nothing) Then
                Me.GetMultiATP_New2OperationCompleted = AddressOf Me.OnGetMultiATP_New2OperationCompleted
            End If
            Me.InvokeAsync("GetMultiATP_New2", New Object() {strXML}, Me.GetMultiATP_New2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiATP_New2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiATP_New2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiATP_New2Completed(Me, New GetMultiATP_New2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetSingleATP", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSingleATP(ByVal WERK As String, ByVal MATNR As String, ByVal REQ_QTY As Decimal, ByVal REQ_Date As String, ByVal UNI As String, ByRef strResult As String, ByRef strRemark As String) As Integer
            Dim results() As Object = Me.Invoke("GetSingleATP", New Object() {WERK, MATNR, REQ_QTY, REQ_Date, UNI, strResult, strRemark})
            strResult = CType(results(1),String)
            strRemark = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSingleATPAsync(ByVal WERK As String, ByVal MATNR As String, ByVal REQ_QTY As Decimal, ByVal REQ_Date As String, ByVal UNI As String, ByVal strResult As String, ByVal strRemark As String)
            Me.GetSingleATPAsync(WERK, MATNR, REQ_QTY, REQ_Date, UNI, strResult, strRemark, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSingleATPAsync(ByVal WERK As String, ByVal MATNR As String, ByVal REQ_QTY As Decimal, ByVal REQ_Date As String, ByVal UNI As String, ByVal strResult As String, ByVal strRemark As String, ByVal userState As Object)
            If (Me.GetSingleATPOperationCompleted Is Nothing) Then
                Me.GetSingleATPOperationCompleted = AddressOf Me.OnGetSingleATPOperationCompleted
            End If
            Me.InvokeAsync("GetSingleATP", New Object() {WERK, MATNR, REQ_QTY, REQ_Date, UNI, strResult, strRemark}, Me.GetSingleATPOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSingleATPOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSingleATPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSingleATPCompleted(Me, New GetSingleATPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetSingleATP_New", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSingleATP_New(ByVal distr_chan As String, ByVal division As String, ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal WERK As String, ByVal MATNR As String, ByVal REQ_QTY As Decimal, ByVal REQ_Date As String, ByVal UNI As String, ByRef strResult As String, ByRef strRemark As String) As Integer
            Dim results() As Object = Me.Invoke("GetSingleATP_New", New Object() {distr_chan, division, customer_no, shipto_no, sales_org, WERK, MATNR, REQ_QTY, REQ_Date, UNI, strResult, strRemark})
            strResult = CType(results(1),String)
            strRemark = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSingleATP_NewAsync(ByVal distr_chan As String, ByVal division As String, ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal WERK As String, ByVal MATNR As String, ByVal REQ_QTY As Decimal, ByVal REQ_Date As String, ByVal UNI As String, ByVal strResult As String, ByVal strRemark As String)
            Me.GetSingleATP_NewAsync(distr_chan, division, customer_no, shipto_no, sales_org, WERK, MATNR, REQ_QTY, REQ_Date, UNI, strResult, strRemark, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSingleATP_NewAsync(ByVal distr_chan As String, ByVal division As String, ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal WERK As String, ByVal MATNR As String, ByVal REQ_QTY As Decimal, ByVal REQ_Date As String, ByVal UNI As String, ByVal strResult As String, ByVal strRemark As String, ByVal userState As Object)
            If (Me.GetSingleATP_NewOperationCompleted Is Nothing) Then
                Me.GetSingleATP_NewOperationCompleted = AddressOf Me.OnGetSingleATP_NewOperationCompleted
            End If
            Me.InvokeAsync("GetSingleATP_New", New Object() {distr_chan, division, customer_no, shipto_no, sales_org, WERK, MATNR, REQ_QTY, REQ_Date, UNI, strResult, strRemark}, Me.GetSingleATP_NewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSingleATP_NewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSingleATP_NewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSingleATP_NewCompleted(Me, New GetSingleATP_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMultiDueDate_New", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiDueDate_New(ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal distr_chan As String, ByVal division As String, ByVal strXML As String, ByRef strResult As String, ByRef strRemark As String) As Integer
            Dim results() As Object = Me.Invoke("GetMultiDueDate_New", New Object() {customer_no, shipto_no, sales_org, distr_chan, division, strXML, strResult, strRemark})
            strResult = CType(results(1),String)
            strRemark = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiDueDate_NewAsync(ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal distr_chan As String, ByVal division As String, ByVal strXML As String, ByVal strResult As String, ByVal strRemark As String)
            Me.GetMultiDueDate_NewAsync(customer_no, shipto_no, sales_org, distr_chan, division, strXML, strResult, strRemark, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiDueDate_NewAsync(ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal distr_chan As String, ByVal division As String, ByVal strXML As String, ByVal strResult As String, ByVal strRemark As String, ByVal userState As Object)
            If (Me.GetMultiDueDate_NewOperationCompleted Is Nothing) Then
                Me.GetMultiDueDate_NewOperationCompleted = AddressOf Me.OnGetMultiDueDate_NewOperationCompleted
            End If
            Me.InvokeAsync("GetMultiDueDate_New", New Object() {customer_no, shipto_no, sales_org, distr_chan, division, strXML, strResult, strRemark}, Me.GetMultiDueDate_NewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiDueDate_NewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiDueDate_NewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiDueDate_NewCompleted(Me, New GetMultiDueDate_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMultiDueDate", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiDueDate(ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal distr_chan As String, ByVal division As String, ByVal strXML As String, ByRef strResult As String, ByRef strRemark As String) As Integer
            Dim results() As Object = Me.Invoke("GetMultiDueDate", New Object() {customer_no, shipto_no, sales_org, distr_chan, division, strXML, strResult, strRemark})
            strResult = CType(results(1),String)
            strRemark = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiDueDateAsync(ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal distr_chan As String, ByVal division As String, ByVal strXML As String, ByVal strResult As String, ByVal strRemark As String)
            Me.GetMultiDueDateAsync(customer_no, shipto_no, sales_org, distr_chan, division, strXML, strResult, strRemark, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiDueDateAsync(ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal distr_chan As String, ByVal division As String, ByVal strXML As String, ByVal strResult As String, ByVal strRemark As String, ByVal userState As Object)
            If (Me.GetMultiDueDateOperationCompleted Is Nothing) Then
                Me.GetMultiDueDateOperationCompleted = AddressOf Me.OnGetMultiDueDateOperationCompleted
            End If
            Me.InvokeAsync("GetMultiDueDate", New Object() {customer_no, shipto_no, sales_org, distr_chan, division, strXML, strResult, strRemark}, Me.GetMultiDueDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiDueDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiDueDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiDueDateCompleted(Me, New GetMultiDueDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMultiDueDate_SpecialATP", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiDueDate_SpecialATP(ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal distr_chan As String, ByVal division As String, ByVal strXML As String, ByRef strResult As String, ByRef strRemark As String) As Integer
            Dim results() As Object = Me.Invoke("GetMultiDueDate_SpecialATP", New Object() {customer_no, shipto_no, sales_org, distr_chan, division, strXML, strResult, strRemark})
            strResult = CType(results(1),String)
            strRemark = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiDueDate_SpecialATPAsync(ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal distr_chan As String, ByVal division As String, ByVal strXML As String, ByVal strResult As String, ByVal strRemark As String)
            Me.GetMultiDueDate_SpecialATPAsync(customer_no, shipto_no, sales_org, distr_chan, division, strXML, strResult, strRemark, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiDueDate_SpecialATPAsync(ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal distr_chan As String, ByVal division As String, ByVal strXML As String, ByVal strResult As String, ByVal strRemark As String, ByVal userState As Object)
            If (Me.GetMultiDueDate_SpecialATPOperationCompleted Is Nothing) Then
                Me.GetMultiDueDate_SpecialATPOperationCompleted = AddressOf Me.OnGetMultiDueDate_SpecialATPOperationCompleted
            End If
            Me.InvokeAsync("GetMultiDueDate_SpecialATP", New Object() {customer_no, shipto_no, sales_org, distr_chan, division, strXML, strResult, strRemark}, Me.GetMultiDueDate_SpecialATPOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiDueDate_SpecialATPOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiDueDate_SpecialATPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiDueDate_SpecialATPCompleted(Me, New GetMultiDueDate_SpecialATPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMultiDueDate_RDQ_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiDueDate_RDQ_old(ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal distr_chan As String, ByVal division As String, ByVal strXML As String, ByRef strResult As String, ByRef strRemark As String) As Integer
            Dim results() As Object = Me.Invoke("GetMultiDueDate_RDQ_old", New Object() {customer_no, shipto_no, sales_org, distr_chan, division, strXML, strResult, strRemark})
            strResult = CType(results(1),String)
            strRemark = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiDueDate_RDQ_oldAsync(ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal distr_chan As String, ByVal division As String, ByVal strXML As String, ByVal strResult As String, ByVal strRemark As String)
            Me.GetMultiDueDate_RDQ_oldAsync(customer_no, shipto_no, sales_org, distr_chan, division, strXML, strResult, strRemark, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiDueDate_RDQ_oldAsync(ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal distr_chan As String, ByVal division As String, ByVal strXML As String, ByVal strResult As String, ByVal strRemark As String, ByVal userState As Object)
            If (Me.GetMultiDueDate_RDQ_oldOperationCompleted Is Nothing) Then
                Me.GetMultiDueDate_RDQ_oldOperationCompleted = AddressOf Me.OnGetMultiDueDate_RDQ_oldOperationCompleted
            End If
            Me.InvokeAsync("GetMultiDueDate_RDQ_old", New Object() {customer_no, shipto_no, sales_org, distr_chan, division, strXML, strResult, strRemark}, Me.GetMultiDueDate_RDQ_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiDueDate_RDQ_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiDueDate_RDQ_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiDueDate_RDQ_oldCompleted(Me, New GetMultiDueDate_RDQ_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GET_CUSTOMER_COUNTRYPOSTAL_CODE_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GET_CUSTOMER_COUNTRYPOSTAL_CODE_old(ByVal customer_id As String, ByRef country_code As String, ByRef postal_code As String) As Integer
            Dim results() As Object = Me.Invoke("GET_CUSTOMER_COUNTRYPOSTAL_CODE_old", New Object() {customer_id, country_code, postal_code})
            country_code = CType(results(1),String)
            postal_code = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GET_CUSTOMER_COUNTRYPOSTAL_CODE_oldAsync(ByVal customer_id As String, ByVal country_code As String, ByVal postal_code As String)
            Me.GET_CUSTOMER_COUNTRYPOSTAL_CODE_oldAsync(customer_id, country_code, postal_code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GET_CUSTOMER_COUNTRYPOSTAL_CODE_oldAsync(ByVal customer_id As String, ByVal country_code As String, ByVal postal_code As String, ByVal userState As Object)
            If (Me.GET_CUSTOMER_COUNTRYPOSTAL_CODE_oldOperationCompleted Is Nothing) Then
                Me.GET_CUSTOMER_COUNTRYPOSTAL_CODE_oldOperationCompleted = AddressOf Me.OnGET_CUSTOMER_COUNTRYPOSTAL_CODE_oldOperationCompleted
            End If
            Me.InvokeAsync("GET_CUSTOMER_COUNTRYPOSTAL_CODE_old", New Object() {customer_id, country_code, postal_code}, Me.GET_CUSTOMER_COUNTRYPOSTAL_CODE_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGET_CUSTOMER_COUNTRYPOSTAL_CODE_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GET_CUSTOMER_COUNTRYPOSTAL_CODE_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GET_CUSTOMER_COUNTRYPOSTAL_CODE_oldCompleted(Me, New GET_CUSTOMER_COUNTRYPOSTAL_CODE_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMaterialSingle", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMaterialSingle(ByVal PartNo As String, ByVal Org As String, ByVal Plant As String, ByRef Err_Log As String, ByRef ProductTb As String) As Integer
            Dim results() As Object = Me.Invoke("GetMaterialSingle", New Object() {PartNo, Org, Plant, Err_Log, ProductTb})
            Err_Log = CType(results(1),String)
            ProductTb = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMaterialSingleAsync(ByVal PartNo As String, ByVal Org As String, ByVal Plant As String, ByVal Err_Log As String, ByVal ProductTb As String)
            Me.GetMaterialSingleAsync(PartNo, Org, Plant, Err_Log, ProductTb, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMaterialSingleAsync(ByVal PartNo As String, ByVal Org As String, ByVal Plant As String, ByVal Err_Log As String, ByVal ProductTb As String, ByVal userState As Object)
            If (Me.GetMaterialSingleOperationCompleted Is Nothing) Then
                Me.GetMaterialSingleOperationCompleted = AddressOf Me.OnGetMaterialSingleOperationCompleted
            End If
            Me.InvokeAsync("GetMaterialSingle", New Object() {PartNo, Org, Plant, Err_Log, ProductTb}, Me.GetMaterialSingleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMaterialSingleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMaterialSingleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMaterialSingleCompleted(Me, New GetMaterialSingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/Get_Material_Detail_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_Material_Detail_old(ByVal part_no As String, ByVal sales_org As String, ByVal plant As String, ByRef p_desc As String, ByRef p_status As String, ByRef p_model_no As String, ByRef p_productline As String, ByRef p_productgroup As String, ByRef p_shipweight As Double, ByRef p_netweight As Double, ByRef p_cost As Double, ByRef ErrorMsg As String) As Integer
            Dim results() As Object = Me.Invoke("Get_Material_Detail_old", New Object() {part_no, sales_org, plant, p_desc, p_status, p_model_no, p_productline, p_productgroup, p_shipweight, p_netweight, p_cost, ErrorMsg})
            p_desc = CType(results(1),String)
            p_status = CType(results(2),String)
            p_model_no = CType(results(3),String)
            p_productline = CType(results(4),String)
            p_productgroup = CType(results(5),String)
            p_shipweight = CType(results(6),Double)
            p_netweight = CType(results(7),Double)
            p_cost = CType(results(8),Double)
            ErrorMsg = CType(results(9),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_Material_Detail_oldAsync(ByVal part_no As String, ByVal sales_org As String, ByVal plant As String, ByVal p_desc As String, ByVal p_status As String, ByVal p_model_no As String, ByVal p_productline As String, ByVal p_productgroup As String, ByVal p_shipweight As Double, ByVal p_netweight As Double, ByVal p_cost As Double, ByVal ErrorMsg As String)
            Me.Get_Material_Detail_oldAsync(part_no, sales_org, plant, p_desc, p_status, p_model_no, p_productline, p_productgroup, p_shipweight, p_netweight, p_cost, ErrorMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_Material_Detail_oldAsync(ByVal part_no As String, ByVal sales_org As String, ByVal plant As String, ByVal p_desc As String, ByVal p_status As String, ByVal p_model_no As String, ByVal p_productline As String, ByVal p_productgroup As String, ByVal p_shipweight As Double, ByVal p_netweight As Double, ByVal p_cost As Double, ByVal ErrorMsg As String, ByVal userState As Object)
            If (Me.Get_Material_Detail_oldOperationCompleted Is Nothing) Then
                Me.Get_Material_Detail_oldOperationCompleted = AddressOf Me.OnGet_Material_Detail_oldOperationCompleted
            End If
            Me.InvokeAsync("Get_Material_Detail_old", New Object() {part_no, sales_org, plant, p_desc, p_status, p_model_no, p_productline, p_productgroup, p_shipweight, p_netweight, p_cost, ErrorMsg}, Me.Get_Material_Detail_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_Material_Detail_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_Material_Detail_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_Material_Detail_oldCompleted(Me, New Get_Material_Detail_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GET_MATERIAL_WEIGHT_VOLUME_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GET_MATERIAL_WEIGHT_VOLUME_old(ByVal part_no As String, ByRef GrossWeight As Double, ByRef NetWeight As Double, ByRef Volume As Double, ByRef ErrorMsg As String) As Integer
            Dim results() As Object = Me.Invoke("GET_MATERIAL_WEIGHT_VOLUME_old", New Object() {part_no, GrossWeight, NetWeight, Volume, ErrorMsg})
            GrossWeight = CType(results(1),Double)
            NetWeight = CType(results(2),Double)
            Volume = CType(results(3),Double)
            ErrorMsg = CType(results(4),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GET_MATERIAL_WEIGHT_VOLUME_oldAsync(ByVal part_no As String, ByVal GrossWeight As Double, ByVal NetWeight As Double, ByVal Volume As Double, ByVal ErrorMsg As String)
            Me.GET_MATERIAL_WEIGHT_VOLUME_oldAsync(part_no, GrossWeight, NetWeight, Volume, ErrorMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GET_MATERIAL_WEIGHT_VOLUME_oldAsync(ByVal part_no As String, ByVal GrossWeight As Double, ByVal NetWeight As Double, ByVal Volume As Double, ByVal ErrorMsg As String, ByVal userState As Object)
            If (Me.GET_MATERIAL_WEIGHT_VOLUME_oldOperationCompleted Is Nothing) Then
                Me.GET_MATERIAL_WEIGHT_VOLUME_oldOperationCompleted = AddressOf Me.OnGET_MATERIAL_WEIGHT_VOLUME_oldOperationCompleted
            End If
            Me.InvokeAsync("GET_MATERIAL_WEIGHT_VOLUME_old", New Object() {part_no, GrossWeight, NetWeight, Volume, ErrorMsg}, Me.GET_MATERIAL_WEIGHT_VOLUME_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGET_MATERIAL_WEIGHT_VOLUME_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GET_MATERIAL_WEIGHT_VOLUME_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GET_MATERIAL_WEIGHT_VOLUME_oldCompleted(Me, New GET_MATERIAL_WEIGHT_VOLUME_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GET_CTOS_DOCUMENTINFO_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GET_CTOS_DOCUMENTINFO_old(ByVal Company_Id As String, ByRef DocLink As String, ByRef DocLocation As String, ByRef DocType As String, ByRef DocXml As String) As Integer
            Dim results() As Object = Me.Invoke("GET_CTOS_DOCUMENTINFO_old", New Object() {Company_Id, DocLink, DocLocation, DocType, DocXml})
            DocLink = CType(results(1),String)
            DocLocation = CType(results(2),String)
            DocType = CType(results(3),String)
            DocXml = CType(results(4),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GET_CTOS_DOCUMENTINFO_oldAsync(ByVal Company_Id As String, ByVal DocLink As String, ByVal DocLocation As String, ByVal DocType As String, ByVal DocXml As String)
            Me.GET_CTOS_DOCUMENTINFO_oldAsync(Company_Id, DocLink, DocLocation, DocType, DocXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GET_CTOS_DOCUMENTINFO_oldAsync(ByVal Company_Id As String, ByVal DocLink As String, ByVal DocLocation As String, ByVal DocType As String, ByVal DocXml As String, ByVal userState As Object)
            If (Me.GET_CTOS_DOCUMENTINFO_oldOperationCompleted Is Nothing) Then
                Me.GET_CTOS_DOCUMENTINFO_oldOperationCompleted = AddressOf Me.OnGET_CTOS_DOCUMENTINFO_oldOperationCompleted
            End If
            Me.InvokeAsync("GET_CTOS_DOCUMENTINFO_old", New Object() {Company_Id, DocLink, DocLocation, DocType, DocXml}, Me.GET_CTOS_DOCUMENTINFO_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGET_CTOS_DOCUMENTINFO_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GET_CTOS_DOCUMENTINFO_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GET_CTOS_DOCUMENTINFO_oldCompleted(Me, New GET_CTOS_DOCUMENTINFO_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GET_EXCHANGE_RATE", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GET_EXCHANGE_RATE(ByVal FromCurrency As String, ByVal ToCurrency As String, ByRef ExpMsg As String, ByRef exRate As Decimal) As Decimal
            Dim results() As Object = Me.Invoke("GET_EXCHANGE_RATE", New Object() {FromCurrency, ToCurrency, ExpMsg})
            ExpMsg = CType(results(1),String)
            exRate = CType(results(2),Decimal)
            Return CType(results(0),Decimal)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GET_EXCHANGE_RATEAsync(ByVal FromCurrency As String, ByVal ToCurrency As String, ByVal ExpMsg As String)
            Me.GET_EXCHANGE_RATEAsync(FromCurrency, ToCurrency, ExpMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GET_EXCHANGE_RATEAsync(ByVal FromCurrency As String, ByVal ToCurrency As String, ByVal ExpMsg As String, ByVal userState As Object)
            If (Me.GET_EXCHANGE_RATEOperationCompleted Is Nothing) Then
                Me.GET_EXCHANGE_RATEOperationCompleted = AddressOf Me.OnGET_EXCHANGE_RATEOperationCompleted
            End If
            Me.InvokeAsync("GET_EXCHANGE_RATE", New Object() {FromCurrency, ToCurrency, ExpMsg}, Me.GET_EXCHANGE_RATEOperationCompleted, userState)
        End Sub
        
        Private Sub OnGET_EXCHANGE_RATEOperationCompleted(ByVal arg As Object)
            If (Not (Me.GET_EXCHANGE_RATECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GET_EXCHANGE_RATECompleted(Me, New GET_EXCHANGE_RATECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GET_CREDITLIMIT_USED_PERCENTAGE", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GET_CREDITLIMIT_USED_PERCENTAGE(ByVal sales_org As String, ByVal company_id As String, ByRef percentage As String) As Integer
            Dim results() As Object = Me.Invoke("GET_CREDITLIMIT_USED_PERCENTAGE", New Object() {sales_org, company_id, percentage})
            percentage = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GET_CREDITLIMIT_USED_PERCENTAGEAsync(ByVal sales_org As String, ByVal company_id As String, ByVal percentage As String)
            Me.GET_CREDITLIMIT_USED_PERCENTAGEAsync(sales_org, company_id, percentage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GET_CREDITLIMIT_USED_PERCENTAGEAsync(ByVal sales_org As String, ByVal company_id As String, ByVal percentage As String, ByVal userState As Object)
            If (Me.GET_CREDITLIMIT_USED_PERCENTAGEOperationCompleted Is Nothing) Then
                Me.GET_CREDITLIMIT_USED_PERCENTAGEOperationCompleted = AddressOf Me.OnGET_CREDITLIMIT_USED_PERCENTAGEOperationCompleted
            End If
            Me.InvokeAsync("GET_CREDITLIMIT_USED_PERCENTAGE", New Object() {sales_org, company_id, percentage}, Me.GET_CREDITLIMIT_USED_PERCENTAGEOperationCompleted, userState)
        End Sub
        
        Private Sub OnGET_CREDITLIMIT_USED_PERCENTAGEOperationCompleted(ByVal arg As Object)
            If (Not (Me.GET_CREDITLIMIT_USED_PERCENTAGECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GET_CREDITLIMIT_USED_PERCENTAGECompleted(Me, New GET_CREDITLIMIT_USED_PERCENTAGECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GET_ORDER_SCHEDULE_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GET_ORDER_SCHEDULE_old(ByVal Order_No As String, ByRef scheduleXml As String, ByRef itemXml As String) As Integer
            Dim results() As Object = Me.Invoke("GET_ORDER_SCHEDULE_old", New Object() {Order_No, scheduleXml, itemXml})
            scheduleXml = CType(results(1),String)
            itemXml = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GET_ORDER_SCHEDULE_oldAsync(ByVal Order_No As String, ByVal scheduleXml As String, ByVal itemXml As String)
            Me.GET_ORDER_SCHEDULE_oldAsync(Order_No, scheduleXml, itemXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GET_ORDER_SCHEDULE_oldAsync(ByVal Order_No As String, ByVal scheduleXml As String, ByVal itemXml As String, ByVal userState As Object)
            If (Me.GET_ORDER_SCHEDULE_oldOperationCompleted Is Nothing) Then
                Me.GET_ORDER_SCHEDULE_oldOperationCompleted = AddressOf Me.OnGET_ORDER_SCHEDULE_oldOperationCompleted
            End If
            Me.InvokeAsync("GET_ORDER_SCHEDULE_old", New Object() {Order_No, scheduleXml, itemXml}, Me.GET_ORDER_SCHEDULE_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGET_ORDER_SCHEDULE_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GET_ORDER_SCHEDULE_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GET_ORDER_SCHEDULE_oldCompleted(Me, New GET_ORDER_SCHEDULE_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SALESORDER_GETSTATUS_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SALESORDER_GETSTATUS_old(ByVal Order_No As String, ByRef Order_Status_XML As String) As Integer
            Dim results() As Object = Me.Invoke("SALESORDER_GETSTATUS_old", New Object() {Order_No})
            Order_Status_XML = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SALESORDER_GETSTATUS_oldAsync(ByVal Order_No As String)
            Me.SALESORDER_GETSTATUS_oldAsync(Order_No, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SALESORDER_GETSTATUS_oldAsync(ByVal Order_No As String, ByVal userState As Object)
            If (Me.SALESORDER_GETSTATUS_oldOperationCompleted Is Nothing) Then
                Me.SALESORDER_GETSTATUS_oldOperationCompleted = AddressOf Me.OnSALESORDER_GETSTATUS_oldOperationCompleted
            End If
            Me.InvokeAsync("SALESORDER_GETSTATUS_old", New Object() {Order_No}, Me.SALESORDER_GETSTATUS_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnSALESORDER_GETSTATUS_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.SALESORDER_GETSTATUS_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SALESORDER_GETSTATUS_oldCompleted(Me, New SALESORDER_GETSTATUS_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SALESORDER_GETSTATUS_Test_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SALESORDER_GETSTATUS_Test_old(ByVal Order_No As String, ByRef Order_Status_XML As String) As Integer
            Dim results() As Object = Me.Invoke("SALESORDER_GETSTATUS_Test_old", New Object() {Order_No})
            Order_Status_XML = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SALESORDER_GETSTATUS_Test_oldAsync(ByVal Order_No As String)
            Me.SALESORDER_GETSTATUS_Test_oldAsync(Order_No, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SALESORDER_GETSTATUS_Test_oldAsync(ByVal Order_No As String, ByVal userState As Object)
            If (Me.SALESORDER_GETSTATUS_Test_oldOperationCompleted Is Nothing) Then
                Me.SALESORDER_GETSTATUS_Test_oldOperationCompleted = AddressOf Me.OnSALESORDER_GETSTATUS_Test_oldOperationCompleted
            End If
            Me.InvokeAsync("SALESORDER_GETSTATUS_Test_old", New Object() {Order_No}, Me.SALESORDER_GETSTATUS_Test_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnSALESORDER_GETSTATUS_Test_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.SALESORDER_GETSTATUS_Test_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SALESORDER_GETSTATUS_Test_oldCompleted(Me, New SALESORDER_GETSTATUS_Test_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMultiATP", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiATP(ByVal strXML As String, ByRef strResult As String, ByRef strRemark As String) As Integer
            Dim results() As Object = Me.Invoke("GetMultiATP", New Object() {strXML})
            strResult = CType(results(1),String)
            strRemark = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiATPAsync(ByVal strXML As String)
            Me.GetMultiATPAsync(strXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiATPAsync(ByVal strXML As String, ByVal userState As Object)
            If (Me.GetMultiATPOperationCompleted Is Nothing) Then
                Me.GetMultiATPOperationCompleted = AddressOf Me.OnGetMultiATPOperationCompleted
            End If
            Me.InvokeAsync("GetMultiATP", New Object() {strXML}, Me.GetMultiATPOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiATPOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiATPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiATPCompleted(Me, New GetMultiATPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMutiPrice_EQuote", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMutiPrice_EQuote(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal xml As String, ByRef strResult As String) As Integer
            Dim results() As Object = Me.Invoke("GetMutiPrice_EQuote", New Object() {Mandt, Vkorg, Kunnr, xml, strResult})
            strResult = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMutiPrice_EQuoteAsync(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal xml As String, ByVal strResult As String)
            Me.GetMutiPrice_EQuoteAsync(Mandt, Vkorg, Kunnr, xml, strResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMutiPrice_EQuoteAsync(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal xml As String, ByVal strResult As String, ByVal userState As Object)
            If (Me.GetMutiPrice_EQuoteOperationCompleted Is Nothing) Then
                Me.GetMutiPrice_EQuoteOperationCompleted = AddressOf Me.OnGetMutiPrice_EQuoteOperationCompleted
            End If
            Me.InvokeAsync("GetMutiPrice_EQuote", New Object() {Mandt, Vkorg, Kunnr, xml, strResult}, Me.GetMutiPrice_EQuoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMutiPrice_EQuoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMutiPrice_EQuoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMutiPrice_EQuoteCompleted(Me, New GetMutiPrice_EQuoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMultiPrice", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiPrice(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal xml As String, ByRef strResult As String) As Integer
            Dim results() As Object = Me.Invoke("GetMultiPrice", New Object() {Mandt, Vkorg, Kunnr, xml, strResult})
            strResult = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiPriceAsync(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal xml As String, ByVal strResult As String)
            Me.GetMultiPriceAsync(Mandt, Vkorg, Kunnr, xml, strResult, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiPriceAsync(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal xml As String, ByVal strResult As String, ByVal userState As Object)
            If (Me.GetMultiPriceOperationCompleted Is Nothing) Then
                Me.GetMultiPriceOperationCompleted = AddressOf Me.OnGetMultiPriceOperationCompleted
            End If
            Me.InvokeAsync("GetMultiPrice", New Object() {Mandt, Vkorg, Kunnr, xml, strResult}, Me.GetMultiPriceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiPriceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiPriceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiPriceCompleted(Me, New GetMultiPriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMultiPriceByTable", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiPriceByTable(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal DS As System.Data.DataSet, ByRef DSret As System.Data.DataSet) As Integer
            Dim results() As Object = Me.Invoke("GetMultiPriceByTable", New Object() {Mandt, Vkorg, Kunnr, DS, DSret})
            DSret = CType(results(1),System.Data.DataSet)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiPriceByTableAsync(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal DS As System.Data.DataSet, ByVal DSret As System.Data.DataSet)
            Me.GetMultiPriceByTableAsync(Mandt, Vkorg, Kunnr, DS, DSret, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiPriceByTableAsync(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal DS As System.Data.DataSet, ByVal DSret As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetMultiPriceByTableOperationCompleted Is Nothing) Then
                Me.GetMultiPriceByTableOperationCompleted = AddressOf Me.OnGetMultiPriceByTableOperationCompleted
            End If
            Me.InvokeAsync("GetMultiPriceByTable", New Object() {Mandt, Vkorg, Kunnr, DS, DSret}, Me.GetMultiPriceByTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiPriceByTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiPriceByTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiPriceByTableCompleted(Me, New GetMultiPriceByTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMPrice", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMPrice(ByVal Vkorg As String, ByVal Kunnr As String, ByVal xml As String, ByRef strResult As String) As Integer
            Dim results() As Object = Me.Invoke("GetMPrice", New Object() {Vkorg, Kunnr, xml})
            strResult = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMPriceAsync(ByVal Vkorg As String, ByVal Kunnr As String, ByVal xml As String)
            Me.GetMPriceAsync(Vkorg, Kunnr, xml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMPriceAsync(ByVal Vkorg As String, ByVal Kunnr As String, ByVal xml As String, ByVal userState As Object)
            If (Me.GetMPriceOperationCompleted Is Nothing) Then
                Me.GetMPriceOperationCompleted = AddressOf Me.OnGetMPriceOperationCompleted
            End If
            Me.InvokeAsync("GetMPrice", New Object() {Vkorg, Kunnr, xml}, Me.GetMPriceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMPriceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMPriceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMPriceCompleted(Me, New GetMPriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMultiPrice_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiPrice_old(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal xml As String, ByRef strResult As String) As Integer
            Dim results() As Object = Me.Invoke("GetMultiPrice_old", New Object() {Mandt, Vkorg, Kunnr, xml})
            strResult = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiPrice_oldAsync(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal xml As String)
            Me.GetMultiPrice_oldAsync(Mandt, Vkorg, Kunnr, xml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiPrice_oldAsync(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal xml As String, ByVal userState As Object)
            If (Me.GetMultiPrice_oldOperationCompleted Is Nothing) Then
                Me.GetMultiPrice_oldOperationCompleted = AddressOf Me.OnGetMultiPrice_oldOperationCompleted
            End If
            Me.InvokeAsync("GetMultiPrice_old", New Object() {Mandt, Vkorg, Kunnr, xml}, Me.GetMultiPrice_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiPrice_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiPrice_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiPrice_oldCompleted(Me, New GetMultiPrice_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetPriceRFC", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPriceRFC(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal Matnr As String, ByVal Mglme As Integer, ByRef p_fltList_Price As Decimal, ByRef p_fltUnit_Price As Decimal) As Integer
            Dim results() As Object = Me.Invoke("GetPriceRFC", New Object() {Mandt, Vkorg, Kunnr, Matnr, Mglme, p_fltList_Price, p_fltUnit_Price})
            p_fltList_Price = CType(results(1),Decimal)
            p_fltUnit_Price = CType(results(2),Decimal)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPriceRFCAsync(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal Matnr As String, ByVal Mglme As Integer, ByVal p_fltList_Price As Decimal, ByVal p_fltUnit_Price As Decimal)
            Me.GetPriceRFCAsync(Mandt, Vkorg, Kunnr, Matnr, Mglme, p_fltList_Price, p_fltUnit_Price, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPriceRFCAsync(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal Matnr As String, ByVal Mglme As Integer, ByVal p_fltList_Price As Decimal, ByVal p_fltUnit_Price As Decimal, ByVal userState As Object)
            If (Me.GetPriceRFCOperationCompleted Is Nothing) Then
                Me.GetPriceRFCOperationCompleted = AddressOf Me.OnGetPriceRFCOperationCompleted
            End If
            Me.InvokeAsync("GetPriceRFC", New Object() {Mandt, Vkorg, Kunnr, Matnr, Mglme, p_fltList_Price, p_fltUnit_Price}, Me.GetPriceRFCOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPriceRFCOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPriceRFCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPriceRFCCompleted(Me, New GetPriceRFCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetPriceRFC_old", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPriceRFC_old(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal Matnr As String, ByVal Mglme As Integer, ByRef p_fltList_Price As Decimal, ByRef p_fltUnit_Price As Decimal) As Integer
            Dim results() As Object = Me.Invoke("GetPriceRFC_old", New Object() {Mandt, Vkorg, Kunnr, Matnr, Mglme})
            p_fltList_Price = CType(results(1),Decimal)
            p_fltUnit_Price = CType(results(2),Decimal)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPriceRFC_oldAsync(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal Matnr As String, ByVal Mglme As Integer)
            Me.GetPriceRFC_oldAsync(Mandt, Vkorg, Kunnr, Matnr, Mglme, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPriceRFC_oldAsync(ByVal Mandt As String, ByVal Vkorg As String, ByVal Kunnr As String, ByVal Matnr As String, ByVal Mglme As Integer, ByVal userState As Object)
            If (Me.GetPriceRFC_oldOperationCompleted Is Nothing) Then
                Me.GetPriceRFC_oldOperationCompleted = AddressOf Me.OnGetPriceRFC_oldOperationCompleted
            End If
            Me.InvokeAsync("GetPriceRFC_old", New Object() {Mandt, Vkorg, Kunnr, Matnr, Mglme}, Me.GetPriceRFC_oldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPriceRFC_oldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPriceRFC_oldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPriceRFC_oldCompleted(Me, New GetPriceRFC_oldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetVendorList", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVendorList(ByVal Sales_Org As String, ByRef VendorList As String) As Integer
            Dim results() As Object = Me.Invoke("GetVendorList", New Object() {Sales_Org, VendorList})
            VendorList = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVendorListAsync(ByVal Sales_Org As String, ByVal VendorList As String)
            Me.GetVendorListAsync(Sales_Org, VendorList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVendorListAsync(ByVal Sales_Org As String, ByVal VendorList As String, ByVal userState As Object)
            If (Me.GetVendorListOperationCompleted Is Nothing) Then
                Me.GetVendorListOperationCompleted = AddressOf Me.OnGetVendorListOperationCompleted
            End If
            Me.InvokeAsync("GetVendorList", New Object() {Sales_Org, VendorList}, Me.GetVendorListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVendorListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVendorListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVendorListCompleted(Me, New GetVendorListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetVendorDetail", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVendorDetail(ByVal Vendor_No As String, ByRef GeneralDetail As String, ByRef BankDetail As String) As Integer
            Dim results() As Object = Me.Invoke("GetVendorDetail", New Object() {Vendor_No, GeneralDetail, BankDetail})
            GeneralDetail = CType(results(1),String)
            BankDetail = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVendorDetailAsync(ByVal Vendor_No As String, ByVal GeneralDetail As String, ByVal BankDetail As String)
            Me.GetVendorDetailAsync(Vendor_No, GeneralDetail, BankDetail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVendorDetailAsync(ByVal Vendor_No As String, ByVal GeneralDetail As String, ByVal BankDetail As String, ByVal userState As Object)
            If (Me.GetVendorDetailOperationCompleted Is Nothing) Then
                Me.GetVendorDetailOperationCompleted = AddressOf Me.OnGetVendorDetailOperationCompleted
            End If
            Me.InvokeAsync("GetVendorDetail", New Object() {Vendor_No, GeneralDetail, BankDetail}, Me.GetVendorDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVendorDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVendorDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVendorDetailCompleted(Me, New GetVendorDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SO_Delete", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SO_Delete(ByVal order_no As String, ByRef message As String) As Integer
            Dim results() As Object = Me.Invoke("SO_Delete", New Object() {order_no, message})
            message = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SO_DeleteAsync(ByVal order_no As String, ByVal message As String)
            Me.SO_DeleteAsync(order_no, message, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SO_DeleteAsync(ByVal order_no As String, ByVal message As String, ByVal userState As Object)
            If (Me.SO_DeleteOperationCompleted Is Nothing) Then
                Me.SO_DeleteOperationCompleted = AddressOf Me.OnSO_DeleteOperationCompleted
            End If
            Me.InvokeAsync("SO_Delete", New Object() {order_no, message}, Me.SO_DeleteOperationCompleted, userState)
        End Sub
        
        Private Sub OnSO_DeleteOperationCompleted(ByVal arg As Object)
            If (Not (Me.SO_DeleteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SO_DeleteCompleted(Me, New SO_DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SO_Change", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SO_Change(ByVal Order_DataXml As String, ByRef Order_Status_Xml As String, ByRef errMsg As String) As Integer
            Dim results() As Object = Me.Invoke("SO_Change", New Object() {Order_DataXml, Order_Status_Xml, errMsg})
            Order_Status_Xml = CType(results(1),String)
            errMsg = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SO_ChangeAsync(ByVal Order_DataXml As String, ByVal Order_Status_Xml As String, ByVal errMsg As String)
            Me.SO_ChangeAsync(Order_DataXml, Order_Status_Xml, errMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SO_ChangeAsync(ByVal Order_DataXml As String, ByVal Order_Status_Xml As String, ByVal errMsg As String, ByVal userState As Object)
            If (Me.SO_ChangeOperationCompleted Is Nothing) Then
                Me.SO_ChangeOperationCompleted = AddressOf Me.OnSO_ChangeOperationCompleted
            End If
            Me.InvokeAsync("SO_Change", New Object() {Order_DataXml, Order_Status_Xml, errMsg}, Me.SO_ChangeOperationCompleted, userState)
        End Sub
        
        Private Sub OnSO_ChangeOperationCompleted(ByVal arg As Object)
            If (Not (Me.SO_ChangeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SO_ChangeCompleted(Me, New SO_ChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SO_GetNumber", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SO_GetNumber(ByVal preFix As String) As String
            Dim results() As Object = Me.Invoke("SO_GetNumber", New Object() {preFix})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SO_GetNumberAsync(ByVal preFix As String)
            Me.SO_GetNumberAsync(preFix, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SO_GetNumberAsync(ByVal preFix As String, ByVal userState As Object)
            If (Me.SO_GetNumberOperationCompleted Is Nothing) Then
                Me.SO_GetNumberOperationCompleted = AddressOf Me.OnSO_GetNumberOperationCompleted
            End If
            Me.InvokeAsync("SO_GetNumber", New Object() {preFix}, Me.SO_GetNumberOperationCompleted, userState)
        End Sub
        
        Private Sub OnSO_GetNumberOperationCompleted(ByVal arg As Object)
            If (Not (Me.SO_GetNumberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SO_GetNumberCompleted(Me, New SO_GetNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SO_CREATE", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SO_CREATE(ByVal Order_DataXML As String, ByRef Order_Status_XML As String) As Integer
            Dim results() As Object = Me.Invoke("SO_CREATE", New Object() {Order_DataXML})
            Order_Status_XML = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SO_CREATEAsync(ByVal Order_DataXML As String)
            Me.SO_CREATEAsync(Order_DataXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SO_CREATEAsync(ByVal Order_DataXML As String, ByVal userState As Object)
            If (Me.SO_CREATEOperationCompleted Is Nothing) Then
                Me.SO_CREATEOperationCompleted = AddressOf Me.OnSO_CREATEOperationCompleted
            End If
            Me.InvokeAsync("SO_CREATE", New Object() {Order_DataXML}, Me.SO_CREATEOperationCompleted, userState)
        End Sub
        
        Private Sub OnSO_CREATEOperationCompleted(ByVal arg As Object)
            If (Not (Me.SO_CREATECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SO_CREATECompleted(Me, New SO_CREATECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/UpdateSOWarrantyFlag_TEST", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateSOWarrantyFlag_TEST(ByVal inxml As String, ByRef status As String, ByRef retCode As Boolean)
            Dim results() As Object = Me.Invoke("UpdateSOWarrantyFlag_TEST", New Object() {inxml, status, retCode})
            status = CType(results(0),String)
            retCode = CType(results(1),Boolean)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSOWarrantyFlag_TESTAsync(ByVal inxml As String, ByVal status As String, ByVal retCode As Boolean)
            Me.UpdateSOWarrantyFlag_TESTAsync(inxml, status, retCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSOWarrantyFlag_TESTAsync(ByVal inxml As String, ByVal status As String, ByVal retCode As Boolean, ByVal userState As Object)
            If (Me.UpdateSOWarrantyFlag_TESTOperationCompleted Is Nothing) Then
                Me.UpdateSOWarrantyFlag_TESTOperationCompleted = AddressOf Me.OnUpdateSOWarrantyFlag_TESTOperationCompleted
            End If
            Me.InvokeAsync("UpdateSOWarrantyFlag_TEST", New Object() {inxml, status, retCode}, Me.UpdateSOWarrantyFlag_TESTOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSOWarrantyFlag_TESTOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSOWarrantyFlag_TESTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSOWarrantyFlag_TESTCompleted(Me, New UpdateSOWarrantyFlag_TESTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetMultiDueDate_RDQ", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiDueDate_RDQ(ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal distr_chan As String, ByVal division As String, ByVal strXML As String, ByRef strResult As String, ByRef strRemark As String) As Integer
            Dim results() As Object = Me.Invoke("GetMultiDueDate_RDQ", New Object() {customer_no, shipto_no, sales_org, distr_chan, division, strXML, strResult, strRemark})
            strResult = CType(results(1),String)
            strRemark = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiDueDate_RDQAsync(ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal distr_chan As String, ByVal division As String, ByVal strXML As String, ByVal strResult As String, ByVal strRemark As String)
            Me.GetMultiDueDate_RDQAsync(customer_no, shipto_no, sales_org, distr_chan, division, strXML, strResult, strRemark, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiDueDate_RDQAsync(ByVal customer_no As String, ByVal shipto_no As String, ByVal sales_org As String, ByVal distr_chan As String, ByVal division As String, ByVal strXML As String, ByVal strResult As String, ByVal strRemark As String, ByVal userState As Object)
            If (Me.GetMultiDueDate_RDQOperationCompleted Is Nothing) Then
                Me.GetMultiDueDate_RDQOperationCompleted = AddressOf Me.OnGetMultiDueDate_RDQOperationCompleted
            End If
            Me.InvokeAsync("GetMultiDueDate_RDQ", New Object() {customer_no, shipto_no, sales_org, distr_chan, division, strXML, strResult, strRemark}, Me.GetMultiDueDate_RDQOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiDueDate_RDQOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiDueDate_RDQCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiDueDate_RDQCompleted(Me, New GetMultiDueDate_RDQCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SO_CREATE_Nada", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SO_CREATE_Nada(ByVal Order_DataXML As String, ByRef Order_Status_XML As String) As Integer
            Dim results() As Object = Me.Invoke("SO_CREATE_Nada", New Object() {Order_DataXML})
            Order_Status_XML = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SO_CREATE_NadaAsync(ByVal Order_DataXML As String)
            Me.SO_CREATE_NadaAsync(Order_DataXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SO_CREATE_NadaAsync(ByVal Order_DataXML As String, ByVal userState As Object)
            If (Me.SO_CREATE_NadaOperationCompleted Is Nothing) Then
                Me.SO_CREATE_NadaOperationCompleted = AddressOf Me.OnSO_CREATE_NadaOperationCompleted
            End If
            Me.InvokeAsync("SO_CREATE_Nada", New Object() {Order_DataXML}, Me.SO_CREATE_NadaOperationCompleted, userState)
        End Sub
        
        Private Sub OnSO_CREATE_NadaOperationCompleted(ByVal arg As Object)
            If (Not (Me.SO_CREATE_NadaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SO_CREATE_NadaCompleted(Me, New SO_CREATE_NadaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SO_CREATE_NEW", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SO_CREATE_NEW(ByVal Order_DataXML As String, ByRef Order_Status_XML As String, ByRef SalesOrderStatus_XML As String) As Integer
            Dim results() As Object = Me.Invoke("SO_CREATE_NEW", New Object() {Order_DataXML})
            Order_Status_XML = CType(results(1),String)
            SalesOrderStatus_XML = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SO_CREATE_NEWAsync(ByVal Order_DataXML As String)
            Me.SO_CREATE_NEWAsync(Order_DataXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SO_CREATE_NEWAsync(ByVal Order_DataXML As String, ByVal userState As Object)
            If (Me.SO_CREATE_NEWOperationCompleted Is Nothing) Then
                Me.SO_CREATE_NEWOperationCompleted = AddressOf Me.OnSO_CREATE_NEWOperationCompleted
            End If
            Me.InvokeAsync("SO_CREATE_NEW", New Object() {Order_DataXML}, Me.SO_CREATE_NEWOperationCompleted, userState)
        End Sub
        
        Private Sub OnSO_CREATE_NEWOperationCompleted(ByVal arg As Object)
            If (Not (Me.SO_CREATE_NEWCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SO_CREATE_NEWCompleted(Me, New SO_CREATE_NEWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SO_CREATE2", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SO_CREATE2(ByVal SAPIP As String, ByVal SAPClient As String, ByVal SysNum As String, ByVal Order_DataXML As String, ByRef Order_Status_XML As String) As Integer
            Dim results() As Object = Me.Invoke("SO_CREATE2", New Object() {SAPIP, SAPClient, SysNum, Order_DataXML, Order_Status_XML})
            Order_Status_XML = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SO_CREATE2Async(ByVal SAPIP As String, ByVal SAPClient As String, ByVal SysNum As String, ByVal Order_DataXML As String, ByVal Order_Status_XML As String)
            Me.SO_CREATE2Async(SAPIP, SAPClient, SysNum, Order_DataXML, Order_Status_XML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SO_CREATE2Async(ByVal SAPIP As String, ByVal SAPClient As String, ByVal SysNum As String, ByVal Order_DataXML As String, ByVal Order_Status_XML As String, ByVal userState As Object)
            If (Me.SO_CREATE2OperationCompleted Is Nothing) Then
                Me.SO_CREATE2OperationCompleted = AddressOf Me.OnSO_CREATE2OperationCompleted
            End If
            Me.InvokeAsync("SO_CREATE2", New Object() {SAPIP, SAPClient, SysNum, Order_DataXML, Order_Status_XML}, Me.SO_CREATE2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSO_CREATE2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SO_CREATE2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SO_CREATE2Completed(Me, New SO_CREATE2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SO_CREATE_TEST", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SO_CREATE_TEST(ByVal Order_DataXML As String, ByRef Order_Status_XML As String) As Integer
            Dim results() As Object = Me.Invoke("SO_CREATE_TEST", New Object() {Order_DataXML})
            Order_Status_XML = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SO_CREATE_TESTAsync(ByVal Order_DataXML As String)
            Me.SO_CREATE_TESTAsync(Order_DataXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SO_CREATE_TESTAsync(ByVal Order_DataXML As String, ByVal userState As Object)
            If (Me.SO_CREATE_TESTOperationCompleted Is Nothing) Then
                Me.SO_CREATE_TESTOperationCompleted = AddressOf Me.OnSO_CREATE_TESTOperationCompleted
            End If
            Me.InvokeAsync("SO_CREATE_TEST", New Object() {Order_DataXML}, Me.SO_CREATE_TESTOperationCompleted, userState)
        End Sub
        
        Private Sub OnSO_CREATE_TESTOperationCompleted(ByVal arg As Object)
            If (Not (Me.SO_CREATE_TESTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SO_CREATE_TESTCompleted(Me, New SO_CREATE_TESTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/GetInvoice", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInvoice(ByVal strSoldTo As String, ByVal strSO_NO As String, ByVal strSalesOrg As String, ByVal strDisChannel As String, ByVal strDivision As String, ByVal DateFrom As String, ByVal DateTo As String, ByRef Invoice_Master_XML As String, ByRef Invoice_Detail_XML As String, ByRef strException As String) As Integer
            Dim results() As Object = Me.Invoke("GetInvoice", New Object() {strSoldTo, strSO_NO, strSalesOrg, strDisChannel, strDivision, DateFrom, DateTo, Invoice_Master_XML, Invoice_Detail_XML, strException})
            Invoice_Master_XML = CType(results(1),String)
            Invoice_Detail_XML = CType(results(2),String)
            strException = CType(results(3),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInvoiceAsync(ByVal strSoldTo As String, ByVal strSO_NO As String, ByVal strSalesOrg As String, ByVal strDisChannel As String, ByVal strDivision As String, ByVal DateFrom As String, ByVal DateTo As String, ByVal Invoice_Master_XML As String, ByVal Invoice_Detail_XML As String, ByVal strException As String)
            Me.GetInvoiceAsync(strSoldTo, strSO_NO, strSalesOrg, strDisChannel, strDivision, DateFrom, DateTo, Invoice_Master_XML, Invoice_Detail_XML, strException, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInvoiceAsync(ByVal strSoldTo As String, ByVal strSO_NO As String, ByVal strSalesOrg As String, ByVal strDisChannel As String, ByVal strDivision As String, ByVal DateFrom As String, ByVal DateTo As String, ByVal Invoice_Master_XML As String, ByVal Invoice_Detail_XML As String, ByVal strException As String, ByVal userState As Object)
            If (Me.GetInvoiceOperationCompleted Is Nothing) Then
                Me.GetInvoiceOperationCompleted = AddressOf Me.OnGetInvoiceOperationCompleted
            End If
            Me.InvokeAsync("GetInvoice", New Object() {strSoldTo, strSO_NO, strSalesOrg, strDisChannel, strDivision, DateFrom, DateTo, Invoice_Master_XML, Invoice_Detail_XML, strException}, Me.GetInvoiceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInvoiceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInvoiceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInvoiceCompleted(Me, New GetInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/HelloKitty", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub HelloKitty(ByRef yourname As String, ByRef greetWord As String)
            Dim results() As Object = Me.Invoke("HelloKitty", New Object() {yourname, greetWord})
            yourname = CType(results(0),String)
            greetWord = CType(results(1),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloKittyAsync(ByVal yourname As String, ByVal greetWord As String)
            Me.HelloKittyAsync(yourname, greetWord, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloKittyAsync(ByVal yourname As String, ByVal greetWord As String, ByVal userState As Object)
            If (Me.HelloKittyOperationCompleted Is Nothing) Then
                Me.HelloKittyOperationCompleted = AddressOf Me.OnHelloKittyOperationCompleted
            End If
            Me.InvokeAsync("HelloKitty", New Object() {yourname, greetWord}, Me.HelloKittyOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloKittyOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloKittyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloKittyCompleted(Me, New HelloKittyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SapXmlAbapDynSql", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SapXmlAbapDynSql(ByVal SapConnectionString As String, ByVal abapXml As String, ByRef xmlResult As String, ByRef errMsg As String)
            Dim results() As Object = Me.Invoke("SapXmlAbapDynSql", New Object() {SapConnectionString, abapXml, xmlResult, errMsg})
            xmlResult = CType(results(0),String)
            errMsg = CType(results(1),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SapXmlAbapDynSqlAsync(ByVal SapConnectionString As String, ByVal abapXml As String, ByVal xmlResult As String, ByVal errMsg As String)
            Me.SapXmlAbapDynSqlAsync(SapConnectionString, abapXml, xmlResult, errMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SapXmlAbapDynSqlAsync(ByVal SapConnectionString As String, ByVal abapXml As String, ByVal xmlResult As String, ByVal errMsg As String, ByVal userState As Object)
            If (Me.SapXmlAbapDynSqlOperationCompleted Is Nothing) Then
                Me.SapXmlAbapDynSqlOperationCompleted = AddressOf Me.OnSapXmlAbapDynSqlOperationCompleted
            End If
            Me.InvokeAsync("SapXmlAbapDynSql", New Object() {SapConnectionString, abapXml, xmlResult, errMsg}, Me.SapXmlAbapDynSqlOperationCompleted, userState)
        End Sub
        
        Private Sub OnSapXmlAbapDynSqlOperationCompleted(ByVal arg As Object)
            If (Not (Me.SapXmlAbapDynSqlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SapXmlAbapDynSqlCompleted(Me, New SapXmlAbapDynSqlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/b2baeu_SAP_WS/Service1/SapAbapDynSql", RequestNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", ResponseNamespace:="http://tempuri.org/b2baeu_SAP_WS/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SapAbapDynSql(ByVal SapConnectionString As String, ByVal abaArray() As String, ByRef xmlResult As String, ByRef errMsg As String)
            Dim results() As Object = Me.Invoke("SapAbapDynSql", New Object() {SapConnectionString, abaArray, xmlResult, errMsg})
            xmlResult = CType(results(0),String)
            errMsg = CType(results(1),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SapAbapDynSqlAsync(ByVal SapConnectionString As String, ByVal abaArray() As String, ByVal xmlResult As String, ByVal errMsg As String)
            Me.SapAbapDynSqlAsync(SapConnectionString, abaArray, xmlResult, errMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SapAbapDynSqlAsync(ByVal SapConnectionString As String, ByVal abaArray() As String, ByVal xmlResult As String, ByVal errMsg As String, ByVal userState As Object)
            If (Me.SapAbapDynSqlOperationCompleted Is Nothing) Then
                Me.SapAbapDynSqlOperationCompleted = AddressOf Me.OnSapAbapDynSqlOperationCompleted
            End If
            Me.InvokeAsync("SapAbapDynSql", New Object() {SapConnectionString, abaArray, xmlResult, errMsg}, Me.SapAbapDynSqlOperationCompleted, userState)
        End Sub
        
        Private Sub OnSapAbapDynSqlOperationCompleted(ByVal arg As Object)
            If (Not (Me.SapAbapDynSqlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SapAbapDynSqlCompleted(Me, New SapAbapDynSqlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_Billing_Detail_AEUCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Billing_Detail_AEUCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Billing_Detail_AEUCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property BILLING() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_Component_ComsumeCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Component_ComsumeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Component_ComsumeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property comp() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cons() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_Material_HistoryCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Material_HistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Material_HistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property returnMessge() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Decimal)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_Serial_NoCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Serial_NoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Serial_NoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ItemList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_Serial_No_By_PoCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Serial_No_By_PoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Serial_No_By_PoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ItemList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_Serial_No_By_DNCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Serial_No_By_DNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Serial_No_By_DNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ItemList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_Serial_No_By_GUICompletedEventHandler(ByVal sender As Object, ByVal e As Get_Serial_No_By_GUICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Serial_No_By_GUICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ItemList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_Billing_From_SOCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Billing_From_SOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Billing_From_SOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ReturnBilling() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_So_From_Billing_NoCompletedEventHandler(ByVal sender As Object, ByVal e As Get_So_From_Billing_NoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_So_From_Billing_NoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ReturnBilling() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_ExchangeRateCompletedEventHandler(ByVal sender As Object, ByVal e As Get_ExchangeRateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_ExchangeRateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ReturnList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_Standard_Cost_4_DigitCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Standard_Cost_4_DigitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Standard_Cost_4_DigitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property stand_cost() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Group_cost() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Decimal)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Quotation_CREATECompletedEventHandler(ByVal sender As Object, ByVal e As Quotation_CREATECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Quotation_CREATECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Order_Status_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ZGET_WHERE_UESD_BOM_RFCCompletedEventHandler(ByVal sender As Object, ByVal e As ZGET_WHERE_UESD_BOM_RFCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ZGET_WHERE_UESD_BOM_RFCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ZSD_SPA_INSERTCompletedEventHandler(ByVal sender As Object, ByVal e As ZSD_SPA_INSERTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ZSD_SPA_INSERTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SOC_CreateCompletedEventHandler(ByVal sender As Object, ByVal e As SOC_CreateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SOC_CreateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property log_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub eBizAEU_GetMultiPriceCompletedEventHandler(ByVal sender As Object, ByVal e As eBizAEU_GetMultiPriceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class eBizAEU_GetMultiPriceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strADONETXMLOut() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetBackOrderCompletedEventHandler(ByVal sender As Object, ByVal e As GetBackOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBackOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateNewCust3CompletedEventHandler(ByVal sender As Object, ByVal e As CreateNewCust3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateNewCust3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property retResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ConvertToExCurrencyValueCompletedEventHandler(ByVal sender As Object, ByVal e As ConvertToExCurrencyValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConvertToExCurrencyValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Decimal)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SALESORDER_GETSTATUSCompletedEventHandler(ByVal sender As Object, ByVal e As SALESORDER_GETSTATUSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SALESORDER_GETSTATUSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Order_Status_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAdvantechStockPrice_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetAdvantechStockPrice_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAdvantechStockPrice_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAdvantechStockPriceInt_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetAdvantechStockPriceInt_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAdvantechStockPriceInt_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateSOWarrantyFlagCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSOWarrantyFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSOWarrantyFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property status() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property retCode() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateSOWarrantyFlagByTableCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSOWarrantyFlagByTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSOWarrantyFlagByTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property status() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property retCode() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateSOWarrantyFlag_TEST_oldCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSOWarrantyFlag_TEST_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSOWarrantyFlag_TEST_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property status() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property retCode() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetRMAStatus_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetRMAStatus_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRMAStatus_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property customer() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rma_no() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property part_no() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property order_from() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Xmlresult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property retCode() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCreditBalance_NewCompletedEventHandler(ByVal sender As Object, ByVal e As GetCreditBalance_NewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCreditBalance_NewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property company_code() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property customer() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property keyDate() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CreditBalance() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCreditBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As GetCreditBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCreditBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub eBizAEU_SAPDYNSQL_oldCompletedEventHandler(ByVal sender As Object, ByVal e As eBizAEU_SAPDYNSQL_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class eBizAEU_SAPDYNSQL_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SAP_DynSql_oldCompletedEventHandler(ByVal sender As Object, ByVal e As SAP_DynSql_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SAP_DynSql_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property SapError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property runtimeError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property xmlResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ReadSAPTableCompletedEventHandler(ByVal sender As Object, ByVal e As ReadSAPTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadSAPTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strXml() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ReadSAPTable2CompletedEventHandler(ByVal sender As Object, ByVal e As ReadSAPTable2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadSAPTable2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strXml() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ReadSAPTable3_oldCompletedEventHandler(ByVal sender As Object, ByVal e As ReadSAPTable3_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadSAPTable3_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CustomerInquiry_oldCompletedEventHandler(ByVal sender As Object, ByVal e As CustomerInquiry_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CustomerInquiry_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub B2BValidation_oldCompletedEventHandler(ByVal sender As Object, ByVal e As B2BValidation_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class B2BValidation_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SerialNumberInquiryCompletedEventHandler(ByVal sender As Object, ByVal e As SerialNumberInquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SerialNumberInquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property SNXml() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub TrackingInfoInquiryCompletedEventHandler(ByVal sender As Object, ByVal e As TrackingInfoInquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TrackingInfoInquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TrackInfoXml() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Salesorder_Getlist_oldCompletedEventHandler(ByVal sender As Object, ByVal e As Salesorder_Getlist_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Salesorder_Getlist_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property strXml() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property retCode() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Bapi_Salesorder_Getlist_oldCompletedEventHandler(ByVal sender As Object, ByVal e As Bapi_Salesorder_Getlist_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Bapi_Salesorder_Getlist_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strXml() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetOrderHistory_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderHistory_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderHistory_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strXml() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetBackOrder_Track_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetBackOrder_Track_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBackOrder_Track_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property BackOrder_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetBackOrderList_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetBackOrderList_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBackOrderList_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property BackOrder_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetBackOrderItem_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetBackOrderItem_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBackOrderItem_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property BackOrderItem_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg1() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_Customer_AEU_oldCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Customer_AEU_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Customer_AEU_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Cus_Add() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Cus_Gen() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property cur() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property credit_term() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ship_via() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property company_price_type() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ship_condition() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property parent_company_id() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(8),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property add2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(9),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property attention() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(10),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property fax_no() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(11),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_Next_WrokingDateCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Next_WrokingDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Next_WrokingDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iATPDate() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_Next_WorkingDate_ByCodeCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Next_WorkingDate_ByCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Next_WorkingDate_ByCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iATPDate() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAR_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetAR_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAR_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property customer_id() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ArResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property retCode() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAR_Detail_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetAR_Detail_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAR_Detail_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ArResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAR_Detail_New_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetAR_Detail_New_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAR_Detail_New_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ArResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAR_SO_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetAR_SO_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAR_SO_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMaterialStatusCost_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaterialStatusCost_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaterialStatusCost_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property MPlant() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property MCurrency() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property MCost() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property MStatus() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AR_DueDate_Inquiry_oldCompletedEventHandler(ByVal sender As Object, ByVal e As AR_DueDate_Inquiry_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AR_DueDate_Inquiry_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ARDueResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCustAP_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustAP_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustAP_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property customer_id() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property APResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property retCode() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCustomerAP_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerAP_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerAP_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property APResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiATP_NewCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiATP_NewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiATP_NewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRemark() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiATP_ACNCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiATP_ACNCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiATP_ACNCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRemark() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiATP_New_USCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiATP_New_USCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiATP_New_USCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRemark() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiATP_New2CompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiATP_New2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiATP_New2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRemark() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetSingleATPCompletedEventHandler(ByVal sender As Object, ByVal e As GetSingleATPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSingleATPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRemark() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetSingleATP_NewCompletedEventHandler(ByVal sender As Object, ByVal e As GetSingleATP_NewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSingleATP_NewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRemark() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiDueDate_NewCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiDueDate_NewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiDueDate_NewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRemark() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiDueDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiDueDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiDueDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRemark() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiDueDate_SpecialATPCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiDueDate_SpecialATPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiDueDate_SpecialATPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRemark() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiDueDate_RDQ_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiDueDate_RDQ_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiDueDate_RDQ_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRemark() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GET_CUSTOMER_COUNTRYPOSTAL_CODE_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GET_CUSTOMER_COUNTRYPOSTAL_CODE_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GET_CUSTOMER_COUNTRYPOSTAL_CODE_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property country_code() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property postal_code() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMaterialSingleCompletedEventHandler(ByVal sender As Object, ByVal e As GetMaterialSingleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMaterialSingleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Err_Log() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ProductTb() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Get_Material_Detail_oldCompletedEventHandler(ByVal sender As Object, ByVal e As Get_Material_Detail_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_Material_Detail_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_desc() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_status() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_model_no() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_productline() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_productgroup() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_shipweight() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_netweight() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_cost() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(8),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrorMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(9),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GET_MATERIAL_WEIGHT_VOLUME_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GET_MATERIAL_WEIGHT_VOLUME_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GET_MATERIAL_WEIGHT_VOLUME_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property GrossWeight() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property NetWeight() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Volume() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrorMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GET_CTOS_DOCUMENTINFO_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GET_CTOS_DOCUMENTINFO_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GET_CTOS_DOCUMENTINFO_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DocLink() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DocLocation() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DocType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DocXml() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GET_EXCHANGE_RATECompletedEventHandler(ByVal sender As Object, ByVal e As GET_EXCHANGE_RATECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GET_EXCHANGE_RATECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ExpMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property exRate() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Decimal)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GET_CREDITLIMIT_USED_PERCENTAGECompletedEventHandler(ByVal sender As Object, ByVal e As GET_CREDITLIMIT_USED_PERCENTAGECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GET_CREDITLIMIT_USED_PERCENTAGECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property percentage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GET_ORDER_SCHEDULE_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GET_ORDER_SCHEDULE_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GET_ORDER_SCHEDULE_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property scheduleXml() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property itemXml() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SALESORDER_GETSTATUS_oldCompletedEventHandler(ByVal sender As Object, ByVal e As SALESORDER_GETSTATUS_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SALESORDER_GETSTATUS_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Order_Status_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SALESORDER_GETSTATUS_Test_oldCompletedEventHandler(ByVal sender As Object, ByVal e As SALESORDER_GETSTATUS_Test_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SALESORDER_GETSTATUS_Test_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Order_Status_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiATPCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiATPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiATPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRemark() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMutiPrice_EQuoteCompletedEventHandler(ByVal sender As Object, ByVal e As GetMutiPrice_EQuoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMutiPrice_EQuoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiPriceCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiPriceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiPriceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiPriceByTableCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiPriceByTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiPriceByTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DSret() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMPriceCompletedEventHandler(ByVal sender As Object, ByVal e As GetMPriceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMPriceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiPrice_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiPrice_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiPrice_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetPriceRFCCompletedEventHandler(ByVal sender As Object, ByVal e As GetPriceRFCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPriceRFCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_fltList_Price() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_fltUnit_Price() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Decimal)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetPriceRFC_oldCompletedEventHandler(ByVal sender As Object, ByVal e As GetPriceRFC_oldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPriceRFC_oldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_fltList_Price() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property p_fltUnit_Price() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Decimal)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetVendorListCompletedEventHandler(ByVal sender As Object, ByVal e As GetVendorListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVendorListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property VendorList() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetVendorDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetVendorDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVendorDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property GeneralDetail() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property BankDetail() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SO_DeleteCompletedEventHandler(ByVal sender As Object, ByVal e As SO_DeleteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SO_DeleteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property message() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SO_ChangeCompletedEventHandler(ByVal sender As Object, ByVal e As SO_ChangeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SO_ChangeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Order_Status_Xml() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SO_GetNumberCompletedEventHandler(ByVal sender As Object, ByVal e As SO_GetNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SO_GetNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SO_CREATECompletedEventHandler(ByVal sender As Object, ByVal e As SO_CREATECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SO_CREATECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Order_Status_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateSOWarrantyFlag_TESTCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSOWarrantyFlag_TESTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSOWarrantyFlag_TESTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property status() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property retCode() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiDueDate_RDQCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiDueDate_RDQCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiDueDate_RDQCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRemark() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SO_CREATE_NadaCompletedEventHandler(ByVal sender As Object, ByVal e As SO_CREATE_NadaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SO_CREATE_NadaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Order_Status_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SO_CREATE_NEWCompletedEventHandler(ByVal sender As Object, ByVal e As SO_CREATE_NEWCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SO_CREATE_NEWCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Order_Status_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property SalesOrderStatus_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SO_CREATE2CompletedEventHandler(ByVal sender As Object, ByVal e As SO_CREATE2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SO_CREATE2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Order_Status_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SO_CREATE_TESTCompletedEventHandler(ByVal sender As Object, ByVal e As SO_CREATE_TESTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SO_CREATE_TESTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Order_Status_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetInvoiceCompletedEventHandler(ByVal sender As Object, ByVal e As GetInvoiceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInvoiceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Invoice_Master_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Invoice_Detail_XML() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strException() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub HelloKittyCompletedEventHandler(ByVal sender As Object, ByVal e As HelloKittyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloKittyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property yourname() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property greetWord() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SapXmlAbapDynSqlCompletedEventHandler(ByVal sender As Object, ByVal e As SapXmlAbapDynSqlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SapXmlAbapDynSqlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property xmlResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SapAbapDynSqlCompletedEventHandler(ByVal sender As Object, ByVal e As SapAbapDynSqlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SapAbapDynSqlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property xmlResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
End Namespace
