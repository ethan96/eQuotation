'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
'
Namespace SiebelWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Siebel_WSSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Siebel_WS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private CreateNewContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateMyAdvantechProfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateNewContact_NewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateSiebelActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateSiebelActivityWithOptyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateActivityWithOwnerAccountContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSiebelActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOpportunityPartnerContact2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSourceNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOptyDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteOptyForecastOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportOptyForecastOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Import_OpportunityNewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOpportunityStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOpportunityStageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOpportunityStage_ProjOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOpportunityStatus2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOpportunityPartnerContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOpportunityPartnerContactIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOpportunityStatusAmtCloseDateProbOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateOpportunityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateSiebelOpportunityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateNewOpportunityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateNewOpportunity4QuoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Import_OpportunityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOpportunityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOpportunityStatusOldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOpportunityStatusRevenueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSiebelOpportunityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOpportunityOrgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportOpportunityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportOpportunityV2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubscribeENews2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactNeverEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssociateContactToAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactDisableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubscribeProductOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactInfoByMyAdvantechProfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactInfoByMyAdvantechProfile_NewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactProfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubscribeBAAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAccountInfoByMyAdvantechProfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateNewAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAccountV2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAccountBusinessGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateSiebelSROperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateSiebelQuotationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateSiebelQuotationWithOpportunityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateSiebelQuotationWithOpportunity2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateSiebelQuotationWithOpportunity3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateQuoteOwnerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.EDOC.My.MySettings.Default.EDOC_SiebelWS_Siebel_WS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CreateNewContactCompleted As CreateNewContactCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateMyAdvantechProfileCompleted As CreateMyAdvantechProfileCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateNewContact_NewCompleted As CreateNewContact_NewCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateSiebelActivityCompleted As CreateSiebelActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateSiebelActivityWithOptyCompleted As CreateSiebelActivityWithOptyCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateActivityWithOwnerAccountContactCompleted As CreateActivityWithOwnerAccountContactCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSiebelActivityCompleted As UpdateSiebelActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOpportunityPartnerContact2Completed As UpdateOpportunityPartnerContact2CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSourceNameCompleted As UpdateSourceNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOptyDetailCompleted As GetOptyDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteOptyForecastCompleted As DeleteOptyForecastCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportOptyForecastCompleted As ImportOptyForecastCompletedEventHandler
        
        '''<remarks/>
        Public Event Import_OpportunityNewCompleted As Import_OpportunityNewCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOpportunityStatusCompleted As UpdateOpportunityStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOpportunityStageCompleted As UpdateOpportunityStageCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOpportunityStage_ProjCompleted As UpdateOpportunityStage_ProjCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOpportunityStatus2Completed As UpdateOpportunityStatus2CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOpportunityPartnerContactCompleted As UpdateOpportunityPartnerContactCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOpportunityPartnerContactIdCompleted As UpdateOpportunityPartnerContactIdCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOpportunityStatusAmtCloseDateProbCompleted As UpdateOpportunityStatusAmtCloseDateProbCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateOpportunityCompleted As CreateOpportunityCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateSiebelOpportunityCompleted As CreateSiebelOpportunityCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateNewOpportunityCompleted As CreateNewOpportunityCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateNewOpportunity4QuoteCompleted As CreateNewOpportunity4QuoteCompletedEventHandler
        
        '''<remarks/>
        Public Event Import_OpportunityCompleted As Import_OpportunityCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOpportunityCompleted As UpdateOpportunityCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOpportunityStatusOldCompleted As UpdateOpportunityStatusOldCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOpportunityStatusRevenueCompleted As UpdateOpportunityStatusRevenueCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSiebelOpportunityCompleted As UpdateSiebelOpportunityCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOpportunityOrgCompleted As UpdateOpportunityOrgCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportOpportunityCompleted As ImportOpportunityCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportOpportunityV2Completed As ImportOpportunityV2CompletedEventHandler
        
        '''<remarks/>
        Public Event SubscribeENews2Completed As SubscribeENews2CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactNeverEmailCompleted As UpdateContactNeverEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event AssociateContactToAccountCompleted As AssociateContactToAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactDisableCompleted As UpdateContactDisableCompletedEventHandler
        
        '''<remarks/>
        Public Event SubscribeProductCompleted As SubscribeProductCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactInfoByMyAdvantechProfileCompleted As UpdateContactInfoByMyAdvantechProfileCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactInfoByMyAdvantechProfile_NewCompleted As UpdateContactInfoByMyAdvantechProfile_NewCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactProfileCompleted As UpdateContactProfileCompletedEventHandler
        
        '''<remarks/>
        Public Event SubscribeBAACompleted As SubscribeBAACompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAccountInfoByMyAdvantechProfileCompleted As UpdateAccountInfoByMyAdvantechProfileCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateAccountCompleted As CreateAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateNewAccountCompleted As CreateNewAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAccountCompleted As UpdateAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAccountV2Completed As UpdateAccountV2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountInfoCompleted As GetAccountInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAccountBusinessGroupCompleted As UpdateAccountBusinessGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateSiebelSRCompleted As CreateSiebelSRCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateSiebelQuotationCompleted As CreateSiebelQuotationCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateSiebelQuotationWithOpportunityCompleted As CreateSiebelQuotationWithOpportunityCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateSiebelQuotationWithOpportunity2Completed As CreateSiebelQuotationWithOpportunity2CompletedEventHandler
        
        '''<remarks/>
        Public Event CreateSiebelQuotationWithOpportunity3Completed As CreateSiebelQuotationWithOpportunity3CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateQuoteOwnerCompleted As UpdateQuoteOwnerCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateNewContact", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateNewContact(ByVal contact_email As String, ByVal account_row_id As String, ByVal FirstName As String, ByVal LastName As String, ByVal CanSeeOrder As Boolean, ByVal CanPlaceOrder As Boolean, ByVal JobTitle As String, ByVal WorkPhone As String) As String
            Dim results() As Object = Me.Invoke("CreateNewContact", New Object() {contact_email, account_row_id, FirstName, LastName, CanSeeOrder, CanPlaceOrder, JobTitle, WorkPhone})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateNewContactAsync(ByVal contact_email As String, ByVal account_row_id As String, ByVal FirstName As String, ByVal LastName As String, ByVal CanSeeOrder As Boolean, ByVal CanPlaceOrder As Boolean, ByVal JobTitle As String, ByVal WorkPhone As String)
            Me.CreateNewContactAsync(contact_email, account_row_id, FirstName, LastName, CanSeeOrder, CanPlaceOrder, JobTitle, WorkPhone, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateNewContactAsync(ByVal contact_email As String, ByVal account_row_id As String, ByVal FirstName As String, ByVal LastName As String, ByVal CanSeeOrder As Boolean, ByVal CanPlaceOrder As Boolean, ByVal JobTitle As String, ByVal WorkPhone As String, ByVal userState As Object)
            If (Me.CreateNewContactOperationCompleted Is Nothing) Then
                Me.CreateNewContactOperationCompleted = AddressOf Me.OnCreateNewContactOperationCompleted
            End If
            Me.InvokeAsync("CreateNewContact", New Object() {contact_email, account_row_id, FirstName, LastName, CanSeeOrder, CanPlaceOrder, JobTitle, WorkPhone}, Me.CreateNewContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateNewContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateNewContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateNewContactCompleted(Me, New CreateNewContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateMyAdvantechProfile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateMyAdvantechProfile(ByVal contact_email As String, ByVal account_row_id As String, ByVal FirstName As String, ByVal LastName As String, ByVal CanSeeOrder As Boolean, ByVal CanPlaceOrder As Boolean, ByVal JobTitle As String, ByVal WorkPhone As String, ByVal IsAccountAdmin As Boolean, ByVal CanSeeCost As Boolean, ByVal InterestedProduct As String, ByVal BAA As String) As String
            Dim results() As Object = Me.Invoke("CreateMyAdvantechProfile", New Object() {contact_email, account_row_id, FirstName, LastName, CanSeeOrder, CanPlaceOrder, JobTitle, WorkPhone, IsAccountAdmin, CanSeeCost, InterestedProduct, BAA})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateMyAdvantechProfileAsync(ByVal contact_email As String, ByVal account_row_id As String, ByVal FirstName As String, ByVal LastName As String, ByVal CanSeeOrder As Boolean, ByVal CanPlaceOrder As Boolean, ByVal JobTitle As String, ByVal WorkPhone As String, ByVal IsAccountAdmin As Boolean, ByVal CanSeeCost As Boolean, ByVal InterestedProduct As String, ByVal BAA As String)
            Me.CreateMyAdvantechProfileAsync(contact_email, account_row_id, FirstName, LastName, CanSeeOrder, CanPlaceOrder, JobTitle, WorkPhone, IsAccountAdmin, CanSeeCost, InterestedProduct, BAA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateMyAdvantechProfileAsync(ByVal contact_email As String, ByVal account_row_id As String, ByVal FirstName As String, ByVal LastName As String, ByVal CanSeeOrder As Boolean, ByVal CanPlaceOrder As Boolean, ByVal JobTitle As String, ByVal WorkPhone As String, ByVal IsAccountAdmin As Boolean, ByVal CanSeeCost As Boolean, ByVal InterestedProduct As String, ByVal BAA As String, ByVal userState As Object)
            If (Me.CreateMyAdvantechProfileOperationCompleted Is Nothing) Then
                Me.CreateMyAdvantechProfileOperationCompleted = AddressOf Me.OnCreateMyAdvantechProfileOperationCompleted
            End If
            Me.InvokeAsync("CreateMyAdvantechProfile", New Object() {contact_email, account_row_id, FirstName, LastName, CanSeeOrder, CanPlaceOrder, JobTitle, WorkPhone, IsAccountAdmin, CanSeeCost, InterestedProduct, BAA}, Me.CreateMyAdvantechProfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateMyAdvantechProfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateMyAdvantechProfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateMyAdvantechProfileCompleted(Me, New CreateMyAdvantechProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateNewContact_New", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateNewContact_New(ByVal contact_email As String, ByVal account_row_id As String, ByVal FirstName As String, ByVal LastName As String, ByVal CanSeeOrder As Boolean, ByVal CanPlaceOrder As Boolean, ByVal JobTitle As String, ByVal WorkPhone As String, ByVal IsAccountAdmin As Boolean, ByVal CanSeeCost As Boolean) As String
            Dim results() As Object = Me.Invoke("CreateNewContact_New", New Object() {contact_email, account_row_id, FirstName, LastName, CanSeeOrder, CanPlaceOrder, JobTitle, WorkPhone, IsAccountAdmin, CanSeeCost})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateNewContact_NewAsync(ByVal contact_email As String, ByVal account_row_id As String, ByVal FirstName As String, ByVal LastName As String, ByVal CanSeeOrder As Boolean, ByVal CanPlaceOrder As Boolean, ByVal JobTitle As String, ByVal WorkPhone As String, ByVal IsAccountAdmin As Boolean, ByVal CanSeeCost As Boolean)
            Me.CreateNewContact_NewAsync(contact_email, account_row_id, FirstName, LastName, CanSeeOrder, CanPlaceOrder, JobTitle, WorkPhone, IsAccountAdmin, CanSeeCost, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateNewContact_NewAsync(ByVal contact_email As String, ByVal account_row_id As String, ByVal FirstName As String, ByVal LastName As String, ByVal CanSeeOrder As Boolean, ByVal CanPlaceOrder As Boolean, ByVal JobTitle As String, ByVal WorkPhone As String, ByVal IsAccountAdmin As Boolean, ByVal CanSeeCost As Boolean, ByVal userState As Object)
            If (Me.CreateNewContact_NewOperationCompleted Is Nothing) Then
                Me.CreateNewContact_NewOperationCompleted = AddressOf Me.OnCreateNewContact_NewOperationCompleted
            End If
            Me.InvokeAsync("CreateNewContact_New", New Object() {contact_email, account_row_id, FirstName, LastName, CanSeeOrder, CanPlaceOrder, JobTitle, WorkPhone, IsAccountAdmin, CanSeeCost}, Me.CreateNewContact_NewOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateNewContact_NewOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateNewContact_NewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateNewContact_NewCompleted(Me, New CreateNewContact_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateSiebelActivity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateSiebelActivity(ByVal Type As String, ByVal Status As String, ByVal Display As String, ByVal Description As String, ByVal Comments As String, ByVal AccountRowID As String, ByVal ContactRowID As String, ByVal Source As String, ByVal Org As String, ByVal OwnerEmail As String) As String
            Dim results() As Object = Me.Invoke("CreateSiebelActivity", New Object() {Type, Status, Display, Description, Comments, AccountRowID, ContactRowID, Source, Org, OwnerEmail})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelActivityAsync(ByVal Type As String, ByVal Status As String, ByVal Display As String, ByVal Description As String, ByVal Comments As String, ByVal AccountRowID As String, ByVal ContactRowID As String, ByVal Source As String, ByVal Org As String, ByVal OwnerEmail As String)
            Me.CreateSiebelActivityAsync(Type, Status, Display, Description, Comments, AccountRowID, ContactRowID, Source, Org, OwnerEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelActivityAsync(ByVal Type As String, ByVal Status As String, ByVal Display As String, ByVal Description As String, ByVal Comments As String, ByVal AccountRowID As String, ByVal ContactRowID As String, ByVal Source As String, ByVal Org As String, ByVal OwnerEmail As String, ByVal userState As Object)
            If (Me.CreateSiebelActivityOperationCompleted Is Nothing) Then
                Me.CreateSiebelActivityOperationCompleted = AddressOf Me.OnCreateSiebelActivityOperationCompleted
            End If
            Me.InvokeAsync("CreateSiebelActivity", New Object() {Type, Status, Display, Description, Comments, AccountRowID, ContactRowID, Source, Org, OwnerEmail}, Me.CreateSiebelActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateSiebelActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateSiebelActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateSiebelActivityCompleted(Me, New CreateSiebelActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateSiebelActivityWithOpty", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateSiebelActivityWithOpty(ByVal Type As String, ByVal Status As String, ByVal Display As String, ByVal Description As String, ByVal Comments As String, ByVal AccountRowID As String, ByVal ContactRowID As String, ByVal Source As String, ByVal Org As String, ByVal OwnerEmail As String, ByVal OptyId As String) As String
            Dim results() As Object = Me.Invoke("CreateSiebelActivityWithOpty", New Object() {Type, Status, Display, Description, Comments, AccountRowID, ContactRowID, Source, Org, OwnerEmail, OptyId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelActivityWithOptyAsync(ByVal Type As String, ByVal Status As String, ByVal Display As String, ByVal Description As String, ByVal Comments As String, ByVal AccountRowID As String, ByVal ContactRowID As String, ByVal Source As String, ByVal Org As String, ByVal OwnerEmail As String, ByVal OptyId As String)
            Me.CreateSiebelActivityWithOptyAsync(Type, Status, Display, Description, Comments, AccountRowID, ContactRowID, Source, Org, OwnerEmail, OptyId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelActivityWithOptyAsync(ByVal Type As String, ByVal Status As String, ByVal Display As String, ByVal Description As String, ByVal Comments As String, ByVal AccountRowID As String, ByVal ContactRowID As String, ByVal Source As String, ByVal Org As String, ByVal OwnerEmail As String, ByVal OptyId As String, ByVal userState As Object)
            If (Me.CreateSiebelActivityWithOptyOperationCompleted Is Nothing) Then
                Me.CreateSiebelActivityWithOptyOperationCompleted = AddressOf Me.OnCreateSiebelActivityWithOptyOperationCompleted
            End If
            Me.InvokeAsync("CreateSiebelActivityWithOpty", New Object() {Type, Status, Display, Description, Comments, AccountRowID, ContactRowID, Source, Org, OwnerEmail, OptyId}, Me.CreateSiebelActivityWithOptyOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateSiebelActivityWithOptyOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateSiebelActivityWithOptyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateSiebelActivityWithOptyCompleted(Me, New CreateSiebelActivityWithOptyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateActivityWithOwnerAccountContact", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateActivityWithOwnerAccountContact(ByVal ActType As String, ByVal ActStatus As String, ByVal ActName As String, ByVal ActDesc As String, ByVal StartDate As Date, ByVal Duration As Integer, ByVal ContactId As String, ByVal OptyID As String, ByVal OwnerEmail As String, ByVal AccountId As String, ByVal AssignTo As String) As String
            Dim results() As Object = Me.Invoke("CreateActivityWithOwnerAccountContact", New Object() {ActType, ActStatus, ActName, ActDesc, StartDate, Duration, ContactId, OptyID, OwnerEmail, AccountId, AssignTo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateActivityWithOwnerAccountContactAsync(ByVal ActType As String, ByVal ActStatus As String, ByVal ActName As String, ByVal ActDesc As String, ByVal StartDate As Date, ByVal Duration As Integer, ByVal ContactId As String, ByVal OptyID As String, ByVal OwnerEmail As String, ByVal AccountId As String, ByVal AssignTo As String)
            Me.CreateActivityWithOwnerAccountContactAsync(ActType, ActStatus, ActName, ActDesc, StartDate, Duration, ContactId, OptyID, OwnerEmail, AccountId, AssignTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateActivityWithOwnerAccountContactAsync(ByVal ActType As String, ByVal ActStatus As String, ByVal ActName As String, ByVal ActDesc As String, ByVal StartDate As Date, ByVal Duration As Integer, ByVal ContactId As String, ByVal OptyID As String, ByVal OwnerEmail As String, ByVal AccountId As String, ByVal AssignTo As String, ByVal userState As Object)
            If (Me.CreateActivityWithOwnerAccountContactOperationCompleted Is Nothing) Then
                Me.CreateActivityWithOwnerAccountContactOperationCompleted = AddressOf Me.OnCreateActivityWithOwnerAccountContactOperationCompleted
            End If
            Me.InvokeAsync("CreateActivityWithOwnerAccountContact", New Object() {ActType, ActStatus, ActName, ActDesc, StartDate, Duration, ContactId, OptyID, OwnerEmail, AccountId, AssignTo}, Me.CreateActivityWithOwnerAccountContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateActivityWithOwnerAccountContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateActivityWithOwnerAccountContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateActivityWithOwnerAccountContactCompleted(Me, New CreateActivityWithOwnerAccountContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSiebelActivity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSiebelActivity(ByVal ActRowId As String, ByVal Activity_Status As String, ByVal Activity_Display As String, ByVal strActivityDesc As String, ByVal strOwner As String, ByVal ConnectToACL As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("UpdateSiebelActivity", New Object() {ActRowId, Activity_Status, Activity_Display, strActivityDesc, strOwner, ConnectToACL})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSiebelActivityAsync(ByVal ActRowId As String, ByVal Activity_Status As String, ByVal Activity_Display As String, ByVal strActivityDesc As String, ByVal strOwner As String, ByVal ConnectToACL As Boolean)
            Me.UpdateSiebelActivityAsync(ActRowId, Activity_Status, Activity_Display, strActivityDesc, strOwner, ConnectToACL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSiebelActivityAsync(ByVal ActRowId As String, ByVal Activity_Status As String, ByVal Activity_Display As String, ByVal strActivityDesc As String, ByVal strOwner As String, ByVal ConnectToACL As Boolean, ByVal userState As Object)
            If (Me.UpdateSiebelActivityOperationCompleted Is Nothing) Then
                Me.UpdateSiebelActivityOperationCompleted = AddressOf Me.OnUpdateSiebelActivityOperationCompleted
            End If
            Me.InvokeAsync("UpdateSiebelActivity", New Object() {ActRowId, Activity_Status, Activity_Display, strActivityDesc, strOwner, ConnectToACL}, Me.UpdateSiebelActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSiebelActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSiebelActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSiebelActivityCompleted(Me, New UpdateSiebelActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOpportunityPartnerContact2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOpportunityPartnerContact2(ByVal OptyID As String, ByVal ContactEmail As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateOpportunityPartnerContact2", New Object() {OptyID, ContactEmail})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityPartnerContact2Async(ByVal OptyID As String, ByVal ContactEmail As String)
            Me.UpdateOpportunityPartnerContact2Async(OptyID, ContactEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityPartnerContact2Async(ByVal OptyID As String, ByVal ContactEmail As String, ByVal userState As Object)
            If (Me.UpdateOpportunityPartnerContact2OperationCompleted Is Nothing) Then
                Me.UpdateOpportunityPartnerContact2OperationCompleted = AddressOf Me.OnUpdateOpportunityPartnerContact2OperationCompleted
            End If
            Me.InvokeAsync("UpdateOpportunityPartnerContact2", New Object() {OptyID, ContactEmail}, Me.UpdateOpportunityPartnerContact2OperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOpportunityPartnerContact2OperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOpportunityPartnerContact2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOpportunityPartnerContact2Completed(Me, New UpdateOpportunityPartnerContact2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSourceName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSourceName(ByVal ActId As String, ByVal SourceName As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateSourceName", New Object() {ActId, SourceName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSourceNameAsync(ByVal ActId As String, ByVal SourceName As String)
            Me.UpdateSourceNameAsync(ActId, SourceName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSourceNameAsync(ByVal ActId As String, ByVal SourceName As String, ByVal userState As Object)
            If (Me.UpdateSourceNameOperationCompleted Is Nothing) Then
                Me.UpdateSourceNameOperationCompleted = AddressOf Me.OnUpdateSourceNameOperationCompleted
            End If
            Me.InvokeAsync("UpdateSourceName", New Object() {ActId, SourceName}, Me.UpdateSourceNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSourceNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSourceNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSourceNameCompleted(Me, New UpdateSourceNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOptyDetail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOptyDetail(ByVal rowid As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetOptyDetail", New Object() {rowid})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOptyDetailAsync(ByVal rowid As String)
            Me.GetOptyDetailAsync(rowid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOptyDetailAsync(ByVal rowid As String, ByVal userState As Object)
            If (Me.GetOptyDetailOperationCompleted Is Nothing) Then
                Me.GetOptyDetailOperationCompleted = AddressOf Me.OnGetOptyDetailOperationCompleted
            End If
            Me.InvokeAsync("GetOptyDetail", New Object() {rowid}, Me.GetOptyDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOptyDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOptyDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOptyDetailCompleted(Me, New GetOptyDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteOptyForecast", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteOptyForecast(ByVal OptRowId As String, ByVal ProdDt As System.Data.DataTable) As String
            Dim results() As Object = Me.Invoke("DeleteOptyForecast", New Object() {OptRowId, ProdDt})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteOptyForecastAsync(ByVal OptRowId As String, ByVal ProdDt As System.Data.DataTable)
            Me.DeleteOptyForecastAsync(OptRowId, ProdDt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteOptyForecastAsync(ByVal OptRowId As String, ByVal ProdDt As System.Data.DataTable, ByVal userState As Object)
            If (Me.DeleteOptyForecastOperationCompleted Is Nothing) Then
                Me.DeleteOptyForecastOperationCompleted = AddressOf Me.OnDeleteOptyForecastOperationCompleted
            End If
            Me.InvokeAsync("DeleteOptyForecast", New Object() {OptRowId, ProdDt}, Me.DeleteOptyForecastOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteOptyForecastOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteOptyForecastCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteOptyForecastCompleted(Me, New DeleteOptyForecastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportOptyForecast", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportOptyForecast(ByVal OptRowId As String, ByVal ProdDt As System.Data.DataTable) As Integer
            Dim results() As Object = Me.Invoke("ImportOptyForecast", New Object() {OptRowId, ProdDt})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportOptyForecastAsync(ByVal OptRowId As String, ByVal ProdDt As System.Data.DataTable)
            Me.ImportOptyForecastAsync(OptRowId, ProdDt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportOptyForecastAsync(ByVal OptRowId As String, ByVal ProdDt As System.Data.DataTable, ByVal userState As Object)
            If (Me.ImportOptyForecastOperationCompleted Is Nothing) Then
                Me.ImportOptyForecastOperationCompleted = AddressOf Me.OnImportOptyForecastOperationCompleted
            End If
            Me.InvokeAsync("ImportOptyForecast", New Object() {OptRowId, ProdDt}, Me.ImportOptyForecastOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportOptyForecastOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportOptyForecastCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportOptyForecastCompleted(Me, New ImportOptyForecastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Import_OpportunityNew", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Import_OpportunityNew( _
                    ByVal strOrganization As String,  _
                    ByVal strPrimaryPositionID As String,  _
                    ByVal strPrimaryUserID As String,  _
                    ByVal strAccountRowId As String,  _
                    ByVal strAccountName As String,  _
                    ByVal strAccountSite As String,  _
                    ByVal strContactRowId As String,  _
                    ByVal strContactLastName As String,  _
                    ByVal strContactFirstName As String,  _
                    ByVal strContactEmail As String,  _
                    ByVal strProjectName As String,  _
                    ByVal strDescription As String,  _
                    ByVal strChannel As String,  _
                    ByVal strBusinessGroup As String,  _
                    ByVal strSalesMethod As String,  _
                    ByVal strSalesStage As String,  _
                    ByVal strSource As String,  _
                    ByVal strCloseDate As String,  _
                    ByVal strRevenue As String,  _
                    ByVal strProbability As String,  _
                    ByVal strStatus As String,  _
                    ByVal strProgram As String,  _
                    ByVal strSupportRequest As String,  _
                    ByVal strCriticalSuccessFactor As String,  _
                    ByVal strReasonWonLost As String,  _
                    ByVal strLeadQuality As String,  _
                    ByVal isAssignToPartner As Boolean,  _
                    ByVal strPartnerRowId As String) As String
            Dim results() As Object = Me.Invoke("Import_OpportunityNew", New Object() {strOrganization, strPrimaryPositionID, strPrimaryUserID, strAccountRowId, strAccountName, strAccountSite, strContactRowId, strContactLastName, strContactFirstName, strContactEmail, strProjectName, strDescription, strChannel, strBusinessGroup, strSalesMethod, strSalesStage, strSource, strCloseDate, strRevenue, strProbability, strStatus, strProgram, strSupportRequest, strCriticalSuccessFactor, strReasonWonLost, strLeadQuality, isAssignToPartner, strPartnerRowId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Import_OpportunityNewAsync( _
                    ByVal strOrganization As String,  _
                    ByVal strPrimaryPositionID As String,  _
                    ByVal strPrimaryUserID As String,  _
                    ByVal strAccountRowId As String,  _
                    ByVal strAccountName As String,  _
                    ByVal strAccountSite As String,  _
                    ByVal strContactRowId As String,  _
                    ByVal strContactLastName As String,  _
                    ByVal strContactFirstName As String,  _
                    ByVal strContactEmail As String,  _
                    ByVal strProjectName As String,  _
                    ByVal strDescription As String,  _
                    ByVal strChannel As String,  _
                    ByVal strBusinessGroup As String,  _
                    ByVal strSalesMethod As String,  _
                    ByVal strSalesStage As String,  _
                    ByVal strSource As String,  _
                    ByVal strCloseDate As String,  _
                    ByVal strRevenue As String,  _
                    ByVal strProbability As String,  _
                    ByVal strStatus As String,  _
                    ByVal strProgram As String,  _
                    ByVal strSupportRequest As String,  _
                    ByVal strCriticalSuccessFactor As String,  _
                    ByVal strReasonWonLost As String,  _
                    ByVal strLeadQuality As String,  _
                    ByVal isAssignToPartner As Boolean,  _
                    ByVal strPartnerRowId As String)
            Me.Import_OpportunityNewAsync(strOrganization, strPrimaryPositionID, strPrimaryUserID, strAccountRowId, strAccountName, strAccountSite, strContactRowId, strContactLastName, strContactFirstName, strContactEmail, strProjectName, strDescription, strChannel, strBusinessGroup, strSalesMethod, strSalesStage, strSource, strCloseDate, strRevenue, strProbability, strStatus, strProgram, strSupportRequest, strCriticalSuccessFactor, strReasonWonLost, strLeadQuality, isAssignToPartner, strPartnerRowId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Import_OpportunityNewAsync( _
                    ByVal strOrganization As String,  _
                    ByVal strPrimaryPositionID As String,  _
                    ByVal strPrimaryUserID As String,  _
                    ByVal strAccountRowId As String,  _
                    ByVal strAccountName As String,  _
                    ByVal strAccountSite As String,  _
                    ByVal strContactRowId As String,  _
                    ByVal strContactLastName As String,  _
                    ByVal strContactFirstName As String,  _
                    ByVal strContactEmail As String,  _
                    ByVal strProjectName As String,  _
                    ByVal strDescription As String,  _
                    ByVal strChannel As String,  _
                    ByVal strBusinessGroup As String,  _
                    ByVal strSalesMethod As String,  _
                    ByVal strSalesStage As String,  _
                    ByVal strSource As String,  _
                    ByVal strCloseDate As String,  _
                    ByVal strRevenue As String,  _
                    ByVal strProbability As String,  _
                    ByVal strStatus As String,  _
                    ByVal strProgram As String,  _
                    ByVal strSupportRequest As String,  _
                    ByVal strCriticalSuccessFactor As String,  _
                    ByVal strReasonWonLost As String,  _
                    ByVal strLeadQuality As String,  _
                    ByVal isAssignToPartner As Boolean,  _
                    ByVal strPartnerRowId As String,  _
                    ByVal userState As Object)
            If (Me.Import_OpportunityNewOperationCompleted Is Nothing) Then
                Me.Import_OpportunityNewOperationCompleted = AddressOf Me.OnImport_OpportunityNewOperationCompleted
            End If
            Me.InvokeAsync("Import_OpportunityNew", New Object() {strOrganization, strPrimaryPositionID, strPrimaryUserID, strAccountRowId, strAccountName, strAccountSite, strContactRowId, strContactLastName, strContactFirstName, strContactEmail, strProjectName, strDescription, strChannel, strBusinessGroup, strSalesMethod, strSalesStage, strSource, strCloseDate, strRevenue, strProbability, strStatus, strProgram, strSupportRequest, strCriticalSuccessFactor, strReasonWonLost, strLeadQuality, isAssignToPartner, strPartnerRowId}, Me.Import_OpportunityNewOperationCompleted, userState)
        End Sub
        
        Private Sub OnImport_OpportunityNewOperationCompleted(ByVal arg As Object)
            If (Not (Me.Import_OpportunityNewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Import_OpportunityNewCompleted(Me, New Import_OpportunityNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOpportunityStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOpportunityStatus(ByVal OptRowId As String, ByVal status As String, ByVal desc As String, ByVal amt As String, ByVal CloseDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("UpdateOpportunityStatus", New Object() {OptRowId, status, desc, amt, CloseDate})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityStatusAsync(ByVal OptRowId As String, ByVal status As String, ByVal desc As String, ByVal amt As String, ByVal CloseDate As Date)
            Me.UpdateOpportunityStatusAsync(OptRowId, status, desc, amt, CloseDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityStatusAsync(ByVal OptRowId As String, ByVal status As String, ByVal desc As String, ByVal amt As String, ByVal CloseDate As Date, ByVal userState As Object)
            If (Me.UpdateOpportunityStatusOperationCompleted Is Nothing) Then
                Me.UpdateOpportunityStatusOperationCompleted = AddressOf Me.OnUpdateOpportunityStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateOpportunityStatus", New Object() {OptRowId, status, desc, amt, CloseDate}, Me.UpdateOpportunityStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOpportunityStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOpportunityStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOpportunityStatusCompleted(Me, New UpdateOpportunityStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOpportunityStage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOpportunityStage(ByVal OptRowId As String, ByVal stage As String, ByVal desc As String, ByVal amt As String, ByVal CloseDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("UpdateOpportunityStage", New Object() {OptRowId, stage, desc, amt, CloseDate})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityStageAsync(ByVal OptRowId As String, ByVal stage As String, ByVal desc As String, ByVal amt As String, ByVal CloseDate As Date)
            Me.UpdateOpportunityStageAsync(OptRowId, stage, desc, amt, CloseDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityStageAsync(ByVal OptRowId As String, ByVal stage As String, ByVal desc As String, ByVal amt As String, ByVal CloseDate As Date, ByVal userState As Object)
            If (Me.UpdateOpportunityStageOperationCompleted Is Nothing) Then
                Me.UpdateOpportunityStageOperationCompleted = AddressOf Me.OnUpdateOpportunityStageOperationCompleted
            End If
            Me.InvokeAsync("UpdateOpportunityStage", New Object() {OptRowId, stage, desc, amt, CloseDate}, Me.UpdateOpportunityStageOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOpportunityStageOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOpportunityStageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOpportunityStageCompleted(Me, New UpdateOpportunityStageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOpportunityStage_Proj", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOpportunityStage_Proj(ByVal OptRowId As String, ByVal strAccountRowId As String, ByVal stage As String, ByVal desc As String, ByVal amt As String, ByVal CloseDate As Date, ByVal ReasonWonLost As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateOpportunityStage_Proj", New Object() {OptRowId, strAccountRowId, stage, desc, amt, CloseDate, ReasonWonLost})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityStage_ProjAsync(ByVal OptRowId As String, ByVal strAccountRowId As String, ByVal stage As String, ByVal desc As String, ByVal amt As String, ByVal CloseDate As Date, ByVal ReasonWonLost As String)
            Me.UpdateOpportunityStage_ProjAsync(OptRowId, strAccountRowId, stage, desc, amt, CloseDate, ReasonWonLost, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityStage_ProjAsync(ByVal OptRowId As String, ByVal strAccountRowId As String, ByVal stage As String, ByVal desc As String, ByVal amt As String, ByVal CloseDate As Date, ByVal ReasonWonLost As String, ByVal userState As Object)
            If (Me.UpdateOpportunityStage_ProjOperationCompleted Is Nothing) Then
                Me.UpdateOpportunityStage_ProjOperationCompleted = AddressOf Me.OnUpdateOpportunityStage_ProjOperationCompleted
            End If
            Me.InvokeAsync("UpdateOpportunityStage_Proj", New Object() {OptRowId, strAccountRowId, stage, desc, amt, CloseDate, ReasonWonLost}, Me.UpdateOpportunityStage_ProjOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOpportunityStage_ProjOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOpportunityStage_ProjCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOpportunityStage_ProjCompleted(Me, New UpdateOpportunityStage_ProjCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOpportunityStatus2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOpportunityStatus2(ByVal OptRowId As String, ByVal status As String, ByVal desc As String, ByVal amt As String, ByVal CloseDate As Date, ByVal ReasonWonLost As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateOpportunityStatus2", New Object() {OptRowId, status, desc, amt, CloseDate, ReasonWonLost})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityStatus2Async(ByVal OptRowId As String, ByVal status As String, ByVal desc As String, ByVal amt As String, ByVal CloseDate As Date, ByVal ReasonWonLost As String)
            Me.UpdateOpportunityStatus2Async(OptRowId, status, desc, amt, CloseDate, ReasonWonLost, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityStatus2Async(ByVal OptRowId As String, ByVal status As String, ByVal desc As String, ByVal amt As String, ByVal CloseDate As Date, ByVal ReasonWonLost As String, ByVal userState As Object)
            If (Me.UpdateOpportunityStatus2OperationCompleted Is Nothing) Then
                Me.UpdateOpportunityStatus2OperationCompleted = AddressOf Me.OnUpdateOpportunityStatus2OperationCompleted
            End If
            Me.InvokeAsync("UpdateOpportunityStatus2", New Object() {OptRowId, status, desc, amt, CloseDate, ReasonWonLost}, Me.UpdateOpportunityStatus2OperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOpportunityStatus2OperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOpportunityStatus2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOpportunityStatus2Completed(Me, New UpdateOpportunityStatus2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOpportunityPartnerContact", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOpportunityPartnerContact(ByVal OptyID As String, ByVal ContactEmail As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateOpportunityPartnerContact", New Object() {OptyID, ContactEmail})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityPartnerContactAsync(ByVal OptyID As String, ByVal ContactEmail As String)
            Me.UpdateOpportunityPartnerContactAsync(OptyID, ContactEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityPartnerContactAsync(ByVal OptyID As String, ByVal ContactEmail As String, ByVal userState As Object)
            If (Me.UpdateOpportunityPartnerContactOperationCompleted Is Nothing) Then
                Me.UpdateOpportunityPartnerContactOperationCompleted = AddressOf Me.OnUpdateOpportunityPartnerContactOperationCompleted
            End If
            Me.InvokeAsync("UpdateOpportunityPartnerContact", New Object() {OptyID, ContactEmail}, Me.UpdateOpportunityPartnerContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOpportunityPartnerContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOpportunityPartnerContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOpportunityPartnerContactCompleted(Me, New UpdateOpportunityPartnerContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOpportunityPartnerContactId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOpportunityPartnerContactId(ByVal OptyID As String, ByVal ContactRowId As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateOpportunityPartnerContactId", New Object() {OptyID, ContactRowId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityPartnerContactIdAsync(ByVal OptyID As String, ByVal ContactRowId As String)
            Me.UpdateOpportunityPartnerContactIdAsync(OptyID, ContactRowId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityPartnerContactIdAsync(ByVal OptyID As String, ByVal ContactRowId As String, ByVal userState As Object)
            If (Me.UpdateOpportunityPartnerContactIdOperationCompleted Is Nothing) Then
                Me.UpdateOpportunityPartnerContactIdOperationCompleted = AddressOf Me.OnUpdateOpportunityPartnerContactIdOperationCompleted
            End If
            Me.InvokeAsync("UpdateOpportunityPartnerContactId", New Object() {OptyID, ContactRowId}, Me.UpdateOpportunityPartnerContactIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOpportunityPartnerContactIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOpportunityPartnerContactIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOpportunityPartnerContactIdCompleted(Me, New UpdateOpportunityPartnerContactIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOpportunityStatusAmtCloseDateProb", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOpportunityStatusAmtCloseDateProb(ByVal OptRowId As String, ByVal status As String, ByVal desc As String, ByVal amt As String, ByVal CloseDate As Date, ByVal PriRevWinProb As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateOpportunityStatusAmtCloseDateProb", New Object() {OptRowId, status, desc, amt, CloseDate, PriRevWinProb})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityStatusAmtCloseDateProbAsync(ByVal OptRowId As String, ByVal status As String, ByVal desc As String, ByVal amt As String, ByVal CloseDate As Date, ByVal PriRevWinProb As String)
            Me.UpdateOpportunityStatusAmtCloseDateProbAsync(OptRowId, status, desc, amt, CloseDate, PriRevWinProb, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityStatusAmtCloseDateProbAsync(ByVal OptRowId As String, ByVal status As String, ByVal desc As String, ByVal amt As String, ByVal CloseDate As Date, ByVal PriRevWinProb As String, ByVal userState As Object)
            If (Me.UpdateOpportunityStatusAmtCloseDateProbOperationCompleted Is Nothing) Then
                Me.UpdateOpportunityStatusAmtCloseDateProbOperationCompleted = AddressOf Me.OnUpdateOpportunityStatusAmtCloseDateProbOperationCompleted
            End If
            Me.InvokeAsync("UpdateOpportunityStatusAmtCloseDateProb", New Object() {OptRowId, status, desc, amt, CloseDate, PriRevWinProb}, Me.UpdateOpportunityStatusAmtCloseDateProbOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOpportunityStatusAmtCloseDateProbOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOpportunityStatusAmtCloseDateProbCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOpportunityStatusAmtCloseDateProbCompleted(Me, New UpdateOpportunityStatusAmtCloseDateProbCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateOpportunity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateOpportunity(ByVal strAccountRowId As String, ByVal strProjectName As String, ByVal strDescription As String, ByVal strSalesStage As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strReasonWonLost As String, ByVal status As String, ByVal CloseDate As Date, ByVal PriRevWinProb As String) As String
            Dim results() As Object = Me.Invoke("CreateOpportunity", New Object() {strAccountRowId, strProjectName, strDescription, strSalesStage, strRevenue, strCurrency, strReasonWonLost, status, CloseDate, PriRevWinProb})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateOpportunityAsync(ByVal strAccountRowId As String, ByVal strProjectName As String, ByVal strDescription As String, ByVal strSalesStage As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strReasonWonLost As String, ByVal status As String, ByVal CloseDate As Date, ByVal PriRevWinProb As String)
            Me.CreateOpportunityAsync(strAccountRowId, strProjectName, strDescription, strSalesStage, strRevenue, strCurrency, strReasonWonLost, status, CloseDate, PriRevWinProb, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateOpportunityAsync(ByVal strAccountRowId As String, ByVal strProjectName As String, ByVal strDescription As String, ByVal strSalesStage As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strReasonWonLost As String, ByVal status As String, ByVal CloseDate As Date, ByVal PriRevWinProb As String, ByVal userState As Object)
            If (Me.CreateOpportunityOperationCompleted Is Nothing) Then
                Me.CreateOpportunityOperationCompleted = AddressOf Me.OnCreateOpportunityOperationCompleted
            End If
            Me.InvokeAsync("CreateOpportunity", New Object() {strAccountRowId, strProjectName, strDescription, strSalesStage, strRevenue, strCurrency, strReasonWonLost, status, CloseDate, PriRevWinProb}, Me.CreateOpportunityOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateOpportunityOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateOpportunityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateOpportunityCompleted(Me, New CreateOpportunityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateSiebelOpportunity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateSiebelOpportunity(ByVal strAccountRowId As String, ByVal strProjectName As String, ByVal strDescription As String, ByVal strSalesStage As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strReasonWonLost As String, ByVal ConnectToACL As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("CreateSiebelOpportunity", New Object() {strAccountRowId, strProjectName, strDescription, strSalesStage, strRevenue, strCurrency, strReasonWonLost, ConnectToACL})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelOpportunityAsync(ByVal strAccountRowId As String, ByVal strProjectName As String, ByVal strDescription As String, ByVal strSalesStage As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strReasonWonLost As String, ByVal ConnectToACL As Boolean)
            Me.CreateSiebelOpportunityAsync(strAccountRowId, strProjectName, strDescription, strSalesStage, strRevenue, strCurrency, strReasonWonLost, ConnectToACL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelOpportunityAsync(ByVal strAccountRowId As String, ByVal strProjectName As String, ByVal strDescription As String, ByVal strSalesStage As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strReasonWonLost As String, ByVal ConnectToACL As Boolean, ByVal userState As Object)
            If (Me.CreateSiebelOpportunityOperationCompleted Is Nothing) Then
                Me.CreateSiebelOpportunityOperationCompleted = AddressOf Me.OnCreateSiebelOpportunityOperationCompleted
            End If
            Me.InvokeAsync("CreateSiebelOpportunity", New Object() {strAccountRowId, strProjectName, strDescription, strSalesStage, strRevenue, strCurrency, strReasonWonLost, ConnectToACL}, Me.CreateSiebelOpportunityOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateSiebelOpportunityOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateSiebelOpportunityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateSiebelOpportunityCompleted(Me, New CreateSiebelOpportunityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateNewOpportunity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateNewOpportunity(ByVal strAccountRowId As String, ByVal strProjectName As String, ByVal strDescription As String, ByVal strSalesStage As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strReasonWonLost As String, ByVal ConnectToACL As Boolean) As String
            Dim results() As Object = Me.Invoke("CreateNewOpportunity", New Object() {strAccountRowId, strProjectName, strDescription, strSalesStage, strRevenue, strCurrency, strReasonWonLost, ConnectToACL})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateNewOpportunityAsync(ByVal strAccountRowId As String, ByVal strProjectName As String, ByVal strDescription As String, ByVal strSalesStage As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strReasonWonLost As String, ByVal ConnectToACL As Boolean)
            Me.CreateNewOpportunityAsync(strAccountRowId, strProjectName, strDescription, strSalesStage, strRevenue, strCurrency, strReasonWonLost, ConnectToACL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateNewOpportunityAsync(ByVal strAccountRowId As String, ByVal strProjectName As String, ByVal strDescription As String, ByVal strSalesStage As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strReasonWonLost As String, ByVal ConnectToACL As Boolean, ByVal userState As Object)
            If (Me.CreateNewOpportunityOperationCompleted Is Nothing) Then
                Me.CreateNewOpportunityOperationCompleted = AddressOf Me.OnCreateNewOpportunityOperationCompleted
            End If
            Me.InvokeAsync("CreateNewOpportunity", New Object() {strAccountRowId, strProjectName, strDescription, strSalesStage, strRevenue, strCurrency, strReasonWonLost, ConnectToACL}, Me.CreateNewOpportunityOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateNewOpportunityOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateNewOpportunityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateNewOpportunityCompleted(Me, New CreateNewOpportunityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateNewOpportunity4Quote", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateNewOpportunity4Quote(ByVal strAccountRowId As String, ByVal strProjectName As String, ByVal strDescription As String, ByVal strSalesStage As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strReasonWonLost As String, ByVal Status As String, ByVal CloseDate As Date, ByVal OwnerLogin As String) As String
            Dim results() As Object = Me.Invoke("CreateNewOpportunity4Quote", New Object() {strAccountRowId, strProjectName, strDescription, strSalesStage, strRevenue, strCurrency, strReasonWonLost, Status, CloseDate, OwnerLogin})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateNewOpportunity4QuoteAsync(ByVal strAccountRowId As String, ByVal strProjectName As String, ByVal strDescription As String, ByVal strSalesStage As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strReasonWonLost As String, ByVal Status As String, ByVal CloseDate As Date, ByVal OwnerLogin As String)
            Me.CreateNewOpportunity4QuoteAsync(strAccountRowId, strProjectName, strDescription, strSalesStage, strRevenue, strCurrency, strReasonWonLost, Status, CloseDate, OwnerLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateNewOpportunity4QuoteAsync(ByVal strAccountRowId As String, ByVal strProjectName As String, ByVal strDescription As String, ByVal strSalesStage As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strReasonWonLost As String, ByVal Status As String, ByVal CloseDate As Date, ByVal OwnerLogin As String, ByVal userState As Object)
            If (Me.CreateNewOpportunity4QuoteOperationCompleted Is Nothing) Then
                Me.CreateNewOpportunity4QuoteOperationCompleted = AddressOf Me.OnCreateNewOpportunity4QuoteOperationCompleted
            End If
            Me.InvokeAsync("CreateNewOpportunity4Quote", New Object() {strAccountRowId, strProjectName, strDescription, strSalesStage, strRevenue, strCurrency, strReasonWonLost, Status, CloseDate, OwnerLogin}, Me.CreateNewOpportunity4QuoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateNewOpportunity4QuoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateNewOpportunity4QuoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateNewOpportunity4QuoteCompleted(Me, New CreateNewOpportunity4QuoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Import_Opportunity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Import_Opportunity(ByVal strPrimaryPositionID As String, ByVal strPrimaryUserID As String, ByVal strAccountRowId As String, ByVal strContactRowId As String, ByVal strProjectName As String, ByVal strDescription As String, ByVal strSalesMethod As String, ByVal strSalesStage As String, ByVal strCloseDate As Date, ByVal strRevenue As String, ByVal strProbability As String, ByVal strStatus As String, ByVal strReasonWonLost As String, ByVal strCurrency As String) As String
            Dim results() As Object = Me.Invoke("Import_Opportunity", New Object() {strPrimaryPositionID, strPrimaryUserID, strAccountRowId, strContactRowId, strProjectName, strDescription, strSalesMethod, strSalesStage, strCloseDate, strRevenue, strProbability, strStatus, strReasonWonLost, strCurrency})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Import_OpportunityAsync(ByVal strPrimaryPositionID As String, ByVal strPrimaryUserID As String, ByVal strAccountRowId As String, ByVal strContactRowId As String, ByVal strProjectName As String, ByVal strDescription As String, ByVal strSalesMethod As String, ByVal strSalesStage As String, ByVal strCloseDate As Date, ByVal strRevenue As String, ByVal strProbability As String, ByVal strStatus As String, ByVal strReasonWonLost As String, ByVal strCurrency As String)
            Me.Import_OpportunityAsync(strPrimaryPositionID, strPrimaryUserID, strAccountRowId, strContactRowId, strProjectName, strDescription, strSalesMethod, strSalesStage, strCloseDate, strRevenue, strProbability, strStatus, strReasonWonLost, strCurrency, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Import_OpportunityAsync(ByVal strPrimaryPositionID As String, ByVal strPrimaryUserID As String, ByVal strAccountRowId As String, ByVal strContactRowId As String, ByVal strProjectName As String, ByVal strDescription As String, ByVal strSalesMethod As String, ByVal strSalesStage As String, ByVal strCloseDate As Date, ByVal strRevenue As String, ByVal strProbability As String, ByVal strStatus As String, ByVal strReasonWonLost As String, ByVal strCurrency As String, ByVal userState As Object)
            If (Me.Import_OpportunityOperationCompleted Is Nothing) Then
                Me.Import_OpportunityOperationCompleted = AddressOf Me.OnImport_OpportunityOperationCompleted
            End If
            Me.InvokeAsync("Import_Opportunity", New Object() {strPrimaryPositionID, strPrimaryUserID, strAccountRowId, strContactRowId, strProjectName, strDescription, strSalesMethod, strSalesStage, strCloseDate, strRevenue, strProbability, strStatus, strReasonWonLost, strCurrency}, Me.Import_OpportunityOperationCompleted, userState)
        End Sub
        
        Private Sub OnImport_OpportunityOperationCompleted(ByVal arg As Object)
            If (Not (Me.Import_OpportunityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Import_OpportunityCompleted(Me, New Import_OpportunityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOpportunity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOpportunity(ByVal OptRowId As String, ByVal desc As String, ByVal channel As String, ByVal BizGrp As String, ByVal SalesMethod As String, ByVal SalesStage As String, ByVal PriRevCloseDate As String, ByVal Revenue As String, ByVal PriRevWinProb As String, ByVal status As String, ByVal ReasonWonLost As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateOpportunity", New Object() {OptRowId, desc, channel, BizGrp, SalesMethod, SalesStage, PriRevCloseDate, Revenue, PriRevWinProb, status, ReasonWonLost})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityAsync(ByVal OptRowId As String, ByVal desc As String, ByVal channel As String, ByVal BizGrp As String, ByVal SalesMethod As String, ByVal SalesStage As String, ByVal PriRevCloseDate As String, ByVal Revenue As String, ByVal PriRevWinProb As String, ByVal status As String, ByVal ReasonWonLost As String)
            Me.UpdateOpportunityAsync(OptRowId, desc, channel, BizGrp, SalesMethod, SalesStage, PriRevCloseDate, Revenue, PriRevWinProb, status, ReasonWonLost, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityAsync(ByVal OptRowId As String, ByVal desc As String, ByVal channel As String, ByVal BizGrp As String, ByVal SalesMethod As String, ByVal SalesStage As String, ByVal PriRevCloseDate As String, ByVal Revenue As String, ByVal PriRevWinProb As String, ByVal status As String, ByVal ReasonWonLost As String, ByVal userState As Object)
            If (Me.UpdateOpportunityOperationCompleted Is Nothing) Then
                Me.UpdateOpportunityOperationCompleted = AddressOf Me.OnUpdateOpportunityOperationCompleted
            End If
            Me.InvokeAsync("UpdateOpportunity", New Object() {OptRowId, desc, channel, BizGrp, SalesMethod, SalesStage, PriRevCloseDate, Revenue, PriRevWinProb, status, ReasonWonLost}, Me.UpdateOpportunityOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOpportunityOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOpportunityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOpportunityCompleted(Me, New UpdateOpportunityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOpportunityStatusOld", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOpportunityStatusOld(ByVal OptRowId As String, ByVal status As String, ByVal desc As String, ByVal ConnectToACL As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("UpdateOpportunityStatusOld", New Object() {OptRowId, status, desc, ConnectToACL})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityStatusOldAsync(ByVal OptRowId As String, ByVal status As String, ByVal desc As String, ByVal ConnectToACL As Boolean)
            Me.UpdateOpportunityStatusOldAsync(OptRowId, status, desc, ConnectToACL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityStatusOldAsync(ByVal OptRowId As String, ByVal status As String, ByVal desc As String, ByVal ConnectToACL As Boolean, ByVal userState As Object)
            If (Me.UpdateOpportunityStatusOldOperationCompleted Is Nothing) Then
                Me.UpdateOpportunityStatusOldOperationCompleted = AddressOf Me.OnUpdateOpportunityStatusOldOperationCompleted
            End If
            Me.InvokeAsync("UpdateOpportunityStatusOld", New Object() {OptRowId, status, desc, ConnectToACL}, Me.UpdateOpportunityStatusOldOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOpportunityStatusOldOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOpportunityStatusOldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOpportunityStatusOldCompleted(Me, New UpdateOpportunityStatusOldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOpportunityStatusRevenue", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOpportunityStatusRevenue(ByVal OptRowId As String, ByVal status As String, ByVal Revenue As Double, ByVal ConnectToACL As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("UpdateOpportunityStatusRevenue", New Object() {OptRowId, status, Revenue, ConnectToACL})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityStatusRevenueAsync(ByVal OptRowId As String, ByVal status As String, ByVal Revenue As Double, ByVal ConnectToACL As Boolean)
            Me.UpdateOpportunityStatusRevenueAsync(OptRowId, status, Revenue, ConnectToACL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityStatusRevenueAsync(ByVal OptRowId As String, ByVal status As String, ByVal Revenue As Double, ByVal ConnectToACL As Boolean, ByVal userState As Object)
            If (Me.UpdateOpportunityStatusRevenueOperationCompleted Is Nothing) Then
                Me.UpdateOpportunityStatusRevenueOperationCompleted = AddressOf Me.OnUpdateOpportunityStatusRevenueOperationCompleted
            End If
            Me.InvokeAsync("UpdateOpportunityStatusRevenue", New Object() {OptRowId, status, Revenue, ConnectToACL}, Me.UpdateOpportunityStatusRevenueOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOpportunityStatusRevenueOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOpportunityStatusRevenueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOpportunityStatusRevenueCompleted(Me, New UpdateOpportunityStatusRevenueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSiebelOpportunity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSiebelOpportunity(ByVal OptRowId As String, ByVal strDescription As String, ByVal strSalesStage As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strReasonWonLost As String, ByVal strStatus As String, ByVal ConnectToACL As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("UpdateSiebelOpportunity", New Object() {OptRowId, strDescription, strSalesStage, strRevenue, strCurrency, strReasonWonLost, strStatus, ConnectToACL})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSiebelOpportunityAsync(ByVal OptRowId As String, ByVal strDescription As String, ByVal strSalesStage As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strReasonWonLost As String, ByVal strStatus As String, ByVal ConnectToACL As Boolean)
            Me.UpdateSiebelOpportunityAsync(OptRowId, strDescription, strSalesStage, strRevenue, strCurrency, strReasonWonLost, strStatus, ConnectToACL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSiebelOpportunityAsync(ByVal OptRowId As String, ByVal strDescription As String, ByVal strSalesStage As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strReasonWonLost As String, ByVal strStatus As String, ByVal ConnectToACL As Boolean, ByVal userState As Object)
            If (Me.UpdateSiebelOpportunityOperationCompleted Is Nothing) Then
                Me.UpdateSiebelOpportunityOperationCompleted = AddressOf Me.OnUpdateSiebelOpportunityOperationCompleted
            End If
            Me.InvokeAsync("UpdateSiebelOpportunity", New Object() {OptRowId, strDescription, strSalesStage, strRevenue, strCurrency, strReasonWonLost, strStatus, ConnectToACL}, Me.UpdateSiebelOpportunityOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSiebelOpportunityOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSiebelOpportunityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSiebelOpportunityCompleted(Me, New UpdateSiebelOpportunityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOpportunityOrg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOpportunityOrg(ByVal OptyID As String, ByVal AccountRowID As String, ByVal OriOrg As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateOpportunityOrg", New Object() {OptyID, AccountRowID, OriOrg})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityOrgAsync(ByVal OptyID As String, ByVal AccountRowID As String, ByVal OriOrg As String)
            Me.UpdateOpportunityOrgAsync(OptyID, AccountRowID, OriOrg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOpportunityOrgAsync(ByVal OptyID As String, ByVal AccountRowID As String, ByVal OriOrg As String, ByVal userState As Object)
            If (Me.UpdateOpportunityOrgOperationCompleted Is Nothing) Then
                Me.UpdateOpportunityOrgOperationCompleted = AddressOf Me.OnUpdateOpportunityOrgOperationCompleted
            End If
            Me.InvokeAsync("UpdateOpportunityOrg", New Object() {OptyID, AccountRowID, OriOrg}, Me.UpdateOpportunityOrgOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOpportunityOrgOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOpportunityOrgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOpportunityOrgCompleted(Me, New UpdateOpportunityOrgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportOpportunity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportOpportunity( _
                    ByVal proj_name As String,  _
                    ByVal proj_desc As String,  _
                    ByVal biz_group As String,  _
                    ByVal channel As String,  _
                    ByVal is_assign_to_partner As Boolean,  _
                    ByVal close_date As String,  _
                    ByVal org As String,  _
                    ByVal lead_quality As String,  _
                    ByVal program As String,  _
                    ByVal support_request As String,  _
                    ByVal revenue As String,  _
                    ByVal success_factor As String,  _
                    ByVal reason_won_lost As String,  _
                    ByVal currency As String,  _
                    ByVal sales_method As String,  _
                    ByVal sales_stage As String,  _
                    ByVal account_row_id As String,  _
                    ByVal contact_row_id As String,  _
                    ByVal partner_row_id As String,  _
                    ByVal primary_user_login As String,  _
                    ByVal source_id As String) As String
            Dim results() As Object = Me.Invoke("ImportOpportunity", New Object() {proj_name, proj_desc, biz_group, channel, is_assign_to_partner, close_date, org, lead_quality, program, support_request, revenue, success_factor, reason_won_lost, currency, sales_method, sales_stage, account_row_id, contact_row_id, partner_row_id, primary_user_login, source_id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportOpportunityAsync( _
                    ByVal proj_name As String,  _
                    ByVal proj_desc As String,  _
                    ByVal biz_group As String,  _
                    ByVal channel As String,  _
                    ByVal is_assign_to_partner As Boolean,  _
                    ByVal close_date As String,  _
                    ByVal org As String,  _
                    ByVal lead_quality As String,  _
                    ByVal program As String,  _
                    ByVal support_request As String,  _
                    ByVal revenue As String,  _
                    ByVal success_factor As String,  _
                    ByVal reason_won_lost As String,  _
                    ByVal currency As String,  _
                    ByVal sales_method As String,  _
                    ByVal sales_stage As String,  _
                    ByVal account_row_id As String,  _
                    ByVal contact_row_id As String,  _
                    ByVal partner_row_id As String,  _
                    ByVal primary_user_login As String,  _
                    ByVal source_id As String)
            Me.ImportOpportunityAsync(proj_name, proj_desc, biz_group, channel, is_assign_to_partner, close_date, org, lead_quality, program, support_request, revenue, success_factor, reason_won_lost, currency, sales_method, sales_stage, account_row_id, contact_row_id, partner_row_id, primary_user_login, source_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportOpportunityAsync( _
                    ByVal proj_name As String,  _
                    ByVal proj_desc As String,  _
                    ByVal biz_group As String,  _
                    ByVal channel As String,  _
                    ByVal is_assign_to_partner As Boolean,  _
                    ByVal close_date As String,  _
                    ByVal org As String,  _
                    ByVal lead_quality As String,  _
                    ByVal program As String,  _
                    ByVal support_request As String,  _
                    ByVal revenue As String,  _
                    ByVal success_factor As String,  _
                    ByVal reason_won_lost As String,  _
                    ByVal currency As String,  _
                    ByVal sales_method As String,  _
                    ByVal sales_stage As String,  _
                    ByVal account_row_id As String,  _
                    ByVal contact_row_id As String,  _
                    ByVal partner_row_id As String,  _
                    ByVal primary_user_login As String,  _
                    ByVal source_id As String,  _
                    ByVal userState As Object)
            If (Me.ImportOpportunityOperationCompleted Is Nothing) Then
                Me.ImportOpportunityOperationCompleted = AddressOf Me.OnImportOpportunityOperationCompleted
            End If
            Me.InvokeAsync("ImportOpportunity", New Object() {proj_name, proj_desc, biz_group, channel, is_assign_to_partner, close_date, org, lead_quality, program, support_request, revenue, success_factor, reason_won_lost, currency, sales_method, sales_stage, account_row_id, contact_row_id, partner_row_id, primary_user_login, source_id}, Me.ImportOpportunityOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportOpportunityOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportOpportunityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportOpportunityCompleted(Me, New ImportOpportunityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportOpportunityV2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportOpportunityV2( _
                    ByVal proj_name As String,  _
                    ByVal proj_desc As String,  _
                    ByVal biz_group As String,  _
                    ByVal channel As String,  _
                    ByVal is_assign_to_partner As Boolean,  _
                    ByVal close_date As String,  _
                    ByVal org As String,  _
                    ByVal lead_quality As String,  _
                    ByVal program As String,  _
                    ByVal support_request As String,  _
                    ByVal revenue As String,  _
                    ByVal success_factor As String,  _
                    ByVal reason_won_lost As String,  _
                    ByVal currency As String,  _
                    ByVal sales_method As String,  _
                    ByVal sales_stage As String,  _
                    ByVal account_row_id As String,  _
                    ByVal contact_row_id As String,  _
                    ByVal partner_row_id As String,  _
                    ByVal primary_user_login As String,  _
                    ByVal source_id As String,  _
                    ByRef Oppty_RowID As String,  _
                    ByRef ErrorStr As String) As Boolean
            Dim results() As Object = Me.Invoke("ImportOpportunityV2", New Object() {proj_name, proj_desc, biz_group, channel, is_assign_to_partner, close_date, org, lead_quality, program, support_request, revenue, success_factor, reason_won_lost, currency, sales_method, sales_stage, account_row_id, contact_row_id, partner_row_id, primary_user_login, source_id, Oppty_RowID, ErrorStr})
            Oppty_RowID = CType(results(1),String)
            ErrorStr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportOpportunityV2Async( _
                    ByVal proj_name As String,  _
                    ByVal proj_desc As String,  _
                    ByVal biz_group As String,  _
                    ByVal channel As String,  _
                    ByVal is_assign_to_partner As Boolean,  _
                    ByVal close_date As String,  _
                    ByVal org As String,  _
                    ByVal lead_quality As String,  _
                    ByVal program As String,  _
                    ByVal support_request As String,  _
                    ByVal revenue As String,  _
                    ByVal success_factor As String,  _
                    ByVal reason_won_lost As String,  _
                    ByVal currency As String,  _
                    ByVal sales_method As String,  _
                    ByVal sales_stage As String,  _
                    ByVal account_row_id As String,  _
                    ByVal contact_row_id As String,  _
                    ByVal partner_row_id As String,  _
                    ByVal primary_user_login As String,  _
                    ByVal source_id As String,  _
                    ByVal Oppty_RowID As String,  _
                    ByVal ErrorStr As String)
            Me.ImportOpportunityV2Async(proj_name, proj_desc, biz_group, channel, is_assign_to_partner, close_date, org, lead_quality, program, support_request, revenue, success_factor, reason_won_lost, currency, sales_method, sales_stage, account_row_id, contact_row_id, partner_row_id, primary_user_login, source_id, Oppty_RowID, ErrorStr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportOpportunityV2Async( _
                    ByVal proj_name As String,  _
                    ByVal proj_desc As String,  _
                    ByVal biz_group As String,  _
                    ByVal channel As String,  _
                    ByVal is_assign_to_partner As Boolean,  _
                    ByVal close_date As String,  _
                    ByVal org As String,  _
                    ByVal lead_quality As String,  _
                    ByVal program As String,  _
                    ByVal support_request As String,  _
                    ByVal revenue As String,  _
                    ByVal success_factor As String,  _
                    ByVal reason_won_lost As String,  _
                    ByVal currency As String,  _
                    ByVal sales_method As String,  _
                    ByVal sales_stage As String,  _
                    ByVal account_row_id As String,  _
                    ByVal contact_row_id As String,  _
                    ByVal partner_row_id As String,  _
                    ByVal primary_user_login As String,  _
                    ByVal source_id As String,  _
                    ByVal Oppty_RowID As String,  _
                    ByVal ErrorStr As String,  _
                    ByVal userState As Object)
            If (Me.ImportOpportunityV2OperationCompleted Is Nothing) Then
                Me.ImportOpportunityV2OperationCompleted = AddressOf Me.OnImportOpportunityV2OperationCompleted
            End If
            Me.InvokeAsync("ImportOpportunityV2", New Object() {proj_name, proj_desc, biz_group, channel, is_assign_to_partner, close_date, org, lead_quality, program, support_request, revenue, success_factor, reason_won_lost, currency, sales_method, sales_stage, account_row_id, contact_row_id, partner_row_id, primary_user_login, source_id, Oppty_RowID, ErrorStr}, Me.ImportOpportunityV2OperationCompleted, userState)
        End Sub
        
        Private Sub OnImportOpportunityV2OperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportOpportunityV2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportOpportunityV2Completed(Me, New ImportOpportunityV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubscribeENews2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubscribeENews2(ByVal Email As String, ByVal eNewsName As String, ByVal IsSubscribe As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("SubscribeENews2", New Object() {Email, eNewsName, IsSubscribe})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubscribeENews2Async(ByVal Email As String, ByVal eNewsName As String, ByVal IsSubscribe As Boolean)
            Me.SubscribeENews2Async(Email, eNewsName, IsSubscribe, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubscribeENews2Async(ByVal Email As String, ByVal eNewsName As String, ByVal IsSubscribe As Boolean, ByVal userState As Object)
            If (Me.SubscribeENews2OperationCompleted Is Nothing) Then
                Me.SubscribeENews2OperationCompleted = AddressOf Me.OnSubscribeENews2OperationCompleted
            End If
            Me.InvokeAsync("SubscribeENews2", New Object() {Email, eNewsName, IsSubscribe}, Me.SubscribeENews2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSubscribeENews2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SubscribeENews2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubscribeENews2Completed(Me, New SubscribeENews2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateContactNeverEmail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContactNeverEmail(ByVal email As String, ByVal IsNeverEmail As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("UpdateContactNeverEmail", New Object() {email, IsNeverEmail})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactNeverEmailAsync(ByVal email As String, ByVal IsNeverEmail As Boolean)
            Me.UpdateContactNeverEmailAsync(email, IsNeverEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactNeverEmailAsync(ByVal email As String, ByVal IsNeverEmail As Boolean, ByVal userState As Object)
            If (Me.UpdateContactNeverEmailOperationCompleted Is Nothing) Then
                Me.UpdateContactNeverEmailOperationCompleted = AddressOf Me.OnUpdateContactNeverEmailOperationCompleted
            End If
            Me.InvokeAsync("UpdateContactNeverEmail", New Object() {email, IsNeverEmail}, Me.UpdateContactNeverEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactNeverEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactNeverEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactNeverEmailCompleted(Me, New UpdateContactNeverEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssociateContactToAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssociateContactToAccount(ByVal email As String, ByVal AccountId As String) As Integer
            Dim results() As Object = Me.Invoke("AssociateContactToAccount", New Object() {email, AccountId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssociateContactToAccountAsync(ByVal email As String, ByVal AccountId As String)
            Me.AssociateContactToAccountAsync(email, AccountId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssociateContactToAccountAsync(ByVal email As String, ByVal AccountId As String, ByVal userState As Object)
            If (Me.AssociateContactToAccountOperationCompleted Is Nothing) Then
                Me.AssociateContactToAccountOperationCompleted = AddressOf Me.OnAssociateContactToAccountOperationCompleted
            End If
            Me.InvokeAsync("AssociateContactToAccount", New Object() {email, AccountId}, Me.AssociateContactToAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssociateContactToAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssociateContactToAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssociateContactToAccountCompleted(Me, New AssociateContactToAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateContactDisable", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContactDisable(ByVal Email As String, ByVal IsDisable As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("UpdateContactDisable", New Object() {Email, IsDisable})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactDisableAsync(ByVal Email As String, ByVal IsDisable As Boolean)
            Me.UpdateContactDisableAsync(Email, IsDisable, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactDisableAsync(ByVal Email As String, ByVal IsDisable As Boolean, ByVal userState As Object)
            If (Me.UpdateContactDisableOperationCompleted Is Nothing) Then
                Me.UpdateContactDisableOperationCompleted = AddressOf Me.OnUpdateContactDisableOperationCompleted
            End If
            Me.InvokeAsync("UpdateContactDisable", New Object() {Email, IsDisable}, Me.UpdateContactDisableOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactDisableOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactDisableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactDisableCompleted(Me, New UpdateContactDisableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubscribeProduct", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubscribeProduct(ByVal Email As String, ByVal ProductName As String, ByVal IsSubscribe As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("SubscribeProduct", New Object() {Email, ProductName, IsSubscribe})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubscribeProductAsync(ByVal Email As String, ByVal ProductName As String, ByVal IsSubscribe As Boolean)
            Me.SubscribeProductAsync(Email, ProductName, IsSubscribe, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubscribeProductAsync(ByVal Email As String, ByVal ProductName As String, ByVal IsSubscribe As Boolean, ByVal userState As Object)
            If (Me.SubscribeProductOperationCompleted Is Nothing) Then
                Me.SubscribeProductOperationCompleted = AddressOf Me.OnSubscribeProductOperationCompleted
            End If
            Me.InvokeAsync("SubscribeProduct", New Object() {Email, ProductName, IsSubscribe}, Me.SubscribeProductOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubscribeProductOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubscribeProductCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubscribeProductCompleted(Me, New SubscribeProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateContactInfoByMyAdvantechProfile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContactInfoByMyAdvantechProfile(ByVal UserID As String, ByVal FirstName As String, ByVal LastName As String, ByVal UserType As String, ByVal JobFunction As String, ByVal JobTitle As String, ByVal Account As String, ByVal Country As String, ByVal WorkPhone As String, ByVal CellPhone As String, ByVal Fax As String, ByVal Password As String, ByVal NeverEmail As String, ByVal CanSeeOrder As Boolean, ByVal CanPlaceOrder As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("UpdateContactInfoByMyAdvantechProfile", New Object() {UserID, FirstName, LastName, UserType, JobFunction, JobTitle, Account, Country, WorkPhone, CellPhone, Fax, Password, NeverEmail, CanSeeOrder, CanPlaceOrder})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactInfoByMyAdvantechProfileAsync(ByVal UserID As String, ByVal FirstName As String, ByVal LastName As String, ByVal UserType As String, ByVal JobFunction As String, ByVal JobTitle As String, ByVal Account As String, ByVal Country As String, ByVal WorkPhone As String, ByVal CellPhone As String, ByVal Fax As String, ByVal Password As String, ByVal NeverEmail As String, ByVal CanSeeOrder As Boolean, ByVal CanPlaceOrder As Boolean)
            Me.UpdateContactInfoByMyAdvantechProfileAsync(UserID, FirstName, LastName, UserType, JobFunction, JobTitle, Account, Country, WorkPhone, CellPhone, Fax, Password, NeverEmail, CanSeeOrder, CanPlaceOrder, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactInfoByMyAdvantechProfileAsync( _
                    ByVal UserID As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal UserType As String,  _
                    ByVal JobFunction As String,  _
                    ByVal JobTitle As String,  _
                    ByVal Account As String,  _
                    ByVal Country As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal CellPhone As String,  _
                    ByVal Fax As String,  _
                    ByVal Password As String,  _
                    ByVal NeverEmail As String,  _
                    ByVal CanSeeOrder As Boolean,  _
                    ByVal CanPlaceOrder As Boolean,  _
                    ByVal userState As Object)
            If (Me.UpdateContactInfoByMyAdvantechProfileOperationCompleted Is Nothing) Then
                Me.UpdateContactInfoByMyAdvantechProfileOperationCompleted = AddressOf Me.OnUpdateContactInfoByMyAdvantechProfileOperationCompleted
            End If
            Me.InvokeAsync("UpdateContactInfoByMyAdvantechProfile", New Object() {UserID, FirstName, LastName, UserType, JobFunction, JobTitle, Account, Country, WorkPhone, CellPhone, Fax, Password, NeverEmail, CanSeeOrder, CanPlaceOrder}, Me.UpdateContactInfoByMyAdvantechProfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactInfoByMyAdvantechProfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactInfoByMyAdvantechProfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactInfoByMyAdvantechProfileCompleted(Me, New UpdateContactInfoByMyAdvantechProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateContactInfoByMyAdvantechProfile_New", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContactInfoByMyAdvantechProfile_New( _
                    ByVal UserID As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal UserType As String,  _
                    ByVal JobFunction As String,  _
                    ByVal JobTitle As String,  _
                    ByVal Account As String,  _
                    ByVal Country As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal CellPhone As String,  _
                    ByVal Fax As String,  _
                    ByVal Password As String,  _
                    ByVal NeverEmail As String,  _
                    ByVal CanSeeOrder As Boolean,  _
                    ByVal CanPlaceOrder As Boolean,  _
                    ByVal IsAccountAdmin As Boolean,  _
                    ByVal CanSeeCost As Boolean,  _
                    ByVal InterestedProduct As String,  _
                    ByVal BAA As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateContactInfoByMyAdvantechProfile_New", New Object() {UserID, FirstName, LastName, UserType, JobFunction, JobTitle, Account, Country, WorkPhone, CellPhone, Fax, Password, NeverEmail, CanSeeOrder, CanPlaceOrder, IsAccountAdmin, CanSeeCost, InterestedProduct, BAA})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactInfoByMyAdvantechProfile_NewAsync( _
                    ByVal UserID As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal UserType As String,  _
                    ByVal JobFunction As String,  _
                    ByVal JobTitle As String,  _
                    ByVal Account As String,  _
                    ByVal Country As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal CellPhone As String,  _
                    ByVal Fax As String,  _
                    ByVal Password As String,  _
                    ByVal NeverEmail As String,  _
                    ByVal CanSeeOrder As Boolean,  _
                    ByVal CanPlaceOrder As Boolean,  _
                    ByVal IsAccountAdmin As Boolean,  _
                    ByVal CanSeeCost As Boolean,  _
                    ByVal InterestedProduct As String,  _
                    ByVal BAA As String)
            Me.UpdateContactInfoByMyAdvantechProfile_NewAsync(UserID, FirstName, LastName, UserType, JobFunction, JobTitle, Account, Country, WorkPhone, CellPhone, Fax, Password, NeverEmail, CanSeeOrder, CanPlaceOrder, IsAccountAdmin, CanSeeCost, InterestedProduct, BAA, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactInfoByMyAdvantechProfile_NewAsync( _
                    ByVal UserID As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal UserType As String,  _
                    ByVal JobFunction As String,  _
                    ByVal JobTitle As String,  _
                    ByVal Account As String,  _
                    ByVal Country As String,  _
                    ByVal WorkPhone As String,  _
                    ByVal CellPhone As String,  _
                    ByVal Fax As String,  _
                    ByVal Password As String,  _
                    ByVal NeverEmail As String,  _
                    ByVal CanSeeOrder As Boolean,  _
                    ByVal CanPlaceOrder As Boolean,  _
                    ByVal IsAccountAdmin As Boolean,  _
                    ByVal CanSeeCost As Boolean,  _
                    ByVal InterestedProduct As String,  _
                    ByVal BAA As String,  _
                    ByVal userState As Object)
            If (Me.UpdateContactInfoByMyAdvantechProfile_NewOperationCompleted Is Nothing) Then
                Me.UpdateContactInfoByMyAdvantechProfile_NewOperationCompleted = AddressOf Me.OnUpdateContactInfoByMyAdvantechProfile_NewOperationCompleted
            End If
            Me.InvokeAsync("UpdateContactInfoByMyAdvantechProfile_New", New Object() {UserID, FirstName, LastName, UserType, JobFunction, JobTitle, Account, Country, WorkPhone, CellPhone, Fax, Password, NeverEmail, CanSeeOrder, CanPlaceOrder, IsAccountAdmin, CanSeeCost, InterestedProduct, BAA}, Me.UpdateContactInfoByMyAdvantechProfile_NewOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactInfoByMyAdvantechProfile_NewOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactInfoByMyAdvantechProfile_NewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactInfoByMyAdvantechProfile_NewCompleted(Me, New UpdateContactInfoByMyAdvantechProfile_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateContactProfile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContactProfile(ByVal UserID As String, ByVal AccountRowId As String, ByVal FirstName As String, ByVal LastName As String, ByVal JobFunction As String, ByVal CompanyName As String, ByVal Country As String, ByVal City As String, ByVal Address As String, ByVal Address2 As String, ByVal Zip As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateContactProfile", New Object() {UserID, AccountRowId, FirstName, LastName, JobFunction, CompanyName, Country, City, Address, Address2, Zip})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactProfileAsync(ByVal UserID As String, ByVal AccountRowId As String, ByVal FirstName As String, ByVal LastName As String, ByVal JobFunction As String, ByVal CompanyName As String, ByVal Country As String, ByVal City As String, ByVal Address As String, ByVal Address2 As String, ByVal Zip As String)
            Me.UpdateContactProfileAsync(UserID, AccountRowId, FirstName, LastName, JobFunction, CompanyName, Country, City, Address, Address2, Zip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactProfileAsync(ByVal UserID As String, ByVal AccountRowId As String, ByVal FirstName As String, ByVal LastName As String, ByVal JobFunction As String, ByVal CompanyName As String, ByVal Country As String, ByVal City As String, ByVal Address As String, ByVal Address2 As String, ByVal Zip As String, ByVal userState As Object)
            If (Me.UpdateContactProfileOperationCompleted Is Nothing) Then
                Me.UpdateContactProfileOperationCompleted = AddressOf Me.OnUpdateContactProfileOperationCompleted
            End If
            Me.InvokeAsync("UpdateContactProfile", New Object() {UserID, AccountRowId, FirstName, LastName, JobFunction, CompanyName, Country, City, Address, Address2, Zip}, Me.UpdateContactProfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactProfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactProfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactProfileCompleted(Me, New UpdateContactProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubscribeBAA", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubscribeBAA(ByVal Email As String, ByVal BAA As String, ByVal IsSubscribe As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("SubscribeBAA", New Object() {Email, BAA, IsSubscribe})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubscribeBAAAsync(ByVal Email As String, ByVal BAA As String, ByVal IsSubscribe As Boolean)
            Me.SubscribeBAAAsync(Email, BAA, IsSubscribe, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubscribeBAAAsync(ByVal Email As String, ByVal BAA As String, ByVal IsSubscribe As Boolean, ByVal userState As Object)
            If (Me.SubscribeBAAOperationCompleted Is Nothing) Then
                Me.SubscribeBAAOperationCompleted = AddressOf Me.OnSubscribeBAAOperationCompleted
            End If
            Me.InvokeAsync("SubscribeBAA", New Object() {Email, BAA, IsSubscribe}, Me.SubscribeBAAOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubscribeBAAOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubscribeBAACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubscribeBAACompleted(Me, New SubscribeBAACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAccountInfoByMyAdvantechProfile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAccountInfoByMyAdvantechProfile(ByVal AccountRowId As String, ByVal RBU As String, ByVal AccountName As String, ByVal Address As String, ByVal City As String, ByVal Country As String, ByVal ZipCode As String, ByVal PhoneNum As String, ByVal FaxNum As String, ByVal ERPId As String, ByVal AccountType As String, ByVal AccountStatus As String, ByVal URL As String, ByVal BizGrp As String, ByVal ParentAccountId As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateAccountInfoByMyAdvantechProfile", New Object() {AccountRowId, RBU, AccountName, Address, City, Country, ZipCode, PhoneNum, FaxNum, ERPId, AccountType, AccountStatus, URL, BizGrp, ParentAccountId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAccountInfoByMyAdvantechProfileAsync(ByVal AccountRowId As String, ByVal RBU As String, ByVal AccountName As String, ByVal Address As String, ByVal City As String, ByVal Country As String, ByVal ZipCode As String, ByVal PhoneNum As String, ByVal FaxNum As String, ByVal ERPId As String, ByVal AccountType As String, ByVal AccountStatus As String, ByVal URL As String, ByVal BizGrp As String, ByVal ParentAccountId As String)
            Me.UpdateAccountInfoByMyAdvantechProfileAsync(AccountRowId, RBU, AccountName, Address, City, Country, ZipCode, PhoneNum, FaxNum, ERPId, AccountType, AccountStatus, URL, BizGrp, ParentAccountId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAccountInfoByMyAdvantechProfileAsync( _
                    ByVal AccountRowId As String,  _
                    ByVal RBU As String,  _
                    ByVal AccountName As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal Country As String,  _
                    ByVal ZipCode As String,  _
                    ByVal PhoneNum As String,  _
                    ByVal FaxNum As String,  _
                    ByVal ERPId As String,  _
                    ByVal AccountType As String,  _
                    ByVal AccountStatus As String,  _
                    ByVal URL As String,  _
                    ByVal BizGrp As String,  _
                    ByVal ParentAccountId As String,  _
                    ByVal userState As Object)
            If (Me.UpdateAccountInfoByMyAdvantechProfileOperationCompleted Is Nothing) Then
                Me.UpdateAccountInfoByMyAdvantechProfileOperationCompleted = AddressOf Me.OnUpdateAccountInfoByMyAdvantechProfileOperationCompleted
            End If
            Me.InvokeAsync("UpdateAccountInfoByMyAdvantechProfile", New Object() {AccountRowId, RBU, AccountName, Address, City, Country, ZipCode, PhoneNum, FaxNum, ERPId, AccountType, AccountStatus, URL, BizGrp, ParentAccountId}, Me.UpdateAccountInfoByMyAdvantechProfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAccountInfoByMyAdvantechProfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAccountInfoByMyAdvantechProfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAccountInfoByMyAdvantechProfileCompleted(Me, New UpdateAccountInfoByMyAdvantechProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateAccount( _
                    ByVal strRegion As String,  _
                    ByVal strAccountID As String,  _
                    ByVal strName As String,  _
                    ByVal strSite As String,  _
                    ByVal strMainPhone As String,  _
                    ByVal strMainFax As String,  _
                    ByVal strAccountType As String,  _
                    ByVal strURL As String,  _
                    ByVal strAccountStatus As String,  _
                    ByVal strAccountTeam As String,  _
                    ByVal strCity As String,  _
                    ByVal strCountry As String,  _
                    ByVal strIndustry As String,  _
                    ByVal strZipCode As String,  _
                    ByVal strAddressLine1 As String,  _
                    ByVal strBAA As String,  _
                    ByVal strCurrency As String,  _
                    ByVal strPartner As String,  _
                    ByVal strOrganization As String,  _
                    ByRef Error_Message As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateAccount", New Object() {strRegion, strAccountID, strName, strSite, strMainPhone, strMainFax, strAccountType, strURL, strAccountStatus, strAccountTeam, strCity, strCountry, strIndustry, strZipCode, strAddressLine1, strBAA, strCurrency, strPartner, strOrganization, Error_Message})
            Error_Message = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateAccountAsync( _
                    ByVal strRegion As String,  _
                    ByVal strAccountID As String,  _
                    ByVal strName As String,  _
                    ByVal strSite As String,  _
                    ByVal strMainPhone As String,  _
                    ByVal strMainFax As String,  _
                    ByVal strAccountType As String,  _
                    ByVal strURL As String,  _
                    ByVal strAccountStatus As String,  _
                    ByVal strAccountTeam As String,  _
                    ByVal strCity As String,  _
                    ByVal strCountry As String,  _
                    ByVal strIndustry As String,  _
                    ByVal strZipCode As String,  _
                    ByVal strAddressLine1 As String,  _
                    ByVal strBAA As String,  _
                    ByVal strCurrency As String,  _
                    ByVal strPartner As String,  _
                    ByVal strOrganization As String,  _
                    ByVal Error_Message As String)
            Me.CreateAccountAsync(strRegion, strAccountID, strName, strSite, strMainPhone, strMainFax, strAccountType, strURL, strAccountStatus, strAccountTeam, strCity, strCountry, strIndustry, strZipCode, strAddressLine1, strBAA, strCurrency, strPartner, strOrganization, Error_Message, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateAccountAsync( _
                    ByVal strRegion As String,  _
                    ByVal strAccountID As String,  _
                    ByVal strName As String,  _
                    ByVal strSite As String,  _
                    ByVal strMainPhone As String,  _
                    ByVal strMainFax As String,  _
                    ByVal strAccountType As String,  _
                    ByVal strURL As String,  _
                    ByVal strAccountStatus As String,  _
                    ByVal strAccountTeam As String,  _
                    ByVal strCity As String,  _
                    ByVal strCountry As String,  _
                    ByVal strIndustry As String,  _
                    ByVal strZipCode As String,  _
                    ByVal strAddressLine1 As String,  _
                    ByVal strBAA As String,  _
                    ByVal strCurrency As String,  _
                    ByVal strPartner As String,  _
                    ByVal strOrganization As String,  _
                    ByVal Error_Message As String,  _
                    ByVal userState As Object)
            If (Me.CreateAccountOperationCompleted Is Nothing) Then
                Me.CreateAccountOperationCompleted = AddressOf Me.OnCreateAccountOperationCompleted
            End If
            Me.InvokeAsync("CreateAccount", New Object() {strRegion, strAccountID, strName, strSite, strMainPhone, strMainFax, strAccountType, strURL, strAccountStatus, strAccountTeam, strCity, strCountry, strIndustry, strZipCode, strAddressLine1, strBAA, strCurrency, strPartner, strOrganization, Error_Message}, Me.CreateAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateAccountCompleted(Me, New CreateAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateNewAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateNewAccount( _
                    ByVal strRegion As String,  _
                    ByVal strName As String,  _
                    ByVal strSite As String,  _
                    ByVal strMainPhone As String,  _
                    ByVal strMainFax As String,  _
                    ByVal strAccountType As String,  _
                    ByVal strURL As String,  _
                    ByVal strAccountStatus As String,  _
                    ByVal strAccountTeam As String,  _
                    ByVal strCity As String,  _
                    ByVal strCountry As String,  _
                    ByVal strZipCode As String,  _
                    ByVal strAddressLine1 As String,  _
                    ByVal strBAA As String,  _
                    ByVal strCurrency As String,  _
                    ByVal strPartner As String,  _
                    ByVal strOrganization As String,  _
                    ByVal strParentAccountID As String,  _
                    ByRef Error_Message As String) As String
            Dim results() As Object = Me.Invoke("CreateNewAccount", New Object() {strRegion, strName, strSite, strMainPhone, strMainFax, strAccountType, strURL, strAccountStatus, strAccountTeam, strCity, strCountry, strZipCode, strAddressLine1, strBAA, strCurrency, strPartner, strOrganization, strParentAccountID, Error_Message})
            Error_Message = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateNewAccountAsync( _
                    ByVal strRegion As String,  _
                    ByVal strName As String,  _
                    ByVal strSite As String,  _
                    ByVal strMainPhone As String,  _
                    ByVal strMainFax As String,  _
                    ByVal strAccountType As String,  _
                    ByVal strURL As String,  _
                    ByVal strAccountStatus As String,  _
                    ByVal strAccountTeam As String,  _
                    ByVal strCity As String,  _
                    ByVal strCountry As String,  _
                    ByVal strZipCode As String,  _
                    ByVal strAddressLine1 As String,  _
                    ByVal strBAA As String,  _
                    ByVal strCurrency As String,  _
                    ByVal strPartner As String,  _
                    ByVal strOrganization As String,  _
                    ByVal strParentAccountID As String,  _
                    ByVal Error_Message As String)
            Me.CreateNewAccountAsync(strRegion, strName, strSite, strMainPhone, strMainFax, strAccountType, strURL, strAccountStatus, strAccountTeam, strCity, strCountry, strZipCode, strAddressLine1, strBAA, strCurrency, strPartner, strOrganization, strParentAccountID, Error_Message, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateNewAccountAsync( _
                    ByVal strRegion As String,  _
                    ByVal strName As String,  _
                    ByVal strSite As String,  _
                    ByVal strMainPhone As String,  _
                    ByVal strMainFax As String,  _
                    ByVal strAccountType As String,  _
                    ByVal strURL As String,  _
                    ByVal strAccountStatus As String,  _
                    ByVal strAccountTeam As String,  _
                    ByVal strCity As String,  _
                    ByVal strCountry As String,  _
                    ByVal strZipCode As String,  _
                    ByVal strAddressLine1 As String,  _
                    ByVal strBAA As String,  _
                    ByVal strCurrency As String,  _
                    ByVal strPartner As String,  _
                    ByVal strOrganization As String,  _
                    ByVal strParentAccountID As String,  _
                    ByVal Error_Message As String,  _
                    ByVal userState As Object)
            If (Me.CreateNewAccountOperationCompleted Is Nothing) Then
                Me.CreateNewAccountOperationCompleted = AddressOf Me.OnCreateNewAccountOperationCompleted
            End If
            Me.InvokeAsync("CreateNewAccount", New Object() {strRegion, strName, strSite, strMainPhone, strMainFax, strAccountType, strURL, strAccountStatus, strAccountTeam, strCity, strCountry, strZipCode, strAddressLine1, strBAA, strCurrency, strPartner, strOrganization, strParentAccountID, Error_Message}, Me.CreateNewAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateNewAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateNewAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateNewAccountCompleted(Me, New CreateNewAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAccount", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAccount(ByVal AccountRowId As String, ByVal ERPId As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateAccount", New Object() {AccountRowId, ERPId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAccountAsync(ByVal AccountRowId As String, ByVal ERPId As String)
            Me.UpdateAccountAsync(AccountRowId, ERPId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAccountAsync(ByVal AccountRowId As String, ByVal ERPId As String, ByVal userState As Object)
            If (Me.UpdateAccountOperationCompleted Is Nothing) Then
                Me.UpdateAccountOperationCompleted = AddressOf Me.OnUpdateAccountOperationCompleted
            End If
            Me.InvokeAsync("UpdateAccount", New Object() {AccountRowId, ERPId}, Me.UpdateAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAccountCompleted(Me, New UpdateAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAccountV2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAccountV2(ByVal AccountRowId As String, ByVal ERPId As String) As String
            Dim results() As Object = Me.Invoke("UpdateAccountV2", New Object() {AccountRowId, ERPId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAccountV2Async(ByVal AccountRowId As String, ByVal ERPId As String)
            Me.UpdateAccountV2Async(AccountRowId, ERPId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAccountV2Async(ByVal AccountRowId As String, ByVal ERPId As String, ByVal userState As Object)
            If (Me.UpdateAccountV2OperationCompleted Is Nothing) Then
                Me.UpdateAccountV2OperationCompleted = AddressOf Me.OnUpdateAccountV2OperationCompleted
            End If
            Me.InvokeAsync("UpdateAccountV2", New Object() {AccountRowId, ERPId}, Me.UpdateAccountV2OperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAccountV2OperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAccountV2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAccountV2Completed(Me, New UpdateAccountV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccountInfo(ByVal account_name As String, ByVal erp_id As String, ByVal account_type As String, ByVal account_row_id As String) As String
            Dim results() As Object = Me.Invoke("GetAccountInfo", New Object() {account_name, erp_id, account_type, account_row_id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccountInfoAsync(ByVal account_name As String, ByVal erp_id As String, ByVal account_type As String, ByVal account_row_id As String)
            Me.GetAccountInfoAsync(account_name, erp_id, account_type, account_row_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountInfoAsync(ByVal account_name As String, ByVal erp_id As String, ByVal account_type As String, ByVal account_row_id As String, ByVal userState As Object)
            If (Me.GetAccountInfoOperationCompleted Is Nothing) Then
                Me.GetAccountInfoOperationCompleted = AddressOf Me.OnGetAccountInfoOperationCompleted
            End If
            Me.InvokeAsync("GetAccountInfo", New Object() {account_name, erp_id, account_type, account_row_id}, Me.GetAccountInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountInfoCompleted(Me, New GetAccountInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAccountBusinessGroup", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAccountBusinessGroup(ByVal RowId As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateAccountBusinessGroup", New Object() {RowId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAccountBusinessGroupAsync(ByVal RowId As String)
            Me.UpdateAccountBusinessGroupAsync(RowId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAccountBusinessGroupAsync(ByVal RowId As String, ByVal userState As Object)
            If (Me.UpdateAccountBusinessGroupOperationCompleted Is Nothing) Then
                Me.UpdateAccountBusinessGroupOperationCompleted = AddressOf Me.OnUpdateAccountBusinessGroupOperationCompleted
            End If
            Me.InvokeAsync("UpdateAccountBusinessGroup", New Object() {RowId}, Me.UpdateAccountBusinessGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAccountBusinessGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAccountBusinessGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAccountBusinessGroupCompleted(Me, New UpdateAccountBusinessGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateSiebelSR", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateSiebelSR(ByVal StrContactId As String, ByVal Abstract As String, ByVal Description As String, ByVal Type As String, ByVal Status As String, ByVal Category As String, ByVal Function_Type As String, ByVal Source As String, ByVal OWNER As String, ByVal Product_Model As String, ByVal OS As String) As String
            Dim results() As Object = Me.Invoke("CreateSiebelSR", New Object() {StrContactId, Abstract, Description, Type, Status, Category, Function_Type, Source, OWNER, Product_Model, OS})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelSRAsync(ByVal StrContactId As String, ByVal Abstract As String, ByVal Description As String, ByVal Type As String, ByVal Status As String, ByVal Category As String, ByVal Function_Type As String, ByVal Source As String, ByVal OWNER As String, ByVal Product_Model As String, ByVal OS As String)
            Me.CreateSiebelSRAsync(StrContactId, Abstract, Description, Type, Status, Category, Function_Type, Source, OWNER, Product_Model, OS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelSRAsync(ByVal StrContactId As String, ByVal Abstract As String, ByVal Description As String, ByVal Type As String, ByVal Status As String, ByVal Category As String, ByVal Function_Type As String, ByVal Source As String, ByVal OWNER As String, ByVal Product_Model As String, ByVal OS As String, ByVal userState As Object)
            If (Me.CreateSiebelSROperationCompleted Is Nothing) Then
                Me.CreateSiebelSROperationCompleted = AddressOf Me.OnCreateSiebelSROperationCompleted
            End If
            Me.InvokeAsync("CreateSiebelSR", New Object() {StrContactId, Abstract, Description, Type, Status, Category, Function_Type, Source, OWNER, Product_Model, OS}, Me.CreateSiebelSROperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateSiebelSROperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateSiebelSRCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateSiebelSRCompleted(Me, New CreateSiebelSRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateSiebelQuotation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateSiebelQuotation(ByRef Qrow_id As String, ByRef Q_No As String, ByVal quote_desc As String, ByVal cur As String, ByVal del_date1 As String, ByVal quote_note As String, ByVal customer_name As String, ByVal sales_Email As String, ByVal QuoteDetail As System.Data.DataSet, ByRef Error_Message As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateSiebelQuotation", New Object() {Qrow_id, Q_No, quote_desc, cur, del_date1, quote_note, customer_name, sales_Email, QuoteDetail, Error_Message})
            Qrow_id = CType(results(1),String)
            Q_No = CType(results(2),String)
            Error_Message = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelQuotationAsync(ByVal Qrow_id As String, ByVal Q_No As String, ByVal quote_desc As String, ByVal cur As String, ByVal del_date1 As String, ByVal quote_note As String, ByVal customer_name As String, ByVal sales_Email As String, ByVal QuoteDetail As System.Data.DataSet, ByVal Error_Message As String)
            Me.CreateSiebelQuotationAsync(Qrow_id, Q_No, quote_desc, cur, del_date1, quote_note, customer_name, sales_Email, QuoteDetail, Error_Message, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelQuotationAsync(ByVal Qrow_id As String, ByVal Q_No As String, ByVal quote_desc As String, ByVal cur As String, ByVal del_date1 As String, ByVal quote_note As String, ByVal customer_name As String, ByVal sales_Email As String, ByVal QuoteDetail As System.Data.DataSet, ByVal Error_Message As String, ByVal userState As Object)
            If (Me.CreateSiebelQuotationOperationCompleted Is Nothing) Then
                Me.CreateSiebelQuotationOperationCompleted = AddressOf Me.OnCreateSiebelQuotationOperationCompleted
            End If
            Me.InvokeAsync("CreateSiebelQuotation", New Object() {Qrow_id, Q_No, quote_desc, cur, del_date1, quote_note, customer_name, sales_Email, QuoteDetail, Error_Message}, Me.CreateSiebelQuotationOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateSiebelQuotationOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateSiebelQuotationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateSiebelQuotationCompleted(Me, New CreateSiebelQuotationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateSiebelQuotationWithOpportunity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateSiebelQuotationWithOpportunity(ByRef Qrow_id As String, ByRef Q_No As String, ByVal quote_desc As String, ByVal cur As String, ByVal del_date1 As String, ByVal quote_note As String, ByVal customer_name As String, ByVal sales_Email As String, ByVal QuoteDetail As System.Data.DataSet, ByVal OptyID As String, ByVal LoginName As String, ByRef Error_Message As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateSiebelQuotationWithOpportunity", New Object() {Qrow_id, Q_No, quote_desc, cur, del_date1, quote_note, customer_name, sales_Email, QuoteDetail, OptyID, LoginName, Error_Message})
            Qrow_id = CType(results(1),String)
            Q_No = CType(results(2),String)
            Error_Message = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelQuotationWithOpportunityAsync(ByVal Qrow_id As String, ByVal Q_No As String, ByVal quote_desc As String, ByVal cur As String, ByVal del_date1 As String, ByVal quote_note As String, ByVal customer_name As String, ByVal sales_Email As String, ByVal QuoteDetail As System.Data.DataSet, ByVal OptyID As String, ByVal LoginName As String, ByVal Error_Message As String)
            Me.CreateSiebelQuotationWithOpportunityAsync(Qrow_id, Q_No, quote_desc, cur, del_date1, quote_note, customer_name, sales_Email, QuoteDetail, OptyID, LoginName, Error_Message, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelQuotationWithOpportunityAsync(ByVal Qrow_id As String, ByVal Q_No As String, ByVal quote_desc As String, ByVal cur As String, ByVal del_date1 As String, ByVal quote_note As String, ByVal customer_name As String, ByVal sales_Email As String, ByVal QuoteDetail As System.Data.DataSet, ByVal OptyID As String, ByVal LoginName As String, ByVal Error_Message As String, ByVal userState As Object)
            If (Me.CreateSiebelQuotationWithOpportunityOperationCompleted Is Nothing) Then
                Me.CreateSiebelQuotationWithOpportunityOperationCompleted = AddressOf Me.OnCreateSiebelQuotationWithOpportunityOperationCompleted
            End If
            Me.InvokeAsync("CreateSiebelQuotationWithOpportunity", New Object() {Qrow_id, Q_No, quote_desc, cur, del_date1, quote_note, customer_name, sales_Email, QuoteDetail, OptyID, LoginName, Error_Message}, Me.CreateSiebelQuotationWithOpportunityOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateSiebelQuotationWithOpportunityOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateSiebelQuotationWithOpportunityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateSiebelQuotationWithOpportunityCompleted(Me, New CreateSiebelQuotationWithOpportunityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateSiebelQuotationWithOpportunity2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateSiebelQuotationWithOpportunity2(ByRef Qrow_id As String, ByRef Q_No As String, ByVal quote_desc As String, ByVal cur As String, ByVal del_date1 As String, ByVal quote_note As String, ByVal account_row_id As String, ByVal sales_Email As String, ByVal QuoteDetail As System.Data.DataSet, ByVal OptyID As String, ByVal LoginName As String, ByRef Error_Message As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateSiebelQuotationWithOpportunity2", New Object() {Qrow_id, Q_No, quote_desc, cur, del_date1, quote_note, account_row_id, sales_Email, QuoteDetail, OptyID, LoginName, Error_Message})
            Qrow_id = CType(results(1),String)
            Q_No = CType(results(2),String)
            Error_Message = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelQuotationWithOpportunity2Async(ByVal Qrow_id As String, ByVal Q_No As String, ByVal quote_desc As String, ByVal cur As String, ByVal del_date1 As String, ByVal quote_note As String, ByVal account_row_id As String, ByVal sales_Email As String, ByVal QuoteDetail As System.Data.DataSet, ByVal OptyID As String, ByVal LoginName As String, ByVal Error_Message As String)
            Me.CreateSiebelQuotationWithOpportunity2Async(Qrow_id, Q_No, quote_desc, cur, del_date1, quote_note, account_row_id, sales_Email, QuoteDetail, OptyID, LoginName, Error_Message, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelQuotationWithOpportunity2Async(ByVal Qrow_id As String, ByVal Q_No As String, ByVal quote_desc As String, ByVal cur As String, ByVal del_date1 As String, ByVal quote_note As String, ByVal account_row_id As String, ByVal sales_Email As String, ByVal QuoteDetail As System.Data.DataSet, ByVal OptyID As String, ByVal LoginName As String, ByVal Error_Message As String, ByVal userState As Object)
            If (Me.CreateSiebelQuotationWithOpportunity2OperationCompleted Is Nothing) Then
                Me.CreateSiebelQuotationWithOpportunity2OperationCompleted = AddressOf Me.OnCreateSiebelQuotationWithOpportunity2OperationCompleted
            End If
            Me.InvokeAsync("CreateSiebelQuotationWithOpportunity2", New Object() {Qrow_id, Q_No, quote_desc, cur, del_date1, quote_note, account_row_id, sales_Email, QuoteDetail, OptyID, LoginName, Error_Message}, Me.CreateSiebelQuotationWithOpportunity2OperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateSiebelQuotationWithOpportunity2OperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateSiebelQuotationWithOpportunity2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateSiebelQuotationWithOpportunity2Completed(Me, New CreateSiebelQuotationWithOpportunity2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateSiebelQuotationWithOpportunity3", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateSiebelQuotationWithOpportunity3(ByRef Qrow_id As String, ByRef Q_No As String, ByVal quote_desc As String, ByVal cur As String, ByVal del_date1 As String, ByVal quote_note As String, ByVal account_row_id As String, ByVal sales_Email As String, ByVal QuoteDetail As System.Data.DataSet, ByVal OptyID As String, ByVal LoginName As String, ByVal Org As String, ByRef Error_Message As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateSiebelQuotationWithOpportunity3", New Object() {Qrow_id, Q_No, quote_desc, cur, del_date1, quote_note, account_row_id, sales_Email, QuoteDetail, OptyID, LoginName, Org, Error_Message})
            Qrow_id = CType(results(1),String)
            Q_No = CType(results(2),String)
            Error_Message = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelQuotationWithOpportunity3Async(ByVal Qrow_id As String, ByVal Q_No As String, ByVal quote_desc As String, ByVal cur As String, ByVal del_date1 As String, ByVal quote_note As String, ByVal account_row_id As String, ByVal sales_Email As String, ByVal QuoteDetail As System.Data.DataSet, ByVal OptyID As String, ByVal LoginName As String, ByVal Org As String, ByVal Error_Message As String)
            Me.CreateSiebelQuotationWithOpportunity3Async(Qrow_id, Q_No, quote_desc, cur, del_date1, quote_note, account_row_id, sales_Email, QuoteDetail, OptyID, LoginName, Org, Error_Message, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateSiebelQuotationWithOpportunity3Async(ByVal Qrow_id As String, ByVal Q_No As String, ByVal quote_desc As String, ByVal cur As String, ByVal del_date1 As String, ByVal quote_note As String, ByVal account_row_id As String, ByVal sales_Email As String, ByVal QuoteDetail As System.Data.DataSet, ByVal OptyID As String, ByVal LoginName As String, ByVal Org As String, ByVal Error_Message As String, ByVal userState As Object)
            If (Me.CreateSiebelQuotationWithOpportunity3OperationCompleted Is Nothing) Then
                Me.CreateSiebelQuotationWithOpportunity3OperationCompleted = AddressOf Me.OnCreateSiebelQuotationWithOpportunity3OperationCompleted
            End If
            Me.InvokeAsync("CreateSiebelQuotationWithOpportunity3", New Object() {Qrow_id, Q_No, quote_desc, cur, del_date1, quote_note, account_row_id, sales_Email, QuoteDetail, OptyID, LoginName, Org, Error_Message}, Me.CreateSiebelQuotationWithOpportunity3OperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateSiebelQuotationWithOpportunity3OperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateSiebelQuotationWithOpportunity3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateSiebelQuotationWithOpportunity3Completed(Me, New CreateSiebelQuotationWithOpportunity3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateQuoteOwner", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateQuoteOwner(ByVal QuoteId As String, ByVal SalesRepPostnId As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateQuoteOwner", New Object() {QuoteId, SalesRepPostnId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateQuoteOwnerAsync(ByVal QuoteId As String, ByVal SalesRepPostnId As String)
            Me.UpdateQuoteOwnerAsync(QuoteId, SalesRepPostnId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateQuoteOwnerAsync(ByVal QuoteId As String, ByVal SalesRepPostnId As String, ByVal userState As Object)
            If (Me.UpdateQuoteOwnerOperationCompleted Is Nothing) Then
                Me.UpdateQuoteOwnerOperationCompleted = AddressOf Me.OnUpdateQuoteOwnerOperationCompleted
            End If
            Me.InvokeAsync("UpdateQuoteOwner", New Object() {QuoteId, SalesRepPostnId}, Me.UpdateQuoteOwnerOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateQuoteOwnerOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateQuoteOwnerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateQuoteOwnerCompleted(Me, New UpdateQuoteOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateNewContactCompletedEventHandler(ByVal sender As Object, ByVal e As CreateNewContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateNewContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateMyAdvantechProfileCompletedEventHandler(ByVal sender As Object, ByVal e As CreateMyAdvantechProfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateMyAdvantechProfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateNewContact_NewCompletedEventHandler(ByVal sender As Object, ByVal e As CreateNewContact_NewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateNewContact_NewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateSiebelActivityCompletedEventHandler(ByVal sender As Object, ByVal e As CreateSiebelActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateSiebelActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateSiebelActivityWithOptyCompletedEventHandler(ByVal sender As Object, ByVal e As CreateSiebelActivityWithOptyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateSiebelActivityWithOptyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateActivityWithOwnerAccountContactCompletedEventHandler(ByVal sender As Object, ByVal e As CreateActivityWithOwnerAccountContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateActivityWithOwnerAccountContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateSiebelActivityCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSiebelActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSiebelActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateOpportunityPartnerContact2CompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOpportunityPartnerContact2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOpportunityPartnerContact2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateSourceNameCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSourceNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSourceNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetOptyDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetOptyDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOptyDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteOptyForecastCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteOptyForecastCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteOptyForecastCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ImportOptyForecastCompletedEventHandler(ByVal sender As Object, ByVal e As ImportOptyForecastCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportOptyForecastCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Import_OpportunityNewCompletedEventHandler(ByVal sender As Object, ByVal e As Import_OpportunityNewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Import_OpportunityNewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateOpportunityStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOpportunityStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOpportunityStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateOpportunityStageCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOpportunityStageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOpportunityStageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateOpportunityStage_ProjCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOpportunityStage_ProjCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOpportunityStage_ProjCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateOpportunityStatus2CompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOpportunityStatus2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOpportunityStatus2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateOpportunityPartnerContactCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOpportunityPartnerContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOpportunityPartnerContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateOpportunityPartnerContactIdCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOpportunityPartnerContactIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOpportunityPartnerContactIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateOpportunityStatusAmtCloseDateProbCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOpportunityStatusAmtCloseDateProbCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOpportunityStatusAmtCloseDateProbCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateOpportunityCompletedEventHandler(ByVal sender As Object, ByVal e As CreateOpportunityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateOpportunityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateSiebelOpportunityCompletedEventHandler(ByVal sender As Object, ByVal e As CreateSiebelOpportunityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateSiebelOpportunityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateNewOpportunityCompletedEventHandler(ByVal sender As Object, ByVal e As CreateNewOpportunityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateNewOpportunityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateNewOpportunity4QuoteCompletedEventHandler(ByVal sender As Object, ByVal e As CreateNewOpportunity4QuoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateNewOpportunity4QuoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Import_OpportunityCompletedEventHandler(ByVal sender As Object, ByVal e As Import_OpportunityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Import_OpportunityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateOpportunityCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOpportunityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOpportunityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateOpportunityStatusOldCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOpportunityStatusOldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOpportunityStatusOldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateOpportunityStatusRevenueCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOpportunityStatusRevenueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOpportunityStatusRevenueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateSiebelOpportunityCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSiebelOpportunityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSiebelOpportunityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateOpportunityOrgCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOpportunityOrgCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOpportunityOrgCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ImportOpportunityCompletedEventHandler(ByVal sender As Object, ByVal e As ImportOpportunityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportOpportunityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ImportOpportunityV2CompletedEventHandler(ByVal sender As Object, ByVal e As ImportOpportunityV2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportOpportunityV2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Oppty_RowID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrorStr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SubscribeENews2CompletedEventHandler(ByVal sender As Object, ByVal e As SubscribeENews2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubscribeENews2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateContactNeverEmailCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactNeverEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactNeverEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AssociateContactToAccountCompletedEventHandler(ByVal sender As Object, ByVal e As AssociateContactToAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssociateContactToAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateContactDisableCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactDisableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactDisableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SubscribeProductCompletedEventHandler(ByVal sender As Object, ByVal e As SubscribeProductCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubscribeProductCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateContactInfoByMyAdvantechProfileCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactInfoByMyAdvantechProfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactInfoByMyAdvantechProfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateContactInfoByMyAdvantechProfile_NewCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactInfoByMyAdvantechProfile_NewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactInfoByMyAdvantechProfile_NewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateContactProfileCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactProfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactProfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SubscribeBAACompletedEventHandler(ByVal sender As Object, ByVal e As SubscribeBAACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubscribeBAACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateAccountInfoByMyAdvantechProfileCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAccountInfoByMyAdvantechProfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAccountInfoByMyAdvantechProfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateAccountCompletedEventHandler(ByVal sender As Object, ByVal e As CreateAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Error_Message() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateNewAccountCompletedEventHandler(ByVal sender As Object, ByVal e As CreateNewAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateNewAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Error_Message() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateAccountCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateAccountV2CompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAccountV2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAccountV2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAccountInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateAccountBusinessGroupCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAccountBusinessGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAccountBusinessGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateSiebelSRCompletedEventHandler(ByVal sender As Object, ByVal e As CreateSiebelSRCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateSiebelSRCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateSiebelQuotationCompletedEventHandler(ByVal sender As Object, ByVal e As CreateSiebelQuotationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateSiebelQuotationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Qrow_id() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Q_No() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Error_Message() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateSiebelQuotationWithOpportunityCompletedEventHandler(ByVal sender As Object, ByVal e As CreateSiebelQuotationWithOpportunityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateSiebelQuotationWithOpportunityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Qrow_id() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Q_No() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Error_Message() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateSiebelQuotationWithOpportunity2CompletedEventHandler(ByVal sender As Object, ByVal e As CreateSiebelQuotationWithOpportunity2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateSiebelQuotationWithOpportunity2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Qrow_id() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Q_No() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Error_Message() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateSiebelQuotationWithOpportunity3CompletedEventHandler(ByVal sender As Object, ByVal e As CreateSiebelQuotationWithOpportunity3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateSiebelQuotationWithOpportunity3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Qrow_id() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Q_No() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Error_Message() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateQuoteOwnerCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateQuoteOwnerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateQuoteOwnerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
