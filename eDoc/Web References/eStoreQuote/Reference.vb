'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
'
Namespace eStoreQuote
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="eStoreWebServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class eStoreWebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private isSellOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isCTOSProductOperationCompleted As System.Threading.SendOrPostCallback
        
        Private orderableProductURLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isOrderableProductOperationCompleted As System.Threading.SendOrPostCallback
        
        Private iseStoreProductOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isSellBetaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isCTOSProductBetaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private orderableProductURLBetaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isOrderableProductBetaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private iseStoreProductBetaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private link2eStoreByCountryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private link2eStoreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProductPageLinkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private releaseStoreCacheProductOperationCompleted As System.Threading.SendOrPostCallback
        
        Private releaseStoreCacheProductCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private releaseStoreCacheStoreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private releaseAlleStoreCacheOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IP2NationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getUrlByCountryAndReferenceUrlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getQuotationsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getQuotationInforOperationCompleted As System.Threading.SendOrPostCallback
        
        Private generateSAPCustomerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.EDOC.My.MySettings.Default.EDOC_eStoreQuote_eStoreWebService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event isSellCompleted As isSellCompletedEventHandler
        
        '''<remarks/>
        Public Event isCTOSProductCompleted As isCTOSProductCompletedEventHandler
        
        '''<remarks/>
        Public Event orderableProductURLCompleted As orderableProductURLCompletedEventHandler
        
        '''<remarks/>
        Public Event isOrderableProductCompleted As isOrderableProductCompletedEventHandler
        
        '''<remarks/>
        Public Event iseStoreProductCompleted As iseStoreProductCompletedEventHandler
        
        '''<remarks/>
        Public Event isSellBetaCompleted As isSellBetaCompletedEventHandler
        
        '''<remarks/>
        Public Event isCTOSProductBetaCompleted As isCTOSProductBetaCompletedEventHandler
        
        '''<remarks/>
        Public Event orderableProductURLBetaCompleted As orderableProductURLBetaCompletedEventHandler
        
        '''<remarks/>
        Public Event isOrderableProductBetaCompleted As isOrderableProductBetaCompletedEventHandler
        
        '''<remarks/>
        Public Event iseStoreProductBetaCompleted As iseStoreProductBetaCompletedEventHandler
        
        '''<remarks/>
        Public Event link2eStoreByCountryCompleted As link2eStoreByCountryCompletedEventHandler
        
        '''<remarks/>
        Public Event link2eStoreCompleted As link2eStoreCompletedEventHandler
        
        '''<remarks/>
        Public Event getProductPageLinkCompleted As getProductPageLinkCompletedEventHandler
        
        '''<remarks/>
        Public Event releaseStoreCacheProductCompleted As releaseStoreCacheProductCompletedEventHandler
        
        '''<remarks/>
        Public Event releaseStoreCacheProductCategoryCompleted As releaseStoreCacheProductCategoryCompletedEventHandler
        
        '''<remarks/>
        Public Event releaseStoreCacheStoreCompleted As releaseStoreCacheStoreCompletedEventHandler
        
        '''<remarks/>
        Public Event releaseAlleStoreCacheCompleted As releaseAlleStoreCacheCompletedEventHandler
        
        '''<remarks/>
        Public Event IP2NationCompleted As IP2NationCompletedEventHandler
        
        '''<remarks/>
        Public Event getUrlByCountryAndReferenceUrlCompleted As getUrlByCountryAndReferenceUrlCompletedEventHandler
        
        '''<remarks/>
        Public Event getQuotationsCompleted As getQuotationsCompletedEventHandler
        
        '''<remarks/>
        Public Event getQuotationInforCompleted As getQuotationInforCompletedEventHandler
        
        '''<remarks/>
        Public Event generateSAPCustomerCompleted As generateSAPCustomerCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isSell", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isSell(ByVal storeid As String, ByVal PartNo As String) As Boolean
            Dim results() As Object = Me.Invoke("isSell", New Object() {storeid, PartNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isSellAsync(ByVal storeid As String, ByVal PartNo As String)
            Me.isSellAsync(storeid, PartNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isSellAsync(ByVal storeid As String, ByVal PartNo As String, ByVal userState As Object)
            If (Me.isSellOperationCompleted Is Nothing) Then
                Me.isSellOperationCompleted = AddressOf Me.OnisSellOperationCompleted
            End If
            Me.InvokeAsync("isSell", New Object() {storeid, PartNo}, Me.isSellOperationCompleted, userState)
        End Sub
        
        Private Sub OnisSellOperationCompleted(ByVal arg As Object)
            If (Not (Me.isSellCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isSellCompleted(Me, New isSellCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isCTOSProduct", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isCTOSProduct(ByVal PartNo As String, ByVal storeid As String) As Boolean
            Dim results() As Object = Me.Invoke("isCTOSProduct", New Object() {PartNo, storeid})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isCTOSProductAsync(ByVal PartNo As String, ByVal storeid As String)
            Me.isCTOSProductAsync(PartNo, storeid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isCTOSProductAsync(ByVal PartNo As String, ByVal storeid As String, ByVal userState As Object)
            If (Me.isCTOSProductOperationCompleted Is Nothing) Then
                Me.isCTOSProductOperationCompleted = AddressOf Me.OnisCTOSProductOperationCompleted
            End If
            Me.InvokeAsync("isCTOSProduct", New Object() {PartNo, storeid}, Me.isCTOSProductOperationCompleted, userState)
        End Sub
        
        Private Sub OnisCTOSProductOperationCompleted(ByVal arg As Object)
            If (Not (Me.isCTOSProductCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isCTOSProductCompleted(Me, New isCTOSProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/orderableProductURL", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function orderableProductURL(ByVal PartNumber As String, ByVal storeid As String) As String
            Dim results() As Object = Me.Invoke("orderableProductURL", New Object() {PartNumber, storeid})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub orderableProductURLAsync(ByVal PartNumber As String, ByVal storeid As String)
            Me.orderableProductURLAsync(PartNumber, storeid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub orderableProductURLAsync(ByVal PartNumber As String, ByVal storeid As String, ByVal userState As Object)
            If (Me.orderableProductURLOperationCompleted Is Nothing) Then
                Me.orderableProductURLOperationCompleted = AddressOf Me.OnorderableProductURLOperationCompleted
            End If
            Me.InvokeAsync("orderableProductURL", New Object() {PartNumber, storeid}, Me.orderableProductURLOperationCompleted, userState)
        End Sub
        
        Private Sub OnorderableProductURLOperationCompleted(ByVal arg As Object)
            If (Not (Me.orderableProductURLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent orderableProductURLCompleted(Me, New orderableProductURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isOrderableProduct", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isOrderableProduct(ByVal PartNumber As String, ByVal storeid As String) As Boolean
            Dim results() As Object = Me.Invoke("isOrderableProduct", New Object() {PartNumber, storeid})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isOrderableProductAsync(ByVal PartNumber As String, ByVal storeid As String)
            Me.isOrderableProductAsync(PartNumber, storeid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isOrderableProductAsync(ByVal PartNumber As String, ByVal storeid As String, ByVal userState As Object)
            If (Me.isOrderableProductOperationCompleted Is Nothing) Then
                Me.isOrderableProductOperationCompleted = AddressOf Me.OnisOrderableProductOperationCompleted
            End If
            Me.InvokeAsync("isOrderableProduct", New Object() {PartNumber, storeid}, Me.isOrderableProductOperationCompleted, userState)
        End Sub
        
        Private Sub OnisOrderableProductOperationCompleted(ByVal arg As Object)
            If (Not (Me.isOrderableProductCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isOrderableProductCompleted(Me, New isOrderableProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/iseStoreProduct", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function iseStoreProduct(ByVal PartNo As String, ByVal storeid As String, ByRef buildsystemlink As String) As <System.Xml.Serialization.XmlElementAttribute("standardProductlink")> String
            Dim results() As Object = Me.Invoke("iseStoreProduct", New Object() {PartNo, storeid})
            buildsystemlink = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub iseStoreProductAsync(ByVal PartNo As String, ByVal storeid As String)
            Me.iseStoreProductAsync(PartNo, storeid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub iseStoreProductAsync(ByVal PartNo As String, ByVal storeid As String, ByVal userState As Object)
            If (Me.iseStoreProductOperationCompleted Is Nothing) Then
                Me.iseStoreProductOperationCompleted = AddressOf Me.OniseStoreProductOperationCompleted
            End If
            Me.InvokeAsync("iseStoreProduct", New Object() {PartNo, storeid}, Me.iseStoreProductOperationCompleted, userState)
        End Sub
        
        Private Sub OniseStoreProductOperationCompleted(ByVal arg As Object)
            If (Not (Me.iseStoreProductCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent iseStoreProductCompleted(Me, New iseStoreProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isSellBeta", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isSellBeta(ByVal storeid As String, ByVal ip As String, ByVal PartNo As String) As Boolean
            Dim results() As Object = Me.Invoke("isSellBeta", New Object() {storeid, ip, PartNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isSellBetaAsync(ByVal storeid As String, ByVal ip As String, ByVal PartNo As String)
            Me.isSellBetaAsync(storeid, ip, PartNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isSellBetaAsync(ByVal storeid As String, ByVal ip As String, ByVal PartNo As String, ByVal userState As Object)
            If (Me.isSellBetaOperationCompleted Is Nothing) Then
                Me.isSellBetaOperationCompleted = AddressOf Me.OnisSellBetaOperationCompleted
            End If
            Me.InvokeAsync("isSellBeta", New Object() {storeid, ip, PartNo}, Me.isSellBetaOperationCompleted, userState)
        End Sub
        
        Private Sub OnisSellBetaOperationCompleted(ByVal arg As Object)
            If (Not (Me.isSellBetaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isSellBetaCompleted(Me, New isSellBetaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isCTOSProductBeta", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isCTOSProductBeta(ByVal storeid As String, ByVal ip As String, ByVal PartNo As String) As Boolean
            Dim results() As Object = Me.Invoke("isCTOSProductBeta", New Object() {storeid, ip, PartNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isCTOSProductBetaAsync(ByVal storeid As String, ByVal ip As String, ByVal PartNo As String)
            Me.isCTOSProductBetaAsync(storeid, ip, PartNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isCTOSProductBetaAsync(ByVal storeid As String, ByVal ip As String, ByVal PartNo As String, ByVal userState As Object)
            If (Me.isCTOSProductBetaOperationCompleted Is Nothing) Then
                Me.isCTOSProductBetaOperationCompleted = AddressOf Me.OnisCTOSProductBetaOperationCompleted
            End If
            Me.InvokeAsync("isCTOSProductBeta", New Object() {storeid, ip, PartNo}, Me.isCTOSProductBetaOperationCompleted, userState)
        End Sub
        
        Private Sub OnisCTOSProductBetaOperationCompleted(ByVal arg As Object)
            If (Not (Me.isCTOSProductBetaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isCTOSProductBetaCompleted(Me, New isCTOSProductBetaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/orderableProductURLBeta", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function orderableProductURLBeta(ByVal storeid As String, ByVal ip As String, ByVal PartNumber As String) As String
            Dim results() As Object = Me.Invoke("orderableProductURLBeta", New Object() {storeid, ip, PartNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub orderableProductURLBetaAsync(ByVal storeid As String, ByVal ip As String, ByVal PartNumber As String)
            Me.orderableProductURLBetaAsync(storeid, ip, PartNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub orderableProductURLBetaAsync(ByVal storeid As String, ByVal ip As String, ByVal PartNumber As String, ByVal userState As Object)
            If (Me.orderableProductURLBetaOperationCompleted Is Nothing) Then
                Me.orderableProductURLBetaOperationCompleted = AddressOf Me.OnorderableProductURLBetaOperationCompleted
            End If
            Me.InvokeAsync("orderableProductURLBeta", New Object() {storeid, ip, PartNumber}, Me.orderableProductURLBetaOperationCompleted, userState)
        End Sub
        
        Private Sub OnorderableProductURLBetaOperationCompleted(ByVal arg As Object)
            If (Not (Me.orderableProductURLBetaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent orderableProductURLBetaCompleted(Me, New orderableProductURLBetaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isOrderableProductBeta", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isOrderableProductBeta(ByVal storeid As String, ByVal ip As String, ByVal PartNumber As String) As Boolean
            Dim results() As Object = Me.Invoke("isOrderableProductBeta", New Object() {storeid, ip, PartNumber})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isOrderableProductBetaAsync(ByVal storeid As String, ByVal ip As String, ByVal PartNumber As String)
            Me.isOrderableProductBetaAsync(storeid, ip, PartNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isOrderableProductBetaAsync(ByVal storeid As String, ByVal ip As String, ByVal PartNumber As String, ByVal userState As Object)
            If (Me.isOrderableProductBetaOperationCompleted Is Nothing) Then
                Me.isOrderableProductBetaOperationCompleted = AddressOf Me.OnisOrderableProductBetaOperationCompleted
            End If
            Me.InvokeAsync("isOrderableProductBeta", New Object() {storeid, ip, PartNumber}, Me.isOrderableProductBetaOperationCompleted, userState)
        End Sub
        
        Private Sub OnisOrderableProductBetaOperationCompleted(ByVal arg As Object)
            If (Not (Me.isOrderableProductBetaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isOrderableProductBetaCompleted(Me, New isOrderableProductBetaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/iseStoreProductBeta", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function iseStoreProductBeta(ByVal storeid As String, ByVal ip As String, ByVal PartNo As String, ByRef buildsystemlink As String) As <System.Xml.Serialization.XmlElementAttribute("standardProductlink")> String
            Dim results() As Object = Me.Invoke("iseStoreProductBeta", New Object() {storeid, ip, PartNo})
            buildsystemlink = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub iseStoreProductBetaAsync(ByVal storeid As String, ByVal ip As String, ByVal PartNo As String)
            Me.iseStoreProductBetaAsync(storeid, ip, PartNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub iseStoreProductBetaAsync(ByVal storeid As String, ByVal ip As String, ByVal PartNo As String, ByVal userState As Object)
            If (Me.iseStoreProductBetaOperationCompleted Is Nothing) Then
                Me.iseStoreProductBetaOperationCompleted = AddressOf Me.OniseStoreProductBetaOperationCompleted
            End If
            Me.InvokeAsync("iseStoreProductBeta", New Object() {storeid, ip, PartNo}, Me.iseStoreProductBetaOperationCompleted, userState)
        End Sub
        
        Private Sub OniseStoreProductBetaOperationCompleted(ByVal arg As Object)
            If (Not (Me.iseStoreProductBetaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent iseStoreProductBetaCompleted(Me, New iseStoreProductBetaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/link2eStoreByCountry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function link2eStoreByCountry(ByVal country As String, ByVal modelNO As String, ByVal productids() As String) As String
            Dim results() As Object = Me.Invoke("link2eStoreByCountry", New Object() {country, modelNO, productids})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub link2eStoreByCountryAsync(ByVal country As String, ByVal modelNO As String, ByVal productids() As String)
            Me.link2eStoreByCountryAsync(country, modelNO, productids, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub link2eStoreByCountryAsync(ByVal country As String, ByVal modelNO As String, ByVal productids() As String, ByVal userState As Object)
            If (Me.link2eStoreByCountryOperationCompleted Is Nothing) Then
                Me.link2eStoreByCountryOperationCompleted = AddressOf Me.Onlink2eStoreByCountryOperationCompleted
            End If
            Me.InvokeAsync("link2eStoreByCountry", New Object() {country, modelNO, productids}, Me.link2eStoreByCountryOperationCompleted, userState)
        End Sub
        
        Private Sub Onlink2eStoreByCountryOperationCompleted(ByVal arg As Object)
            If (Not (Me.link2eStoreByCountryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent link2eStoreByCountryCompleted(Me, New link2eStoreByCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/link2eStore", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function link2eStore(ByVal storeid As String, ByVal ip As String, ByVal modelNO As String, ByVal productids() As String) As String
            Dim results() As Object = Me.Invoke("link2eStore", New Object() {storeid, ip, modelNO, productids})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub link2eStoreAsync(ByVal storeid As String, ByVal ip As String, ByVal modelNO As String, ByVal productids() As String)
            Me.link2eStoreAsync(storeid, ip, modelNO, productids, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub link2eStoreAsync(ByVal storeid As String, ByVal ip As String, ByVal modelNO As String, ByVal productids() As String, ByVal userState As Object)
            If (Me.link2eStoreOperationCompleted Is Nothing) Then
                Me.link2eStoreOperationCompleted = AddressOf Me.Onlink2eStoreOperationCompleted
            End If
            Me.InvokeAsync("link2eStore", New Object() {storeid, ip, modelNO, productids}, Me.link2eStoreOperationCompleted, userState)
        End Sub
        
        Private Sub Onlink2eStoreOperationCompleted(ByVal arg As Object)
            If (Not (Me.link2eStoreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent link2eStoreCompleted(Me, New link2eStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getProductPageLink", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProductPageLink(ByVal storeid As String, ByVal productid As String) As String
            Dim results() As Object = Me.Invoke("getProductPageLink", New Object() {storeid, productid})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProductPageLinkAsync(ByVal storeid As String, ByVal productid As String)
            Me.getProductPageLinkAsync(storeid, productid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProductPageLinkAsync(ByVal storeid As String, ByVal productid As String, ByVal userState As Object)
            If (Me.getProductPageLinkOperationCompleted Is Nothing) Then
                Me.getProductPageLinkOperationCompleted = AddressOf Me.OngetProductPageLinkOperationCompleted
            End If
            Me.InvokeAsync("getProductPageLink", New Object() {storeid, productid}, Me.getProductPageLinkOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProductPageLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProductPageLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProductPageLinkCompleted(Me, New getProductPageLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/releaseStoreCacheProduct", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub releaseStoreCacheProduct(ByVal SProductID As String)
            Me.Invoke("releaseStoreCacheProduct", New Object() {SProductID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub releaseStoreCacheProductAsync(ByVal SProductID As String)
            Me.releaseStoreCacheProductAsync(SProductID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub releaseStoreCacheProductAsync(ByVal SProductID As String, ByVal userState As Object)
            If (Me.releaseStoreCacheProductOperationCompleted Is Nothing) Then
                Me.releaseStoreCacheProductOperationCompleted = AddressOf Me.OnreleaseStoreCacheProductOperationCompleted
            End If
            Me.InvokeAsync("releaseStoreCacheProduct", New Object() {SProductID}, Me.releaseStoreCacheProductOperationCompleted, userState)
        End Sub
        
        Private Sub OnreleaseStoreCacheProductOperationCompleted(ByVal arg As Object)
            If (Not (Me.releaseStoreCacheProductCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent releaseStoreCacheProductCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/releaseStoreCacheProductCategory", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub releaseStoreCacheProductCategory(ByVal CategoryPath As String, ByVal CategoryID As String)
            Me.Invoke("releaseStoreCacheProductCategory", New Object() {CategoryPath, CategoryID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub releaseStoreCacheProductCategoryAsync(ByVal CategoryPath As String, ByVal CategoryID As String)
            Me.releaseStoreCacheProductCategoryAsync(CategoryPath, CategoryID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub releaseStoreCacheProductCategoryAsync(ByVal CategoryPath As String, ByVal CategoryID As String, ByVal userState As Object)
            If (Me.releaseStoreCacheProductCategoryOperationCompleted Is Nothing) Then
                Me.releaseStoreCacheProductCategoryOperationCompleted = AddressOf Me.OnreleaseStoreCacheProductCategoryOperationCompleted
            End If
            Me.InvokeAsync("releaseStoreCacheProductCategory", New Object() {CategoryPath, CategoryID}, Me.releaseStoreCacheProductCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnreleaseStoreCacheProductCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.releaseStoreCacheProductCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent releaseStoreCacheProductCategoryCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/releaseStoreCacheStore", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub releaseStoreCacheStore(ByVal storeID As String, ByVal storeURL As String)
            Me.Invoke("releaseStoreCacheStore", New Object() {storeID, storeURL})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub releaseStoreCacheStoreAsync(ByVal storeID As String, ByVal storeURL As String)
            Me.releaseStoreCacheStoreAsync(storeID, storeURL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub releaseStoreCacheStoreAsync(ByVal storeID As String, ByVal storeURL As String, ByVal userState As Object)
            If (Me.releaseStoreCacheStoreOperationCompleted Is Nothing) Then
                Me.releaseStoreCacheStoreOperationCompleted = AddressOf Me.OnreleaseStoreCacheStoreOperationCompleted
            End If
            Me.InvokeAsync("releaseStoreCacheStore", New Object() {storeID, storeURL}, Me.releaseStoreCacheStoreOperationCompleted, userState)
        End Sub
        
        Private Sub OnreleaseStoreCacheStoreOperationCompleted(ByVal arg As Object)
            If (Not (Me.releaseStoreCacheStoreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent releaseStoreCacheStoreCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/releaseAlleStoreCache", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub releaseAlleStoreCache()
            Me.Invoke("releaseAlleStoreCache", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub releaseAlleStoreCacheAsync()
            Me.releaseAlleStoreCacheAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub releaseAlleStoreCacheAsync(ByVal userState As Object)
            If (Me.releaseAlleStoreCacheOperationCompleted Is Nothing) Then
                Me.releaseAlleStoreCacheOperationCompleted = AddressOf Me.OnreleaseAlleStoreCacheOperationCompleted
            End If
            Me.InvokeAsync("releaseAlleStoreCache", New Object(-1) {}, Me.releaseAlleStoreCacheOperationCompleted, userState)
        End Sub
        
        Private Sub OnreleaseAlleStoreCacheOperationCompleted(ByVal arg As Object)
            If (Not (Me.releaseAlleStoreCacheCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent releaseAlleStoreCacheCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IP2Nation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IP2Nation(ByVal UserHostAddress As String) As String
            Dim results() As Object = Me.Invoke("IP2Nation", New Object() {UserHostAddress})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IP2NationAsync(ByVal UserHostAddress As String)
            Me.IP2NationAsync(UserHostAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IP2NationAsync(ByVal UserHostAddress As String, ByVal userState As Object)
            If (Me.IP2NationOperationCompleted Is Nothing) Then
                Me.IP2NationOperationCompleted = AddressOf Me.OnIP2NationOperationCompleted
            End If
            Me.InvokeAsync("IP2Nation", New Object() {UserHostAddress}, Me.IP2NationOperationCompleted, userState)
        End Sub
        
        Private Sub OnIP2NationOperationCompleted(ByVal arg As Object)
            If (Not (Me.IP2NationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IP2NationCompleted(Me, New IP2NationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getUrlByCountryAndReferenceUrl", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getUrlByCountryAndReferenceUrl(ByVal countryName As String, ByVal referenceUrl As String) As String
            Dim results() As Object = Me.Invoke("getUrlByCountryAndReferenceUrl", New Object() {countryName, referenceUrl})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUrlByCountryAndReferenceUrlAsync(ByVal countryName As String, ByVal referenceUrl As String)
            Me.getUrlByCountryAndReferenceUrlAsync(countryName, referenceUrl, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUrlByCountryAndReferenceUrlAsync(ByVal countryName As String, ByVal referenceUrl As String, ByVal userState As Object)
            If (Me.getUrlByCountryAndReferenceUrlOperationCompleted Is Nothing) Then
                Me.getUrlByCountryAndReferenceUrlOperationCompleted = AddressOf Me.OngetUrlByCountryAndReferenceUrlOperationCompleted
            End If
            Me.InvokeAsync("getUrlByCountryAndReferenceUrl", New Object() {countryName, referenceUrl}, Me.getUrlByCountryAndReferenceUrlOperationCompleted, userState)
        End Sub
        
        Private Sub OngetUrlByCountryAndReferenceUrlOperationCompleted(ByVal arg As Object)
            If (Not (Me.getUrlByCountryAndReferenceUrlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUrlByCountryAndReferenceUrlCompleted(Me, New getUrlByCountryAndReferenceUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getQuotations", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getQuotations(ByVal DMF As String, ByVal startdate As String, ByVal enddate As String, ByVal Company As String, ByVal email As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("getQuotations", New Object() {DMF, startdate, enddate, Company, email})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getQuotationsAsync(ByVal DMF As String, ByVal startdate As String, ByVal enddate As String, ByVal Company As String, ByVal email As String)
            Me.getQuotationsAsync(DMF, startdate, enddate, Company, email, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getQuotationsAsync(ByVal DMF As String, ByVal startdate As String, ByVal enddate As String, ByVal Company As String, ByVal email As String, ByVal userState As Object)
            If (Me.getQuotationsOperationCompleted Is Nothing) Then
                Me.getQuotationsOperationCompleted = AddressOf Me.OngetQuotationsOperationCompleted
            End If
            Me.InvokeAsync("getQuotations", New Object() {DMF, startdate, enddate, Company, email}, Me.getQuotationsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetQuotationsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getQuotationsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getQuotationsCompleted(Me, New getQuotationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getQuotationInfor", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getQuotationInfor(ByVal quotationNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getQuotationInfor", New Object() {quotationNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getQuotationInforAsync(ByVal quotationNo As String)
            Me.getQuotationInforAsync(quotationNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getQuotationInforAsync(ByVal quotationNo As String, ByVal userState As Object)
            If (Me.getQuotationInforOperationCompleted Is Nothing) Then
                Me.getQuotationInforOperationCompleted = AddressOf Me.OngetQuotationInforOperationCompleted
            End If
            Me.InvokeAsync("getQuotationInfor", New Object() {quotationNo}, Me.getQuotationInforOperationCompleted, userState)
        End Sub
        
        Private Sub OngetQuotationInforOperationCompleted(ByVal arg As Object)
            If (Not (Me.getQuotationInforCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getQuotationInforCompleted(Me, New getQuotationInforCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/generateSAPCustomer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function generateSAPCustomer(ByVal orderNo As String, ByVal applicationId As String) As String
            Dim results() As Object = Me.Invoke("generateSAPCustomer", New Object() {orderNo, applicationId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub generateSAPCustomerAsync(ByVal orderNo As String, ByVal applicationId As String)
            Me.generateSAPCustomerAsync(orderNo, applicationId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub generateSAPCustomerAsync(ByVal orderNo As String, ByVal applicationId As String, ByVal userState As Object)
            If (Me.generateSAPCustomerOperationCompleted Is Nothing) Then
                Me.generateSAPCustomerOperationCompleted = AddressOf Me.OngenerateSAPCustomerOperationCompleted
            End If
            Me.InvokeAsync("generateSAPCustomer", New Object() {orderNo, applicationId}, Me.generateSAPCustomerOperationCompleted, userState)
        End Sub
        
        Private Sub OngenerateSAPCustomerOperationCompleted(ByVal arg As Object)
            If (Not (Me.generateSAPCustomerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent generateSAPCustomerCompleted(Me, New generateSAPCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub isSellCompletedEventHandler(ByVal sender As Object, ByVal e As isSellCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isSellCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub isCTOSProductCompletedEventHandler(ByVal sender As Object, ByVal e As isCTOSProductCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isCTOSProductCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub orderableProductURLCompletedEventHandler(ByVal sender As Object, ByVal e As orderableProductURLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class orderableProductURLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub isOrderableProductCompletedEventHandler(ByVal sender As Object, ByVal e As isOrderableProductCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isOrderableProductCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub iseStoreProductCompletedEventHandler(ByVal sender As Object, ByVal e As iseStoreProductCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class iseStoreProductCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property buildsystemlink() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub isSellBetaCompletedEventHandler(ByVal sender As Object, ByVal e As isSellBetaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isSellBetaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub isCTOSProductBetaCompletedEventHandler(ByVal sender As Object, ByVal e As isCTOSProductBetaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isCTOSProductBetaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub orderableProductURLBetaCompletedEventHandler(ByVal sender As Object, ByVal e As orderableProductURLBetaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class orderableProductURLBetaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub isOrderableProductBetaCompletedEventHandler(ByVal sender As Object, ByVal e As isOrderableProductBetaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isOrderableProductBetaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub iseStoreProductBetaCompletedEventHandler(ByVal sender As Object, ByVal e As iseStoreProductBetaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class iseStoreProductBetaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property buildsystemlink() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub link2eStoreByCountryCompletedEventHandler(ByVal sender As Object, ByVal e As link2eStoreByCountryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class link2eStoreByCountryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub link2eStoreCompletedEventHandler(ByVal sender As Object, ByVal e As link2eStoreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class link2eStoreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getProductPageLinkCompletedEventHandler(ByVal sender As Object, ByVal e As getProductPageLinkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProductPageLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub releaseStoreCacheProductCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub releaseStoreCacheProductCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub releaseStoreCacheStoreCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub releaseAlleStoreCacheCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub IP2NationCompletedEventHandler(ByVal sender As Object, ByVal e As IP2NationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IP2NationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getUrlByCountryAndReferenceUrlCompletedEventHandler(ByVal sender As Object, ByVal e As getUrlByCountryAndReferenceUrlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getUrlByCountryAndReferenceUrlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getQuotationsCompletedEventHandler(ByVal sender As Object, ByVal e As getQuotationsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getQuotationsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getQuotationInforCompletedEventHandler(ByVal sender As Object, ByVal e As getQuotationInforCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getQuotationInforCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub generateSAPCustomerCompletedEventHandler(ByVal sender As Object, ByVal e As generateSAPCustomerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class generateSAPCustomerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
