'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
'
Namespace SAPWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="eBizAEU_WSSoap", [Namespace]:="eBizAEU")>  _
    Partial Public Class eBizAEU_WS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private HelloKittyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrdTrkSpeedByMailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSAPOrderBillToOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddSAPCustomerContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSAPCustomerContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSAPCustomerAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiPriceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiPrice_Old_20110907OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiPrice_OldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiPrice2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.EDOC.My.MySettings.Default.EDOC_SAPWS_eBizAEU_WS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event HelloKittyCompleted As HelloKittyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrdTrkSpeedByMailCompleted As GetOrdTrkSpeedByMailCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSAPOrderBillToCompleted As UpdateSAPOrderBillToCompletedEventHandler
        
        '''<remarks/>
        Public Event AddSAPCustomerContactCompleted As AddSAPCustomerContactCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSAPCustomerContactCompleted As UpdateSAPCustomerContactCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSAPCustomerAddressCompleted As UpdateSAPCustomerAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiPriceCompleted As GetMultiPriceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiPrice_Old_20110907Completed As GetMultiPrice_Old_20110907CompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiPrice_OldCompleted As GetMultiPrice_OldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiPrice2Completed As GetMultiPrice2CompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/HelloKitty", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloKitty() As String
            Dim results() As Object = Me.Invoke("HelloKitty", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HelloKittyAsync()
            Me.HelloKittyAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloKittyAsync(ByVal userState As Object)
            If (Me.HelloKittyOperationCompleted Is Nothing) Then
                Me.HelloKittyOperationCompleted = AddressOf Me.OnHelloKittyOperationCompleted
            End If
            Me.InvokeAsync("HelloKitty", New Object(-1) {}, Me.HelloKittyOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloKittyOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloKittyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloKittyCompleted(Me, New HelloKittyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/GetOrdTrkSpeedByMail", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrdTrkSpeedByMail(ByVal VKORG As String, ByVal DATEB As String, ByVal DATEE As String, ByVal email As String, ByVal MATNR As String, ByVal BSTNK As String, ByVal VBELN As String, ByRef strADONETXMLout As String) As Integer
            Dim results() As Object = Me.Invoke("GetOrdTrkSpeedByMail", New Object() {VKORG, DATEB, DATEE, email, MATNR, BSTNK, VBELN, strADONETXMLout})
            strADONETXMLout = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrdTrkSpeedByMailAsync(ByVal VKORG As String, ByVal DATEB As String, ByVal DATEE As String, ByVal email As String, ByVal MATNR As String, ByVal BSTNK As String, ByVal VBELN As String, ByVal strADONETXMLout As String)
            Me.GetOrdTrkSpeedByMailAsync(VKORG, DATEB, DATEE, email, MATNR, BSTNK, VBELN, strADONETXMLout, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrdTrkSpeedByMailAsync(ByVal VKORG As String, ByVal DATEB As String, ByVal DATEE As String, ByVal email As String, ByVal MATNR As String, ByVal BSTNK As String, ByVal VBELN As String, ByVal strADONETXMLout As String, ByVal userState As Object)
            If (Me.GetOrdTrkSpeedByMailOperationCompleted Is Nothing) Then
                Me.GetOrdTrkSpeedByMailOperationCompleted = AddressOf Me.OnGetOrdTrkSpeedByMailOperationCompleted
            End If
            Me.InvokeAsync("GetOrdTrkSpeedByMail", New Object() {VKORG, DATEB, DATEE, email, MATNR, BSTNK, VBELN, strADONETXMLout}, Me.GetOrdTrkSpeedByMailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrdTrkSpeedByMailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrdTrkSpeedByMailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrdTrkSpeedByMailCompleted(Me, New GetOrdTrkSpeedByMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/UpdateSAPOrderBillTo", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSAPOrderBillTo(ByVal Doc_Number As String, ByVal BillToID As String, ByRef strErrMsg As String, ByRef SAPReturnTable As System.Data.DataTable) As Boolean
            Dim results() As Object = Me.Invoke("UpdateSAPOrderBillTo", New Object() {Doc_Number, BillToID, strErrMsg, SAPReturnTable})
            strErrMsg = CType(results(1),String)
            SAPReturnTable = CType(results(2),System.Data.DataTable)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSAPOrderBillToAsync(ByVal Doc_Number As String, ByVal BillToID As String, ByVal strErrMsg As String, ByVal SAPReturnTable As System.Data.DataTable)
            Me.UpdateSAPOrderBillToAsync(Doc_Number, BillToID, strErrMsg, SAPReturnTable, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSAPOrderBillToAsync(ByVal Doc_Number As String, ByVal BillToID As String, ByVal strErrMsg As String, ByVal SAPReturnTable As System.Data.DataTable, ByVal userState As Object)
            If (Me.UpdateSAPOrderBillToOperationCompleted Is Nothing) Then
                Me.UpdateSAPOrderBillToOperationCompleted = AddressOf Me.OnUpdateSAPOrderBillToOperationCompleted
            End If
            Me.InvokeAsync("UpdateSAPOrderBillTo", New Object() {Doc_Number, BillToID, strErrMsg, SAPReturnTable}, Me.UpdateSAPOrderBillToOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSAPOrderBillToOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSAPOrderBillToCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSAPOrderBillToCompleted(Me, New UpdateSAPOrderBillToCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/AddSAPCustomerContact", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddSAPCustomerContact(ByVal CompanyId As String, ByVal Email As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("AddSAPCustomerContact", New Object() {CompanyId, Email, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddSAPCustomerContactAsync(ByVal CompanyId As String, ByVal Email As String, ByVal ErrMsg As String)
            Me.AddSAPCustomerContactAsync(CompanyId, Email, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddSAPCustomerContactAsync(ByVal CompanyId As String, ByVal Email As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.AddSAPCustomerContactOperationCompleted Is Nothing) Then
                Me.AddSAPCustomerContactOperationCompleted = AddressOf Me.OnAddSAPCustomerContactOperationCompleted
            End If
            Me.InvokeAsync("AddSAPCustomerContact", New Object() {CompanyId, Email, ErrMsg}, Me.AddSAPCustomerContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddSAPCustomerContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddSAPCustomerContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddSAPCustomerContactCompleted(Me, New AddSAPCustomerContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/UpdateSAPCustomerContact", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSAPCustomerContact(ByVal CompanyId As String, ByVal NewEmail As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateSAPCustomerContact", New Object() {CompanyId, NewEmail, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSAPCustomerContactAsync(ByVal CompanyId As String, ByVal NewEmail As String, ByVal ErrMsg As String)
            Me.UpdateSAPCustomerContactAsync(CompanyId, NewEmail, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSAPCustomerContactAsync(ByVal CompanyId As String, ByVal NewEmail As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.UpdateSAPCustomerContactOperationCompleted Is Nothing) Then
                Me.UpdateSAPCustomerContactOperationCompleted = AddressOf Me.OnUpdateSAPCustomerContactOperationCompleted
            End If
            Me.InvokeAsync("UpdateSAPCustomerContact", New Object() {CompanyId, NewEmail, ErrMsg}, Me.UpdateSAPCustomerContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSAPCustomerContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSAPCustomerContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSAPCustomerContactCompleted(Me, New UpdateSAPCustomerContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/UpdateSAPCustomerAddress", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSAPCustomerAddress(ByVal CompanyId As String, ByVal NameCO As String, ByVal CompanyName As String, ByVal Street As String, ByVal City As String, ByVal PostalCode As String, ByVal TaxJuriCode As String, ByRef ErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateSAPCustomerAddress", New Object() {CompanyId, NameCO, CompanyName, Street, City, PostalCode, TaxJuriCode, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSAPCustomerAddressAsync(ByVal CompanyId As String, ByVal NameCO As String, ByVal CompanyName As String, ByVal Street As String, ByVal City As String, ByVal PostalCode As String, ByVal TaxJuriCode As String, ByVal ErrMsg As String)
            Me.UpdateSAPCustomerAddressAsync(CompanyId, NameCO, CompanyName, Street, City, PostalCode, TaxJuriCode, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSAPCustomerAddressAsync(ByVal CompanyId As String, ByVal NameCO As String, ByVal CompanyName As String, ByVal Street As String, ByVal City As String, ByVal PostalCode As String, ByVal TaxJuriCode As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.UpdateSAPCustomerAddressOperationCompleted Is Nothing) Then
                Me.UpdateSAPCustomerAddressOperationCompleted = AddressOf Me.OnUpdateSAPCustomerAddressOperationCompleted
            End If
            Me.InvokeAsync("UpdateSAPCustomerAddress", New Object() {CompanyId, NameCO, CompanyName, Street, City, PostalCode, TaxJuriCode, ErrMsg}, Me.UpdateSAPCustomerAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSAPCustomerAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSAPCustomerAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSAPCustomerAddressCompleted(Me, New UpdateSAPCustomerAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/GetMultiPrice", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiPrice(ByVal Org As String, ByVal CompanyId As String, ByVal Products As System.Data.DataTable, ByRef ErrorMessage As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMultiPrice", New Object() {Org, CompanyId, Products, ErrorMessage})
            ErrorMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiPriceAsync(ByVal Org As String, ByVal CompanyId As String, ByVal Products As System.Data.DataTable, ByVal ErrorMessage As String)
            Me.GetMultiPriceAsync(Org, CompanyId, Products, ErrorMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiPriceAsync(ByVal Org As String, ByVal CompanyId As String, ByVal Products As System.Data.DataTable, ByVal ErrorMessage As String, ByVal userState As Object)
            If (Me.GetMultiPriceOperationCompleted Is Nothing) Then
                Me.GetMultiPriceOperationCompleted = AddressOf Me.OnGetMultiPriceOperationCompleted
            End If
            Me.InvokeAsync("GetMultiPrice", New Object() {Org, CompanyId, Products, ErrorMessage}, Me.GetMultiPriceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiPriceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiPriceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiPriceCompleted(Me, New GetMultiPriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/GetMultiPrice_Old_20110907", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiPrice_Old_20110907(ByVal Org As String, ByVal CompanyId As String, ByVal Products As System.Data.DataTable, ByRef ErrorMessage As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMultiPrice_Old_20110907", New Object() {Org, CompanyId, Products, ErrorMessage})
            ErrorMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiPrice_Old_20110907Async(ByVal Org As String, ByVal CompanyId As String, ByVal Products As System.Data.DataTable, ByVal ErrorMessage As String)
            Me.GetMultiPrice_Old_20110907Async(Org, CompanyId, Products, ErrorMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiPrice_Old_20110907Async(ByVal Org As String, ByVal CompanyId As String, ByVal Products As System.Data.DataTable, ByVal ErrorMessage As String, ByVal userState As Object)
            If (Me.GetMultiPrice_Old_20110907OperationCompleted Is Nothing) Then
                Me.GetMultiPrice_Old_20110907OperationCompleted = AddressOf Me.OnGetMultiPrice_Old_20110907OperationCompleted
            End If
            Me.InvokeAsync("GetMultiPrice_Old_20110907", New Object() {Org, CompanyId, Products, ErrorMessage}, Me.GetMultiPrice_Old_20110907OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiPrice_Old_20110907OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiPrice_Old_20110907CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiPrice_Old_20110907Completed(Me, New GetMultiPrice_Old_20110907CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/GetMultiPrice_Old", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiPrice_Old(ByVal Org As String, ByVal CompanyId As String, ByVal Products As System.Data.DataTable, ByRef ErrorMessage As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMultiPrice_Old", New Object() {Org, CompanyId, Products, ErrorMessage})
            ErrorMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiPrice_OldAsync(ByVal Org As String, ByVal CompanyId As String, ByVal Products As System.Data.DataTable, ByVal ErrorMessage As String)
            Me.GetMultiPrice_OldAsync(Org, CompanyId, Products, ErrorMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiPrice_OldAsync(ByVal Org As String, ByVal CompanyId As String, ByVal Products As System.Data.DataTable, ByVal ErrorMessage As String, ByVal userState As Object)
            If (Me.GetMultiPrice_OldOperationCompleted Is Nothing) Then
                Me.GetMultiPrice_OldOperationCompleted = AddressOf Me.OnGetMultiPrice_OldOperationCompleted
            End If
            Me.InvokeAsync("GetMultiPrice_Old", New Object() {Org, CompanyId, Products, ErrorMessage}, Me.GetMultiPrice_OldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiPrice_OldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiPrice_OldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiPrice_OldCompleted(Me, New GetMultiPrice_OldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("eBizAEU/GetMultiPrice2", RequestNamespace:="eBizAEU", ResponseNamespace:="eBizAEU", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiPrice2(ByVal Org As String, ByVal CompanyId As String, ByVal Products As System.Data.DataTable, ByVal PricingDate As Date, ByRef ErrorMessage As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMultiPrice2", New Object() {Org, CompanyId, Products, PricingDate, ErrorMessage})
            ErrorMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiPrice2Async(ByVal Org As String, ByVal CompanyId As String, ByVal Products As System.Data.DataTable, ByVal PricingDate As Date, ByVal ErrorMessage As String)
            Me.GetMultiPrice2Async(Org, CompanyId, Products, PricingDate, ErrorMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiPrice2Async(ByVal Org As String, ByVal CompanyId As String, ByVal Products As System.Data.DataTable, ByVal PricingDate As Date, ByVal ErrorMessage As String, ByVal userState As Object)
            If (Me.GetMultiPrice2OperationCompleted Is Nothing) Then
                Me.GetMultiPrice2OperationCompleted = AddressOf Me.OnGetMultiPrice2OperationCompleted
            End If
            Me.InvokeAsync("GetMultiPrice2", New Object() {Org, CompanyId, Products, PricingDate, ErrorMessage}, Me.GetMultiPrice2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiPrice2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiPrice2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiPrice2Completed(Me, New GetMultiPrice2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub HelloKittyCompletedEventHandler(ByVal sender As Object, ByVal e As HelloKittyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloKittyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetOrdTrkSpeedByMailCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrdTrkSpeedByMailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrdTrkSpeedByMailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strADONETXMLout() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateSAPOrderBillToCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSAPOrderBillToCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSAPOrderBillToCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property SAPReturnTable() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddSAPCustomerContactCompletedEventHandler(ByVal sender As Object, ByVal e As AddSAPCustomerContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddSAPCustomerContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateSAPCustomerContactCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSAPCustomerContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSAPCustomerContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateSAPCustomerAddressCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSAPCustomerAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSAPCustomerAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiPriceCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiPriceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiPriceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrorMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiPrice_Old_20110907CompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiPrice_Old_20110907CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiPrice_Old_20110907CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrorMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiPrice_OldCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiPrice_OldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiPrice_OldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrorMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMultiPrice2CompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiPrice2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiPrice2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrorMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
End Namespace
