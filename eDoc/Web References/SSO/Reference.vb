'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
'
Namespace SSO
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="MembershipWebserviceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class MembershipWebservice
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private loginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private loginAndCheckLevelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private loginForEUMyAdvantechOperationCompleted As System.Threading.SendOrPostCallback
        
        Private validateTempidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private validateTemidEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private validateLoginEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getMasterProfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProductInterestListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProfile_byFieldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private updProfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private updProfileByDataSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private updProfileOnlyBasicInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private logoutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLatestCZMemberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private chkReqFieldsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Siebel_updatePWDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Siebel_updateCommentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Siebel_updateOrgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Siebel_savecontactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Siebel_getcontactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertMemberLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertMemberLog2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLeadsRoutingAdminEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAdminEmailForRMAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAdminEmailByCountryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGeneralEmailByCountryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAdminEmailForPZOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddActivityWithWSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddOnlineRequestWithWSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddOnlineRequestV2WithWSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddActivityWithEmployeeEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddActivityWithEmployeeEmailToRegionalServerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddActivityWithEmployeeEmailAndAcitivtyTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddServiceRequestWithAEEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddServiceRequestWithWSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddServiceRequestWithAEEmailNotifyEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAddSRDescriptionByRowIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSimpleFormLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getServiceCenterEmailByCountryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private registerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCountryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCountryListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCountryByCountryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getRegionByCountryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getStateListByCountryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private updateOppSalesStageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private updateOppOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getOppListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Add_OppOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckEUZipCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DisableUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EnableUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isEmployeeForWebsitesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendMailToAdminOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendMailToAdmin2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendNotificationPasswordUpdatedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.EDOC.My.MySettings.Default.EDOC_SSO_MembershipWebservice
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event loginCompleted As loginCompletedEventHandler
        
        '''<remarks/>
        Public Event loginAndCheckLevelCompleted As loginAndCheckLevelCompletedEventHandler
        
        '''<remarks/>
        Public Event loginForEUMyAdvantechCompleted As loginForEUMyAdvantechCompletedEventHandler
        
        '''<remarks/>
        Public Event validateTempidCompleted As validateTempidCompletedEventHandler
        
        '''<remarks/>
        Public Event validateTemidEmailCompleted As validateTemidEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event validateLoginEmailCompleted As validateLoginEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event getProfileCompleted As getProfileCompletedEventHandler
        
        '''<remarks/>
        Public Event isExistCompleted As isExistCompletedEventHandler
        
        '''<remarks/>
        Public Event getMasterProfileCompleted As getMasterProfileCompletedEventHandler
        
        '''<remarks/>
        Public Event getProductInterestListCompleted As getProductInterestListCompletedEventHandler
        
        '''<remarks/>
        Public Event getProfile_byFieldCompleted As getProfile_byFieldCompletedEventHandler
        
        '''<remarks/>
        Public Event updProfileCompleted As updProfileCompletedEventHandler
        
        '''<remarks/>
        Public Event updProfileByDataSetCompleted As updProfileByDataSetCompletedEventHandler
        
        '''<remarks/>
        Public Event updProfileOnlyBasicInfoCompleted As updProfileOnlyBasicInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event logoutCompleted As logoutCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLatestCZMemberCompleted As GetLatestCZMemberCompletedEventHandler
        
        '''<remarks/>
        Public Event chkReqFieldsCompleted As chkReqFieldsCompletedEventHandler
        
        '''<remarks/>
        Public Event Siebel_updatePWDCompleted As Siebel_updatePWDCompletedEventHandler
        
        '''<remarks/>
        Public Event Siebel_updateCommentCompleted As Siebel_updateCommentCompletedEventHandler
        
        '''<remarks/>
        Public Event Siebel_updateOrgCompleted As Siebel_updateOrgCompletedEventHandler
        
        '''<remarks/>
        Public Event Siebel_savecontactCompleted As Siebel_savecontactCompletedEventHandler
        
        '''<remarks/>
        Public Event Siebel_getcontactCompleted As Siebel_getcontactCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertMemberLogCompleted As InsertMemberLogCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertMemberLog2Completed As InsertMemberLog2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetLeadsRoutingAdminEmailCompleted As GetLeadsRoutingAdminEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAdminEmailForRMACompleted As GetAdminEmailForRMACompletedEventHandler
        
        '''<remarks/>
        Public Event GetAdminEmailByCountryCompleted As GetAdminEmailByCountryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGeneralEmailByCountryCompleted As GetGeneralEmailByCountryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAdminEmailForPZCompleted As GetAdminEmailForPZCompletedEventHandler
        
        '''<remarks/>
        Public Event AddActivityCompleted As AddActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event AddActivityWithWSCompleted As AddActivityWithWSCompletedEventHandler
        
        '''<remarks/>
        Public Event AddOnlineRequestWithWSCompleted As AddOnlineRequestWithWSCompletedEventHandler
        
        '''<remarks/>
        Public Event AddOnlineRequestV2WithWSCompleted As AddOnlineRequestV2WithWSCompletedEventHandler
        
        '''<remarks/>
        Public Event AddActivityWithEmployeeEmailCompleted As AddActivityWithEmployeeEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event AddActivityWithEmployeeEmailToRegionalServerCompleted As AddActivityWithEmployeeEmailToRegionalServerCompletedEventHandler
        
        '''<remarks/>
        Public Event AddActivityWithEmployeeEmailAndAcitivtyTypeCompleted As AddActivityWithEmployeeEmailAndAcitivtyTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerCompleted As AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerCompletedEventHandler
        
        '''<remarks/>
        Public Event AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerCompleted As AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerCompletedEventHandler
        
        '''<remarks/>
        Public Event AddServiceRequestWithAEEmailCompleted As AddServiceRequestWithAEEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event AddServiceRequestWithWSCompleted As AddServiceRequestWithWSCompletedEventHandler
        
        '''<remarks/>
        Public Event AddServiceRequestWithAEEmailNotifyEmailCompleted As AddServiceRequestWithAEEmailNotifyEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event getAddSRDescriptionByRowIDCompleted As getAddSRDescriptionByRowIDCompletedEventHandler
        
        '''<remarks/>
        Public Event getSimpleFormLogCompleted As getSimpleFormLogCompletedEventHandler
        
        '''<remarks/>
        Public Event getServiceCenterEmailByCountryCompleted As getServiceCenterEmailByCountryCompletedEventHandler
        
        '''<remarks/>
        Public Event registerCompleted As registerCompletedEventHandler
        
        '''<remarks/>
        Public Event getCountryCompleted As getCountryCompletedEventHandler
        
        '''<remarks/>
        Public Event getCountryListCompleted As getCountryListCompletedEventHandler
        
        '''<remarks/>
        Public Event getCountryByCountryCompleted As getCountryByCountryCompletedEventHandler
        
        '''<remarks/>
        Public Event getRegionByCountryCompleted As getRegionByCountryCompletedEventHandler
        
        '''<remarks/>
        Public Event getStateListByCountryCompleted As getStateListByCountryCompletedEventHandler
        
        '''<remarks/>
        Public Event updateOppSalesStageCompleted As updateOppSalesStageCompletedEventHandler
        
        '''<remarks/>
        Public Event updateOppCompleted As updateOppCompletedEventHandler
        
        '''<remarks/>
        Public Event getOppListCompleted As getOppListCompletedEventHandler
        
        '''<remarks/>
        Public Event Add_OppCompleted As Add_OppCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountListCompleted As GetAccountListCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckEUZipCodeCompleted As CheckEUZipCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event DisableUserCompleted As DisableUserCompletedEventHandler
        
        '''<remarks/>
        Public Event EnableUserCompleted As EnableUserCompletedEventHandler
        
        '''<remarks/>
        Public Event isEmployeeForWebsitesCompleted As isEmployeeForWebsitesCompletedEventHandler
        
        '''<remarks/>
        Public Event SendMailToAdminCompleted As SendMailToAdminCompletedEventHandler
        
        '''<remarks/>
        Public Event SendMailToAdmin2Completed As SendMailToAdmin2CompletedEventHandler
        
        '''<remarks/>
        Public Event SendNotificationPasswordUpdatedCompleted As SendNotificationPasswordUpdatedCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/login", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function login(ByVal id As String, ByVal pwd As String, ByVal siteid As String, ByVal localip As String) As String
            Dim results() As Object = Me.Invoke("login", New Object() {id, pwd, siteid, localip})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub loginAsync(ByVal id As String, ByVal pwd As String, ByVal siteid As String, ByVal localip As String)
            Me.loginAsync(id, pwd, siteid, localip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub loginAsync(ByVal id As String, ByVal pwd As String, ByVal siteid As String, ByVal localip As String, ByVal userState As Object)
            If (Me.loginOperationCompleted Is Nothing) Then
                Me.loginOperationCompleted = AddressOf Me.OnloginOperationCompleted
            End If
            Me.InvokeAsync("login", New Object() {id, pwd, siteid, localip}, Me.loginOperationCompleted, userState)
        End Sub
        
        Private Sub OnloginOperationCompleted(ByVal arg As Object)
            If (Not (Me.loginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent loginCompleted(Me, New loginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/loginAndCheckLevel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function loginAndCheckLevel(ByVal id As String, ByVal pwd As String, ByVal siteid As String, ByVal localip As String, ByRef level As UserLevel) As String
            Dim results() As Object = Me.Invoke("loginAndCheckLevel", New Object() {id, pwd, siteid, localip, level})
            level = CType(results(1),UserLevel)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub loginAndCheckLevelAsync(ByVal id As String, ByVal pwd As String, ByVal siteid As String, ByVal localip As String, ByVal level As UserLevel)
            Me.loginAndCheckLevelAsync(id, pwd, siteid, localip, level, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub loginAndCheckLevelAsync(ByVal id As String, ByVal pwd As String, ByVal siteid As String, ByVal localip As String, ByVal level As UserLevel, ByVal userState As Object)
            If (Me.loginAndCheckLevelOperationCompleted Is Nothing) Then
                Me.loginAndCheckLevelOperationCompleted = AddressOf Me.OnloginAndCheckLevelOperationCompleted
            End If
            Me.InvokeAsync("loginAndCheckLevel", New Object() {id, pwd, siteid, localip, level}, Me.loginAndCheckLevelOperationCompleted, userState)
        End Sub
        
        Private Sub OnloginAndCheckLevelOperationCompleted(ByVal arg As Object)
            If (Not (Me.loginAndCheckLevelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent loginAndCheckLevelCompleted(Me, New loginAndCheckLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/loginForEUMyAdvantech", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function loginForEUMyAdvantech(ByVal id As String, ByVal siteid As String, ByVal localip As String) As String
            Dim results() As Object = Me.Invoke("loginForEUMyAdvantech", New Object() {id, siteid, localip})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub loginForEUMyAdvantechAsync(ByVal id As String, ByVal siteid As String, ByVal localip As String)
            Me.loginForEUMyAdvantechAsync(id, siteid, localip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub loginForEUMyAdvantechAsync(ByVal id As String, ByVal siteid As String, ByVal localip As String, ByVal userState As Object)
            If (Me.loginForEUMyAdvantechOperationCompleted Is Nothing) Then
                Me.loginForEUMyAdvantechOperationCompleted = AddressOf Me.OnloginForEUMyAdvantechOperationCompleted
            End If
            Me.InvokeAsync("loginForEUMyAdvantech", New Object() {id, siteid, localip}, Me.loginForEUMyAdvantechOperationCompleted, userState)
        End Sub
        
        Private Sub OnloginForEUMyAdvantechOperationCompleted(ByVal arg As Object)
            If (Not (Me.loginForEUMyAdvantechCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent loginForEUMyAdvantechCompleted(Me, New loginForEUMyAdvantechCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/validateTempid", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function validateTempid(ByVal localip As String, ByVal temp_id As String, ByVal siteid As String) As Boolean
            Dim results() As Object = Me.Invoke("validateTempid", New Object() {localip, temp_id, siteid})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub validateTempidAsync(ByVal localip As String, ByVal temp_id As String, ByVal siteid As String)
            Me.validateTempidAsync(localip, temp_id, siteid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub validateTempidAsync(ByVal localip As String, ByVal temp_id As String, ByVal siteid As String, ByVal userState As Object)
            If (Me.validateTempidOperationCompleted Is Nothing) Then
                Me.validateTempidOperationCompleted = AddressOf Me.OnvalidateTempidOperationCompleted
            End If
            Me.InvokeAsync("validateTempid", New Object() {localip, temp_id, siteid}, Me.validateTempidOperationCompleted, userState)
        End Sub
        
        Private Sub OnvalidateTempidOperationCompleted(ByVal arg As Object)
            If (Not (Me.validateTempidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent validateTempidCompleted(Me, New validateTempidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/validateTemidEmail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function validateTemidEmail(ByVal localip As String, ByVal temp_id As String, ByVal siteid As String, ByVal email As String) As Boolean
            Dim results() As Object = Me.Invoke("validateTemidEmail", New Object() {localip, temp_id, siteid, email})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub validateTemidEmailAsync(ByVal localip As String, ByVal temp_id As String, ByVal siteid As String, ByVal email As String)
            Me.validateTemidEmailAsync(localip, temp_id, siteid, email, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub validateTemidEmailAsync(ByVal localip As String, ByVal temp_id As String, ByVal siteid As String, ByVal email As String, ByVal userState As Object)
            If (Me.validateTemidEmailOperationCompleted Is Nothing) Then
                Me.validateTemidEmailOperationCompleted = AddressOf Me.OnvalidateTemidEmailOperationCompleted
            End If
            Me.InvokeAsync("validateTemidEmail", New Object() {localip, temp_id, siteid, email}, Me.validateTemidEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnvalidateTemidEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.validateTemidEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent validateTemidEmailCompleted(Me, New validateTemidEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/validateLoginEmail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function validateLoginEmail(ByVal siteid As String, ByVal email As String) As Boolean
            Dim results() As Object = Me.Invoke("validateLoginEmail", New Object() {siteid, email})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub validateLoginEmailAsync(ByVal siteid As String, ByVal email As String)
            Me.validateLoginEmailAsync(siteid, email, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub validateLoginEmailAsync(ByVal siteid As String, ByVal email As String, ByVal userState As Object)
            If (Me.validateLoginEmailOperationCompleted Is Nothing) Then
                Me.validateLoginEmailOperationCompleted = AddressOf Me.OnvalidateLoginEmailOperationCompleted
            End If
            Me.InvokeAsync("validateLoginEmail", New Object() {siteid, email}, Me.validateLoginEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnvalidateLoginEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.validateLoginEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent validateLoginEmailCompleted(Me, New validateLoginEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getProfile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProfile(ByVal id As String, ByVal siteid As String) As SSOUSER
            Dim results() As Object = Me.Invoke("getProfile", New Object() {id, siteid})
            Return CType(results(0),SSOUSER)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProfileAsync(ByVal id As String, ByVal siteid As String)
            Me.getProfileAsync(id, siteid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProfileAsync(ByVal id As String, ByVal siteid As String, ByVal userState As Object)
            If (Me.getProfileOperationCompleted Is Nothing) Then
                Me.getProfileOperationCompleted = AddressOf Me.OngetProfileOperationCompleted
            End If
            Me.InvokeAsync("getProfile", New Object() {id, siteid}, Me.getProfileOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProfileCompleted(Me, New getProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isExist", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isExist(ByVal id As String, ByVal siteid As String) As Boolean
            Dim results() As Object = Me.Invoke("isExist", New Object() {id, siteid})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isExistAsync(ByVal id As String, ByVal siteid As String)
            Me.isExistAsync(id, siteid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isExistAsync(ByVal id As String, ByVal siteid As String, ByVal userState As Object)
            If (Me.isExistOperationCompleted Is Nothing) Then
                Me.isExistOperationCompleted = AddressOf Me.OnisExistOperationCompleted
            End If
            Me.InvokeAsync("isExist", New Object() {id, siteid}, Me.isExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnisExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.isExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isExistCompleted(Me, New isExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getMasterProfile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getMasterProfile(ByVal id As String, ByVal siteid As String) As SSOUSER
            Dim results() As Object = Me.Invoke("getMasterProfile", New Object() {id, siteid})
            Return CType(results(0),SSOUSER)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getMasterProfileAsync(ByVal id As String, ByVal siteid As String)
            Me.getMasterProfileAsync(id, siteid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getMasterProfileAsync(ByVal id As String, ByVal siteid As String, ByVal userState As Object)
            If (Me.getMasterProfileOperationCompleted Is Nothing) Then
                Me.getMasterProfileOperationCompleted = AddressOf Me.OngetMasterProfileOperationCompleted
            End If
            Me.InvokeAsync("getMasterProfile", New Object() {id, siteid}, Me.getMasterProfileOperationCompleted, userState)
        End Sub
        
        Private Sub OngetMasterProfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.getMasterProfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getMasterProfileCompleted(Me, New getMasterProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getProductInterestList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProductInterestList(ByVal session As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getProductInterestList", New Object() {session})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProductInterestListAsync(ByVal session As String)
            Me.getProductInterestListAsync(session, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProductInterestListAsync(ByVal session As String, ByVal userState As Object)
            If (Me.getProductInterestListOperationCompleted Is Nothing) Then
                Me.getProductInterestListOperationCompleted = AddressOf Me.OngetProductInterestListOperationCompleted
            End If
            Me.InvokeAsync("getProductInterestList", New Object() {session}, Me.getProductInterestListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProductInterestListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProductInterestListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProductInterestListCompleted(Me, New getProductInterestListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getProfile_byField", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProfile_byField(ByVal id As String, ByVal fieldarray As String, ByVal siteid As String) As String
            Dim results() As Object = Me.Invoke("getProfile_byField", New Object() {id, fieldarray, siteid})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProfile_byFieldAsync(ByVal id As String, ByVal fieldarray As String, ByVal siteid As String)
            Me.getProfile_byFieldAsync(id, fieldarray, siteid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProfile_byFieldAsync(ByVal id As String, ByVal fieldarray As String, ByVal siteid As String, ByVal userState As Object)
            If (Me.getProfile_byFieldOperationCompleted Is Nothing) Then
                Me.getProfile_byFieldOperationCompleted = AddressOf Me.OngetProfile_byFieldOperationCompleted
            End If
            Me.InvokeAsync("getProfile_byField", New Object() {id, fieldarray, siteid}, Me.getProfile_byFieldOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProfile_byFieldOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProfile_byFieldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProfile_byFieldCompleted(Me, New getProfile_byFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updProfile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function updProfile(ByVal ssouser As SSOUSER, ByVal siteid As String) As Boolean
            Dim results() As Object = Me.Invoke("updProfile", New Object() {ssouser, siteid})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub updProfileAsync(ByVal ssouser As SSOUSER, ByVal siteid As String)
            Me.updProfileAsync(ssouser, siteid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub updProfileAsync(ByVal ssouser As SSOUSER, ByVal siteid As String, ByVal userState As Object)
            If (Me.updProfileOperationCompleted Is Nothing) Then
                Me.updProfileOperationCompleted = AddressOf Me.OnupdProfileOperationCompleted
            End If
            Me.InvokeAsync("updProfile", New Object() {ssouser, siteid}, Me.updProfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnupdProfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.updProfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent updProfileCompleted(Me, New updProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updProfileByDataSet", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function updProfileByDataSet(ByVal userEmail As String, ByVal siteID As String, ByVal newValues As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("updProfileByDataSet", New Object() {userEmail, siteID, newValues})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub updProfileByDataSetAsync(ByVal userEmail As String, ByVal siteID As String, ByVal newValues As System.Data.DataSet)
            Me.updProfileByDataSetAsync(userEmail, siteID, newValues, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub updProfileByDataSetAsync(ByVal userEmail As String, ByVal siteID As String, ByVal newValues As System.Data.DataSet, ByVal userState As Object)
            If (Me.updProfileByDataSetOperationCompleted Is Nothing) Then
                Me.updProfileByDataSetOperationCompleted = AddressOf Me.OnupdProfileByDataSetOperationCompleted
            End If
            Me.InvokeAsync("updProfileByDataSet", New Object() {userEmail, siteID, newValues}, Me.updProfileByDataSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnupdProfileByDataSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.updProfileByDataSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent updProfileByDataSetCompleted(Me, New updProfileByDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updProfileOnlyBasicInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function updProfileOnlyBasicInfo(ByVal userEmail As String, ByVal siteID As String, ByVal newLOGIN_PASSWORD As String, ByVal newTEL_NO As String, ByVal newTEL_EXT As String, ByVal newCOUNTRY As String, ByVal newADDRESS As String) As Boolean
            Dim results() As Object = Me.Invoke("updProfileOnlyBasicInfo", New Object() {userEmail, siteID, newLOGIN_PASSWORD, newTEL_NO, newTEL_EXT, newCOUNTRY, newADDRESS})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub updProfileOnlyBasicInfoAsync(ByVal userEmail As String, ByVal siteID As String, ByVal newLOGIN_PASSWORD As String, ByVal newTEL_NO As String, ByVal newTEL_EXT As String, ByVal newCOUNTRY As String, ByVal newADDRESS As String)
            Me.updProfileOnlyBasicInfoAsync(userEmail, siteID, newLOGIN_PASSWORD, newTEL_NO, newTEL_EXT, newCOUNTRY, newADDRESS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub updProfileOnlyBasicInfoAsync(ByVal userEmail As String, ByVal siteID As String, ByVal newLOGIN_PASSWORD As String, ByVal newTEL_NO As String, ByVal newTEL_EXT As String, ByVal newCOUNTRY As String, ByVal newADDRESS As String, ByVal userState As Object)
            If (Me.updProfileOnlyBasicInfoOperationCompleted Is Nothing) Then
                Me.updProfileOnlyBasicInfoOperationCompleted = AddressOf Me.OnupdProfileOnlyBasicInfoOperationCompleted
            End If
            Me.InvokeAsync("updProfileOnlyBasicInfo", New Object() {userEmail, siteID, newLOGIN_PASSWORD, newTEL_NO, newTEL_EXT, newCOUNTRY, newADDRESS}, Me.updProfileOnlyBasicInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnupdProfileOnlyBasicInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.updProfileOnlyBasicInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent updProfileOnlyBasicInfoCompleted(Me, New updProfileOnlyBasicInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/logout", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function logout(ByVal tempid As String, ByVal siteid As String) As Boolean
            Dim results() As Object = Me.Invoke("logout", New Object() {tempid, siteid})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub logoutAsync(ByVal tempid As String, ByVal siteid As String)
            Me.logoutAsync(tempid, siteid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub logoutAsync(ByVal tempid As String, ByVal siteid As String, ByVal userState As Object)
            If (Me.logoutOperationCompleted Is Nothing) Then
                Me.logoutOperationCompleted = AddressOf Me.OnlogoutOperationCompleted
            End If
            Me.InvokeAsync("logout", New Object() {tempid, siteid}, Me.logoutOperationCompleted, userState)
        End Sub
        
        Private Sub OnlogoutOperationCompleted(ByVal arg As Object)
            If (Not (Me.logoutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent logoutCompleted(Me, New logoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLatestCZMember", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLatestCZMember(ByVal email As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLatestCZMember", New Object() {email})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLatestCZMemberAsync(ByVal email As String)
            Me.GetLatestCZMemberAsync(email, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLatestCZMemberAsync(ByVal email As String, ByVal userState As Object)
            If (Me.GetLatestCZMemberOperationCompleted Is Nothing) Then
                Me.GetLatestCZMemberOperationCompleted = AddressOf Me.OnGetLatestCZMemberOperationCompleted
            End If
            Me.InvokeAsync("GetLatestCZMember", New Object() {email}, Me.GetLatestCZMemberOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLatestCZMemberOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLatestCZMemberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLatestCZMemberCompleted(Me, New GetLatestCZMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/chkReqFields", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function chkReqFields(ByVal email As String, ByVal pass As String) As Boolean
            Dim results() As Object = Me.Invoke("chkReqFields", New Object() {email, pass})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub chkReqFieldsAsync(ByVal email As String, ByVal pass As String)
            Me.chkReqFieldsAsync(email, pass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub chkReqFieldsAsync(ByVal email As String, ByVal pass As String, ByVal userState As Object)
            If (Me.chkReqFieldsOperationCompleted Is Nothing) Then
                Me.chkReqFieldsOperationCompleted = AddressOf Me.OnchkReqFieldsOperationCompleted
            End If
            Me.InvokeAsync("chkReqFields", New Object() {email, pass}, Me.chkReqFieldsOperationCompleted, userState)
        End Sub
        
        Private Sub OnchkReqFieldsOperationCompleted(ByVal arg As Object)
            If (Not (Me.chkReqFieldsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent chkReqFieldsCompleted(Me, New chkReqFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Siebel_updatePWD", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Siebel_updatePWD(ByVal ssouser As SSOUSER) As Boolean
            Dim results() As Object = Me.Invoke("Siebel_updatePWD", New Object() {ssouser})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Siebel_updatePWDAsync(ByVal ssouser As SSOUSER)
            Me.Siebel_updatePWDAsync(ssouser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Siebel_updatePWDAsync(ByVal ssouser As SSOUSER, ByVal userState As Object)
            If (Me.Siebel_updatePWDOperationCompleted Is Nothing) Then
                Me.Siebel_updatePWDOperationCompleted = AddressOf Me.OnSiebel_updatePWDOperationCompleted
            End If
            Me.InvokeAsync("Siebel_updatePWD", New Object() {ssouser}, Me.Siebel_updatePWDOperationCompleted, userState)
        End Sub
        
        Private Sub OnSiebel_updatePWDOperationCompleted(ByVal arg As Object)
            If (Not (Me.Siebel_updatePWDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Siebel_updatePWDCompleted(Me, New Siebel_updatePWDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Siebel_updateComment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Siebel_updateComment(ByVal ssouser As SSOUSER) As Boolean
            Dim results() As Object = Me.Invoke("Siebel_updateComment", New Object() {ssouser})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Siebel_updateCommentAsync(ByVal ssouser As SSOUSER)
            Me.Siebel_updateCommentAsync(ssouser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Siebel_updateCommentAsync(ByVal ssouser As SSOUSER, ByVal userState As Object)
            If (Me.Siebel_updateCommentOperationCompleted Is Nothing) Then
                Me.Siebel_updateCommentOperationCompleted = AddressOf Me.OnSiebel_updateCommentOperationCompleted
            End If
            Me.InvokeAsync("Siebel_updateComment", New Object() {ssouser}, Me.Siebel_updateCommentOperationCompleted, userState)
        End Sub
        
        Private Sub OnSiebel_updateCommentOperationCompleted(ByVal arg As Object)
            If (Not (Me.Siebel_updateCommentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Siebel_updateCommentCompleted(Me, New Siebel_updateCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Siebel_updateOrg", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Siebel_updateOrg(ByVal ssouser As SSOUSER) As Boolean
            Dim results() As Object = Me.Invoke("Siebel_updateOrg", New Object() {ssouser})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Siebel_updateOrgAsync(ByVal ssouser As SSOUSER)
            Me.Siebel_updateOrgAsync(ssouser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Siebel_updateOrgAsync(ByVal ssouser As SSOUSER, ByVal userState As Object)
            If (Me.Siebel_updateOrgOperationCompleted Is Nothing) Then
                Me.Siebel_updateOrgOperationCompleted = AddressOf Me.OnSiebel_updateOrgOperationCompleted
            End If
            Me.InvokeAsync("Siebel_updateOrg", New Object() {ssouser}, Me.Siebel_updateOrgOperationCompleted, userState)
        End Sub
        
        Private Sub OnSiebel_updateOrgOperationCompleted(ByVal arg As Object)
            If (Not (Me.Siebel_updateOrgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Siebel_updateOrgCompleted(Me, New Siebel_updateOrgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Siebel_savecontact", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Siebel_savecontact(ByVal ssouser As SSOUSER) As Boolean
            Dim results() As Object = Me.Invoke("Siebel_savecontact", New Object() {ssouser})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Siebel_savecontactAsync(ByVal ssouser As SSOUSER)
            Me.Siebel_savecontactAsync(ssouser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Siebel_savecontactAsync(ByVal ssouser As SSOUSER, ByVal userState As Object)
            If (Me.Siebel_savecontactOperationCompleted Is Nothing) Then
                Me.Siebel_savecontactOperationCompleted = AddressOf Me.OnSiebel_savecontactOperationCompleted
            End If
            Me.InvokeAsync("Siebel_savecontact", New Object() {ssouser}, Me.Siebel_savecontactOperationCompleted, userState)
        End Sub
        
        Private Sub OnSiebel_savecontactOperationCompleted(ByVal arg As Object)
            If (Not (Me.Siebel_savecontactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Siebel_savecontactCompleted(Me, New Siebel_savecontactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Siebel_getcontact", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Siebel_getcontact(ByVal ssouser As SSOUSER) As SSOUSER
            Dim results() As Object = Me.Invoke("Siebel_getcontact", New Object() {ssouser})
            Return CType(results(0),SSOUSER)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Siebel_getcontactAsync(ByVal ssouser As SSOUSER)
            Me.Siebel_getcontactAsync(ssouser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Siebel_getcontactAsync(ByVal ssouser As SSOUSER, ByVal userState As Object)
            If (Me.Siebel_getcontactOperationCompleted Is Nothing) Then
                Me.Siebel_getcontactOperationCompleted = AddressOf Me.OnSiebel_getcontactOperationCompleted
            End If
            Me.InvokeAsync("Siebel_getcontact", New Object() {ssouser}, Me.Siebel_getcontactOperationCompleted, userState)
        End Sub
        
        Private Sub OnSiebel_getcontactOperationCompleted(ByVal arg As Object)
            If (Not (Me.Siebel_getcontactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Siebel_getcontactCompleted(Me, New Siebel_getcontactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertMemberLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertMemberLog(ByVal EMAIL_ADDR As String, ByVal ACTIVITY_TYPE As String, ByVal ACTIVITY_DESC As String, ByVal SOURCE_SITE As String, ByVal ip As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertMemberLog", New Object() {EMAIL_ADDR, ACTIVITY_TYPE, ACTIVITY_DESC, SOURCE_SITE, ip})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertMemberLogAsync(ByVal EMAIL_ADDR As String, ByVal ACTIVITY_TYPE As String, ByVal ACTIVITY_DESC As String, ByVal SOURCE_SITE As String, ByVal ip As String)
            Me.InsertMemberLogAsync(EMAIL_ADDR, ACTIVITY_TYPE, ACTIVITY_DESC, SOURCE_SITE, ip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertMemberLogAsync(ByVal EMAIL_ADDR As String, ByVal ACTIVITY_TYPE As String, ByVal ACTIVITY_DESC As String, ByVal SOURCE_SITE As String, ByVal ip As String, ByVal userState As Object)
            If (Me.InsertMemberLogOperationCompleted Is Nothing) Then
                Me.InsertMemberLogOperationCompleted = AddressOf Me.OnInsertMemberLogOperationCompleted
            End If
            Me.InvokeAsync("InsertMemberLog", New Object() {EMAIL_ADDR, ACTIVITY_TYPE, ACTIVITY_DESC, SOURCE_SITE, ip}, Me.InsertMemberLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertMemberLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertMemberLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertMemberLogCompleted(Me, New InsertMemberLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertMemberLog2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertMemberLog2(ByVal EMAIL_ADDR As String, ByVal ACTIVITY_TYPE As String, ByVal ACTIVITY_DESC As String, ByVal ACTIVITY_DESC2 As String, ByVal ACTIVITY_DESC3 As String, ByVal SOURCE_SITE As String, ByVal ip As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertMemberLog2", New Object() {EMAIL_ADDR, ACTIVITY_TYPE, ACTIVITY_DESC, ACTIVITY_DESC2, ACTIVITY_DESC3, SOURCE_SITE, ip})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertMemberLog2Async(ByVal EMAIL_ADDR As String, ByVal ACTIVITY_TYPE As String, ByVal ACTIVITY_DESC As String, ByVal ACTIVITY_DESC2 As String, ByVal ACTIVITY_DESC3 As String, ByVal SOURCE_SITE As String, ByVal ip As String)
            Me.InsertMemberLog2Async(EMAIL_ADDR, ACTIVITY_TYPE, ACTIVITY_DESC, ACTIVITY_DESC2, ACTIVITY_DESC3, SOURCE_SITE, ip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertMemberLog2Async(ByVal EMAIL_ADDR As String, ByVal ACTIVITY_TYPE As String, ByVal ACTIVITY_DESC As String, ByVal ACTIVITY_DESC2 As String, ByVal ACTIVITY_DESC3 As String, ByVal SOURCE_SITE As String, ByVal ip As String, ByVal userState As Object)
            If (Me.InsertMemberLog2OperationCompleted Is Nothing) Then
                Me.InsertMemberLog2OperationCompleted = AddressOf Me.OnInsertMemberLog2OperationCompleted
            End If
            Me.InvokeAsync("InsertMemberLog2", New Object() {EMAIL_ADDR, ACTIVITY_TYPE, ACTIVITY_DESC, ACTIVITY_DESC2, ACTIVITY_DESC3, SOURCE_SITE, ip}, Me.InsertMemberLog2OperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertMemberLog2OperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertMemberLog2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertMemberLog2Completed(Me, New InsertMemberLog2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLeadsRoutingAdminEmail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLeadsRoutingAdminEmail(ByVal email As String, ByVal siteid As String, ByVal sBU As String) As String
            Dim results() As Object = Me.Invoke("GetLeadsRoutingAdminEmail", New Object() {email, siteid, sBU})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLeadsRoutingAdminEmailAsync(ByVal email As String, ByVal siteid As String, ByVal sBU As String)
            Me.GetLeadsRoutingAdminEmailAsync(email, siteid, sBU, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLeadsRoutingAdminEmailAsync(ByVal email As String, ByVal siteid As String, ByVal sBU As String, ByVal userState As Object)
            If (Me.GetLeadsRoutingAdminEmailOperationCompleted Is Nothing) Then
                Me.GetLeadsRoutingAdminEmailOperationCompleted = AddressOf Me.OnGetLeadsRoutingAdminEmailOperationCompleted
            End If
            Me.InvokeAsync("GetLeadsRoutingAdminEmail", New Object() {email, siteid, sBU}, Me.GetLeadsRoutingAdminEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLeadsRoutingAdminEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLeadsRoutingAdminEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLeadsRoutingAdminEmailCompleted(Me, New GetLeadsRoutingAdminEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAdminEmailForRMA", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAdminEmailForRMA(ByVal country As String) As String
            Dim results() As Object = Me.Invoke("GetAdminEmailForRMA", New Object() {country})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAdminEmailForRMAAsync(ByVal country As String)
            Me.GetAdminEmailForRMAAsync(country, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAdminEmailForRMAAsync(ByVal country As String, ByVal userState As Object)
            If (Me.GetAdminEmailForRMAOperationCompleted Is Nothing) Then
                Me.GetAdminEmailForRMAOperationCompleted = AddressOf Me.OnGetAdminEmailForRMAOperationCompleted
            End If
            Me.InvokeAsync("GetAdminEmailForRMA", New Object() {country}, Me.GetAdminEmailForRMAOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAdminEmailForRMAOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAdminEmailForRMACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAdminEmailForRMACompleted(Me, New GetAdminEmailForRMACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAdminEmailByCountry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAdminEmailByCountry(ByVal country As String) As String
            Dim results() As Object = Me.Invoke("GetAdminEmailByCountry", New Object() {country})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAdminEmailByCountryAsync(ByVal country As String)
            Me.GetAdminEmailByCountryAsync(country, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAdminEmailByCountryAsync(ByVal country As String, ByVal userState As Object)
            If (Me.GetAdminEmailByCountryOperationCompleted Is Nothing) Then
                Me.GetAdminEmailByCountryOperationCompleted = AddressOf Me.OnGetAdminEmailByCountryOperationCompleted
            End If
            Me.InvokeAsync("GetAdminEmailByCountry", New Object() {country}, Me.GetAdminEmailByCountryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAdminEmailByCountryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAdminEmailByCountryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAdminEmailByCountryCompleted(Me, New GetAdminEmailByCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGeneralEmailByCountry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGeneralEmailByCountry(ByVal country As String) As String
            Dim results() As Object = Me.Invoke("GetGeneralEmailByCountry", New Object() {country})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGeneralEmailByCountryAsync(ByVal country As String)
            Me.GetGeneralEmailByCountryAsync(country, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGeneralEmailByCountryAsync(ByVal country As String, ByVal userState As Object)
            If (Me.GetGeneralEmailByCountryOperationCompleted Is Nothing) Then
                Me.GetGeneralEmailByCountryOperationCompleted = AddressOf Me.OnGetGeneralEmailByCountryOperationCompleted
            End If
            Me.InvokeAsync("GetGeneralEmailByCountry", New Object() {country}, Me.GetGeneralEmailByCountryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGeneralEmailByCountryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGeneralEmailByCountryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGeneralEmailByCountryCompleted(Me, New GetGeneralEmailByCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAdminEmailForPZ", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAdminEmailForPZ(ByVal country As String) As String
            Dim results() As Object = Me.Invoke("GetAdminEmailForPZ", New Object() {country})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAdminEmailForPZAsync(ByVal country As String)
            Me.GetAdminEmailForPZAsync(country, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAdminEmailForPZAsync(ByVal country As String, ByVal userState As Object)
            If (Me.GetAdminEmailForPZOperationCompleted Is Nothing) Then
                Me.GetAdminEmailForPZOperationCompleted = AddressOf Me.OnGetAdminEmailForPZOperationCompleted
            End If
            Me.InvokeAsync("GetAdminEmailForPZ", New Object() {country}, Me.GetAdminEmailForPZOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAdminEmailForPZOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAdminEmailForPZCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAdminEmailForPZCompleted(Me, New GetAdminEmailForPZCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddActivity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddActivity(ByVal email As String, ByVal desc As String, ByVal comments As String) As Boolean
            Dim results() As Object = Me.Invoke("AddActivity", New Object() {email, desc, comments})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddActivityAsync(ByVal email As String, ByVal desc As String, ByVal comments As String)
            Me.AddActivityAsync(email, desc, comments, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddActivityAsync(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal userState As Object)
            If (Me.AddActivityOperationCompleted Is Nothing) Then
                Me.AddActivityOperationCompleted = AddressOf Me.OnAddActivityOperationCompleted
            End If
            Me.InvokeAsync("AddActivity", New Object() {email, desc, comments}, Me.AddActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddActivityCompleted(Me, New AddActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddActivityWithWS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddActivityWithWS(ByVal strComments As String, ByVal strActivityDesc As String, ByVal strContactEMail As String, ByVal strFirstName As String, ByVal strLastName As String, ByVal strPhone As String, ByVal strCountry As String, ByVal activitySource As Integer, ByVal contactDataSource As String, ByVal ownerEmail As String, ByVal userType As Integer, ByRef contactID As String, ByRef activityID As String) As Boolean
            Dim results() As Object = Me.Invoke("AddActivityWithWS", New Object() {strComments, strActivityDesc, strContactEMail, strFirstName, strLastName, strPhone, strCountry, activitySource, contactDataSource, ownerEmail, userType, contactID, activityID})
            contactID = CType(results(1),String)
            activityID = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddActivityWithWSAsync(ByVal strComments As String, ByVal strActivityDesc As String, ByVal strContactEMail As String, ByVal strFirstName As String, ByVal strLastName As String, ByVal strPhone As String, ByVal strCountry As String, ByVal activitySource As Integer, ByVal contactDataSource As String, ByVal ownerEmail As String, ByVal userType As Integer, ByVal contactID As String, ByVal activityID As String)
            Me.AddActivityWithWSAsync(strComments, strActivityDesc, strContactEMail, strFirstName, strLastName, strPhone, strCountry, activitySource, contactDataSource, ownerEmail, userType, contactID, activityID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddActivityWithWSAsync(ByVal strComments As String, ByVal strActivityDesc As String, ByVal strContactEMail As String, ByVal strFirstName As String, ByVal strLastName As String, ByVal strPhone As String, ByVal strCountry As String, ByVal activitySource As Integer, ByVal contactDataSource As String, ByVal ownerEmail As String, ByVal userType As Integer, ByVal contactID As String, ByVal activityID As String, ByVal userState As Object)
            If (Me.AddActivityWithWSOperationCompleted Is Nothing) Then
                Me.AddActivityWithWSOperationCompleted = AddressOf Me.OnAddActivityWithWSOperationCompleted
            End If
            Me.InvokeAsync("AddActivityWithWS", New Object() {strComments, strActivityDesc, strContactEMail, strFirstName, strLastName, strPhone, strCountry, activitySource, contactDataSource, ownerEmail, userType, contactID, activityID}, Me.AddActivityWithWSOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddActivityWithWSOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddActivityWithWSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddActivityWithWSCompleted(Me, New AddActivityWithWSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddOnlineRequestWithWS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddOnlineRequestWithWS(ByRef onlineRequest As OnlineRequest) As Boolean
            Dim results() As Object = Me.Invoke("AddOnlineRequestWithWS", New Object() {onlineRequest})
            onlineRequest = CType(results(1),OnlineRequest)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddOnlineRequestWithWSAsync(ByVal onlineRequest As OnlineRequest)
            Me.AddOnlineRequestWithWSAsync(onlineRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddOnlineRequestWithWSAsync(ByVal onlineRequest As OnlineRequest, ByVal userState As Object)
            If (Me.AddOnlineRequestWithWSOperationCompleted Is Nothing) Then
                Me.AddOnlineRequestWithWSOperationCompleted = AddressOf Me.OnAddOnlineRequestWithWSOperationCompleted
            End If
            Me.InvokeAsync("AddOnlineRequestWithWS", New Object() {onlineRequest}, Me.AddOnlineRequestWithWSOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddOnlineRequestWithWSOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddOnlineRequestWithWSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddOnlineRequestWithWSCompleted(Me, New AddOnlineRequestWithWSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddOnlineRequestV2WithWS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddOnlineRequestV2WithWS(ByRef onlineRequest As OnlineRequestV2) As Boolean
            Dim results() As Object = Me.Invoke("AddOnlineRequestV2WithWS", New Object() {onlineRequest})
            onlineRequest = CType(results(1),OnlineRequestV2)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddOnlineRequestV2WithWSAsync(ByVal onlineRequest As OnlineRequestV2)
            Me.AddOnlineRequestV2WithWSAsync(onlineRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddOnlineRequestV2WithWSAsync(ByVal onlineRequest As OnlineRequestV2, ByVal userState As Object)
            If (Me.AddOnlineRequestV2WithWSOperationCompleted Is Nothing) Then
                Me.AddOnlineRequestV2WithWSOperationCompleted = AddressOf Me.OnAddOnlineRequestV2WithWSOperationCompleted
            End If
            Me.InvokeAsync("AddOnlineRequestV2WithWS", New Object() {onlineRequest}, Me.AddOnlineRequestV2WithWSOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddOnlineRequestV2WithWSOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddOnlineRequestV2WithWSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddOnlineRequestV2WithWSCompleted(Me, New AddOnlineRequestV2WithWSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddActivityWithEmployeeEmail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddActivityWithEmployeeEmail(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal EmployeeEmail As String) As Boolean
            Dim results() As Object = Me.Invoke("AddActivityWithEmployeeEmail", New Object() {email, desc, comments, EmployeeEmail})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddActivityWithEmployeeEmailAsync(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal EmployeeEmail As String)
            Me.AddActivityWithEmployeeEmailAsync(email, desc, comments, EmployeeEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddActivityWithEmployeeEmailAsync(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal EmployeeEmail As String, ByVal userState As Object)
            If (Me.AddActivityWithEmployeeEmailOperationCompleted Is Nothing) Then
                Me.AddActivityWithEmployeeEmailOperationCompleted = AddressOf Me.OnAddActivityWithEmployeeEmailOperationCompleted
            End If
            Me.InvokeAsync("AddActivityWithEmployeeEmail", New Object() {email, desc, comments, EmployeeEmail}, Me.AddActivityWithEmployeeEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddActivityWithEmployeeEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddActivityWithEmployeeEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddActivityWithEmployeeEmailCompleted(Me, New AddActivityWithEmployeeEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddActivityWithEmployeeEmailToRegionalServer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddActivityWithEmployeeEmailToRegionalServer(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal EmployeeEmail As String, ByVal RegionalServer As String) As Boolean
            Dim results() As Object = Me.Invoke("AddActivityWithEmployeeEmailToRegionalServer", New Object() {email, desc, comments, EmployeeEmail, RegionalServer})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddActivityWithEmployeeEmailToRegionalServerAsync(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal EmployeeEmail As String, ByVal RegionalServer As String)
            Me.AddActivityWithEmployeeEmailToRegionalServerAsync(email, desc, comments, EmployeeEmail, RegionalServer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddActivityWithEmployeeEmailToRegionalServerAsync(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal EmployeeEmail As String, ByVal RegionalServer As String, ByVal userState As Object)
            If (Me.AddActivityWithEmployeeEmailToRegionalServerOperationCompleted Is Nothing) Then
                Me.AddActivityWithEmployeeEmailToRegionalServerOperationCompleted = AddressOf Me.OnAddActivityWithEmployeeEmailToRegionalServerOperationCompleted
            End If
            Me.InvokeAsync("AddActivityWithEmployeeEmailToRegionalServer", New Object() {email, desc, comments, EmployeeEmail, RegionalServer}, Me.AddActivityWithEmployeeEmailToRegionalServerOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddActivityWithEmployeeEmailToRegionalServerOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddActivityWithEmployeeEmailToRegionalServerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddActivityWithEmployeeEmailToRegionalServerCompleted(Me, New AddActivityWithEmployeeEmailToRegionalServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddActivityWithEmployeeEmailAndAcitivtyType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddActivityWithEmployeeEmailAndAcitivtyType(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal EmployeeEmail As String, ByVal ActivityType As Integer) As Boolean
            Dim results() As Object = Me.Invoke("AddActivityWithEmployeeEmailAndAcitivtyType", New Object() {email, desc, comments, EmployeeEmail, ActivityType})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddActivityWithEmployeeEmailAndAcitivtyTypeAsync(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal EmployeeEmail As String, ByVal ActivityType As Integer)
            Me.AddActivityWithEmployeeEmailAndAcitivtyTypeAsync(email, desc, comments, EmployeeEmail, ActivityType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddActivityWithEmployeeEmailAndAcitivtyTypeAsync(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal EmployeeEmail As String, ByVal ActivityType As Integer, ByVal userState As Object)
            If (Me.AddActivityWithEmployeeEmailAndAcitivtyTypeOperationCompleted Is Nothing) Then
                Me.AddActivityWithEmployeeEmailAndAcitivtyTypeOperationCompleted = AddressOf Me.OnAddActivityWithEmployeeEmailAndAcitivtyTypeOperationCompleted
            End If
            Me.InvokeAsync("AddActivityWithEmployeeEmailAndAcitivtyType", New Object() {email, desc, comments, EmployeeEmail, ActivityType}, Me.AddActivityWithEmployeeEmailAndAcitivtyTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddActivityWithEmployeeEmailAndAcitivtyTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddActivityWithEmployeeEmailAndAcitivtyTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddActivityWithEmployeeEmailAndAcitivtyTypeCompleted(Me, New AddActivityWithEmployeeEmailAndAcitivtyTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServer(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal EmployeeEmail As String, ByVal ActivityType As Integer, ByVal RegionalServer As String) As Boolean
            Dim results() As Object = Me.Invoke("AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServer", New Object() {email, desc, comments, EmployeeEmail, ActivityType, RegionalServer})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerAsync(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal EmployeeEmail As String, ByVal ActivityType As Integer, ByVal RegionalServer As String)
            Me.AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerAsync(email, desc, comments, EmployeeEmail, ActivityType, RegionalServer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerAsync(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal EmployeeEmail As String, ByVal ActivityType As Integer, ByVal RegionalServer As String, ByVal userState As Object)
            If (Me.AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerOperationCompleted Is Nothing) Then
                Me.AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerOperationCompleted = AddressOf Me.OnAddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerOperationCompleted
            End If
            Me.InvokeAsync("AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServer", New Object() {email, desc, comments, EmployeeEmail, ActivityType, RegionalServer}, Me.AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerCompleted(Me, New AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServ"& _ 
            "er", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServer(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal EmployeeEmail As String, ByVal ActivityType As Integer, ByVal RegionalServer As String, ByVal OppID As String) As Boolean
            Dim results() As Object = Me.Invoke("AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServer", New Object() {email, desc, comments, EmployeeEmail, ActivityType, RegionalServer, OppID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerAsync(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal EmployeeEmail As String, ByVal ActivityType As Integer, ByVal RegionalServer As String, ByVal OppID As String)
            Me.AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerAsync(email, desc, comments, EmployeeEmail, ActivityType, RegionalServer, OppID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerAsync(ByVal email As String, ByVal desc As String, ByVal comments As String, ByVal EmployeeEmail As String, ByVal ActivityType As Integer, ByVal RegionalServer As String, ByVal OppID As String, ByVal userState As Object)
            If (Me.AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerOperationCompleted Is Nothing) Then
                Me.AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerOperationCompleted = AddressOf Me.OnAddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerOperationCompleted
            End If
            Me.InvokeAsync("AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServer", New Object() {email, desc, comments, EmployeeEmail, ActivityType, RegionalServer, OppID}, Me.AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerCompleted(Me, New AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddServiceRequestWithAEEmail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddServiceRequestWithAEEmail(ByVal strSRName As String, ByVal strSREmail As String, ByVal strPorductModel As String, ByVal strOS As String, ByVal strFunction As String, ByVal strAbstractIssue As String, ByVal strDescriptionIssue As String, ByVal strOwnerAE As String) As Boolean
            Dim results() As Object = Me.Invoke("AddServiceRequestWithAEEmail", New Object() {strSRName, strSREmail, strPorductModel, strOS, strFunction, strAbstractIssue, strDescriptionIssue, strOwnerAE})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddServiceRequestWithAEEmailAsync(ByVal strSRName As String, ByVal strSREmail As String, ByVal strPorductModel As String, ByVal strOS As String, ByVal strFunction As String, ByVal strAbstractIssue As String, ByVal strDescriptionIssue As String, ByVal strOwnerAE As String)
            Me.AddServiceRequestWithAEEmailAsync(strSRName, strSREmail, strPorductModel, strOS, strFunction, strAbstractIssue, strDescriptionIssue, strOwnerAE, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddServiceRequestWithAEEmailAsync(ByVal strSRName As String, ByVal strSREmail As String, ByVal strPorductModel As String, ByVal strOS As String, ByVal strFunction As String, ByVal strAbstractIssue As String, ByVal strDescriptionIssue As String, ByVal strOwnerAE As String, ByVal userState As Object)
            If (Me.AddServiceRequestWithAEEmailOperationCompleted Is Nothing) Then
                Me.AddServiceRequestWithAEEmailOperationCompleted = AddressOf Me.OnAddServiceRequestWithAEEmailOperationCompleted
            End If
            Me.InvokeAsync("AddServiceRequestWithAEEmail", New Object() {strSRName, strSREmail, strPorductModel, strOS, strFunction, strAbstractIssue, strDescriptionIssue, strOwnerAE}, Me.AddServiceRequestWithAEEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddServiceRequestWithAEEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddServiceRequestWithAEEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddServiceRequestWithAEEmailCompleted(Me, New AddServiceRequestWithAEEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddServiceRequestWithWS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddServiceRequestWithWS( _
                    ByVal strFirstName As String,  _
                    ByVal strLastName As String,  _
                    ByVal strSREmail As String,  _
                    ByVal strPhone As String,  _
                    ByVal strPorductModel As String,  _
                    ByVal strOS As String,  _
                    ByVal strFunction As String,  _
                    ByVal strAbstractIssue As String,  _
                    ByVal strDescriptionIssue As String,  _
                    ByVal strContactDataSource As String,  _
                    ByVal strOwnerAE As String,  _
                    ByVal strNotifyEmail As String,  _
                    ByVal strEmailSubject As String,  _
                    ByVal strEmailBody As String,  _
                    ByVal strCountry As String,  _
                    ByVal strState As String,  _
                    ByVal userType As Integer,  _
                    ByRef contactID As String,  _
                    ByRef srID As String) As Boolean
            Dim results() As Object = Me.Invoke("AddServiceRequestWithWS", New Object() {strFirstName, strLastName, strSREmail, strPhone, strPorductModel, strOS, strFunction, strAbstractIssue, strDescriptionIssue, strContactDataSource, strOwnerAE, strNotifyEmail, strEmailSubject, strEmailBody, strCountry, strState, userType, contactID, srID})
            contactID = CType(results(1),String)
            srID = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddServiceRequestWithWSAsync( _
                    ByVal strFirstName As String,  _
                    ByVal strLastName As String,  _
                    ByVal strSREmail As String,  _
                    ByVal strPhone As String,  _
                    ByVal strPorductModel As String,  _
                    ByVal strOS As String,  _
                    ByVal strFunction As String,  _
                    ByVal strAbstractIssue As String,  _
                    ByVal strDescriptionIssue As String,  _
                    ByVal strContactDataSource As String,  _
                    ByVal strOwnerAE As String,  _
                    ByVal strNotifyEmail As String,  _
                    ByVal strEmailSubject As String,  _
                    ByVal strEmailBody As String,  _
                    ByVal strCountry As String,  _
                    ByVal strState As String,  _
                    ByVal userType As Integer,  _
                    ByVal contactID As String,  _
                    ByVal srID As String)
            Me.AddServiceRequestWithWSAsync(strFirstName, strLastName, strSREmail, strPhone, strPorductModel, strOS, strFunction, strAbstractIssue, strDescriptionIssue, strContactDataSource, strOwnerAE, strNotifyEmail, strEmailSubject, strEmailBody, strCountry, strState, userType, contactID, srID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddServiceRequestWithWSAsync( _
                    ByVal strFirstName As String,  _
                    ByVal strLastName As String,  _
                    ByVal strSREmail As String,  _
                    ByVal strPhone As String,  _
                    ByVal strPorductModel As String,  _
                    ByVal strOS As String,  _
                    ByVal strFunction As String,  _
                    ByVal strAbstractIssue As String,  _
                    ByVal strDescriptionIssue As String,  _
                    ByVal strContactDataSource As String,  _
                    ByVal strOwnerAE As String,  _
                    ByVal strNotifyEmail As String,  _
                    ByVal strEmailSubject As String,  _
                    ByVal strEmailBody As String,  _
                    ByVal strCountry As String,  _
                    ByVal strState As String,  _
                    ByVal userType As Integer,  _
                    ByVal contactID As String,  _
                    ByVal srID As String,  _
                    ByVal userState As Object)
            If (Me.AddServiceRequestWithWSOperationCompleted Is Nothing) Then
                Me.AddServiceRequestWithWSOperationCompleted = AddressOf Me.OnAddServiceRequestWithWSOperationCompleted
            End If
            Me.InvokeAsync("AddServiceRequestWithWS", New Object() {strFirstName, strLastName, strSREmail, strPhone, strPorductModel, strOS, strFunction, strAbstractIssue, strDescriptionIssue, strContactDataSource, strOwnerAE, strNotifyEmail, strEmailSubject, strEmailBody, strCountry, strState, userType, contactID, srID}, Me.AddServiceRequestWithWSOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddServiceRequestWithWSOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddServiceRequestWithWSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddServiceRequestWithWSCompleted(Me, New AddServiceRequestWithWSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddServiceRequestWithAEEmailNotifyEmail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddServiceRequestWithAEEmailNotifyEmail(ByVal strSRName As String, ByVal strSREmail As String, ByVal strPorductModel As String, ByVal strOS As String, ByVal strFunction As String, ByVal strAbstractIssue As String, ByVal strDescriptionIssue As String, ByVal strOwnerAE As String, ByVal strNotifyEmail As String, ByVal strEmailSubject As String, ByVal strCountry As String, ByVal strState As String, ByVal strEmailBody As String) As Boolean
            Dim results() As Object = Me.Invoke("AddServiceRequestWithAEEmailNotifyEmail", New Object() {strSRName, strSREmail, strPorductModel, strOS, strFunction, strAbstractIssue, strDescriptionIssue, strOwnerAE, strNotifyEmail, strEmailSubject, strCountry, strState, strEmailBody})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddServiceRequestWithAEEmailNotifyEmailAsync(ByVal strSRName As String, ByVal strSREmail As String, ByVal strPorductModel As String, ByVal strOS As String, ByVal strFunction As String, ByVal strAbstractIssue As String, ByVal strDescriptionIssue As String, ByVal strOwnerAE As String, ByVal strNotifyEmail As String, ByVal strEmailSubject As String, ByVal strCountry As String, ByVal strState As String, ByVal strEmailBody As String)
            Me.AddServiceRequestWithAEEmailNotifyEmailAsync(strSRName, strSREmail, strPorductModel, strOS, strFunction, strAbstractIssue, strDescriptionIssue, strOwnerAE, strNotifyEmail, strEmailSubject, strCountry, strState, strEmailBody, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddServiceRequestWithAEEmailNotifyEmailAsync(ByVal strSRName As String, ByVal strSREmail As String, ByVal strPorductModel As String, ByVal strOS As String, ByVal strFunction As String, ByVal strAbstractIssue As String, ByVal strDescriptionIssue As String, ByVal strOwnerAE As String, ByVal strNotifyEmail As String, ByVal strEmailSubject As String, ByVal strCountry As String, ByVal strState As String, ByVal strEmailBody As String, ByVal userState As Object)
            If (Me.AddServiceRequestWithAEEmailNotifyEmailOperationCompleted Is Nothing) Then
                Me.AddServiceRequestWithAEEmailNotifyEmailOperationCompleted = AddressOf Me.OnAddServiceRequestWithAEEmailNotifyEmailOperationCompleted
            End If
            Me.InvokeAsync("AddServiceRequestWithAEEmailNotifyEmail", New Object() {strSRName, strSREmail, strPorductModel, strOS, strFunction, strAbstractIssue, strDescriptionIssue, strOwnerAE, strNotifyEmail, strEmailSubject, strCountry, strState, strEmailBody}, Me.AddServiceRequestWithAEEmailNotifyEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddServiceRequestWithAEEmailNotifyEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddServiceRequestWithAEEmailNotifyEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddServiceRequestWithAEEmailNotifyEmailCompleted(Me, New AddServiceRequestWithAEEmailNotifyEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAddSRDescriptionByRowID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAddSRDescriptionByRowID(ByVal id As String, ByRef notifyEmail As String, ByRef subject As String, ByRef product As String, ByRef country As String, ByRef state As String, ByRef emailBody As String) As String
            Dim results() As Object = Me.Invoke("getAddSRDescriptionByRowID", New Object() {id, notifyEmail, subject, product, country, state, emailBody})
            notifyEmail = CType(results(1),String)
            subject = CType(results(2),String)
            product = CType(results(3),String)
            country = CType(results(4),String)
            state = CType(results(5),String)
            emailBody = CType(results(6),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAddSRDescriptionByRowIDAsync(ByVal id As String, ByVal notifyEmail As String, ByVal subject As String, ByVal product As String, ByVal country As String, ByVal state As String, ByVal emailBody As String)
            Me.getAddSRDescriptionByRowIDAsync(id, notifyEmail, subject, product, country, state, emailBody, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAddSRDescriptionByRowIDAsync(ByVal id As String, ByVal notifyEmail As String, ByVal subject As String, ByVal product As String, ByVal country As String, ByVal state As String, ByVal emailBody As String, ByVal userState As Object)
            If (Me.getAddSRDescriptionByRowIDOperationCompleted Is Nothing) Then
                Me.getAddSRDescriptionByRowIDOperationCompleted = AddressOf Me.OngetAddSRDescriptionByRowIDOperationCompleted
            End If
            Me.InvokeAsync("getAddSRDescriptionByRowID", New Object() {id, notifyEmail, subject, product, country, state, emailBody}, Me.getAddSRDescriptionByRowIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAddSRDescriptionByRowIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAddSRDescriptionByRowIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAddSRDescriptionByRowIDCompleted(Me, New getAddSRDescriptionByRowIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getSimpleFormLog", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSimpleFormLog(ByVal id As Integer, ByVal formID As String) As MEMBER_SIMPLE
            Dim results() As Object = Me.Invoke("getSimpleFormLog", New Object() {id, formID})
            Return CType(results(0),MEMBER_SIMPLE)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSimpleFormLogAsync(ByVal id As Integer, ByVal formID As String)
            Me.getSimpleFormLogAsync(id, formID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSimpleFormLogAsync(ByVal id As Integer, ByVal formID As String, ByVal userState As Object)
            If (Me.getSimpleFormLogOperationCompleted Is Nothing) Then
                Me.getSimpleFormLogOperationCompleted = AddressOf Me.OngetSimpleFormLogOperationCompleted
            End If
            Me.InvokeAsync("getSimpleFormLog", New Object() {id, formID}, Me.getSimpleFormLogOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSimpleFormLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSimpleFormLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSimpleFormLogCompleted(Me, New getSimpleFormLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getServiceCenterEmailByCountry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getServiceCenterEmailByCountry(ByVal Country As String) As String
            Dim results() As Object = Me.Invoke("getServiceCenterEmailByCountry", New Object() {Country})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getServiceCenterEmailByCountryAsync(ByVal Country As String)
            Me.getServiceCenterEmailByCountryAsync(Country, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getServiceCenterEmailByCountryAsync(ByVal Country As String, ByVal userState As Object)
            If (Me.getServiceCenterEmailByCountryOperationCompleted Is Nothing) Then
                Me.getServiceCenterEmailByCountryOperationCompleted = AddressOf Me.OngetServiceCenterEmailByCountryOperationCompleted
            End If
            Me.InvokeAsync("getServiceCenterEmailByCountry", New Object() {Country}, Me.getServiceCenterEmailByCountryOperationCompleted, userState)
        End Sub
        
        Private Sub OngetServiceCenterEmailByCountryOperationCompleted(ByVal arg As Object)
            If (Not (Me.getServiceCenterEmailByCountryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getServiceCenterEmailByCountryCompleted(Me, New getServiceCenterEmailByCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/register", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function register(ByVal siteid As String, ByRef ssouser As SSOUSER) As String
            Dim results() As Object = Me.Invoke("register", New Object() {siteid, ssouser})
            ssouser = CType(results(1),SSOUSER)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub registerAsync(ByVal siteid As String, ByVal ssouser As SSOUSER)
            Me.registerAsync(siteid, ssouser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub registerAsync(ByVal siteid As String, ByVal ssouser As SSOUSER, ByVal userState As Object)
            If (Me.registerOperationCompleted Is Nothing) Then
                Me.registerOperationCompleted = AddressOf Me.OnregisterOperationCompleted
            End If
            Me.InvokeAsync("register", New Object() {siteid, ssouser}, Me.registerOperationCompleted, userState)
        End Sub
        
        Private Sub OnregisterOperationCompleted(ByVal arg As Object)
            If (Not (Me.registerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent registerCompleted(Me, New registerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCountry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCountry(ByVal region As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getCountry", New Object() {region})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCountryAsync(ByVal region As String)
            Me.getCountryAsync(region, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCountryAsync(ByVal region As String, ByVal userState As Object)
            If (Me.getCountryOperationCompleted Is Nothing) Then
                Me.getCountryOperationCompleted = AddressOf Me.OngetCountryOperationCompleted
            End If
            Me.InvokeAsync("getCountry", New Object() {region}, Me.getCountryOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCountryOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCountryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCountryCompleted(Me, New getCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCountryList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCountryList() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getCountryList", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCountryListAsync()
            Me.getCountryListAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCountryListAsync(ByVal userState As Object)
            If (Me.getCountryListOperationCompleted Is Nothing) Then
                Me.getCountryListOperationCompleted = AddressOf Me.OngetCountryListOperationCompleted
            End If
            Me.InvokeAsync("getCountryList", New Object(-1) {}, Me.getCountryListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCountryListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCountryListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCountryListCompleted(Me, New getCountryListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCountryByCountry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCountryByCountry(ByVal country As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getCountryByCountry", New Object() {country})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCountryByCountryAsync(ByVal country As String)
            Me.getCountryByCountryAsync(country, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCountryByCountryAsync(ByVal country As String, ByVal userState As Object)
            If (Me.getCountryByCountryOperationCompleted Is Nothing) Then
                Me.getCountryByCountryOperationCompleted = AddressOf Me.OngetCountryByCountryOperationCompleted
            End If
            Me.InvokeAsync("getCountryByCountry", New Object() {country}, Me.getCountryByCountryOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCountryByCountryOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCountryByCountryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCountryByCountryCompleted(Me, New getCountryByCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getRegionByCountry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getRegionByCountry(ByVal country As String) As String
            Dim results() As Object = Me.Invoke("getRegionByCountry", New Object() {country})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getRegionByCountryAsync(ByVal country As String)
            Me.getRegionByCountryAsync(country, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getRegionByCountryAsync(ByVal country As String, ByVal userState As Object)
            If (Me.getRegionByCountryOperationCompleted Is Nothing) Then
                Me.getRegionByCountryOperationCompleted = AddressOf Me.OngetRegionByCountryOperationCompleted
            End If
            Me.InvokeAsync("getRegionByCountry", New Object() {country}, Me.getRegionByCountryOperationCompleted, userState)
        End Sub
        
        Private Sub OngetRegionByCountryOperationCompleted(ByVal arg As Object)
            If (Not (Me.getRegionByCountryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getRegionByCountryCompleted(Me, New getRegionByCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getStateListByCountry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getStateListByCountry(ByVal Country As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getStateListByCountry", New Object() {Country})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getStateListByCountryAsync(ByVal Country As String)
            Me.getStateListByCountryAsync(Country, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getStateListByCountryAsync(ByVal Country As String, ByVal userState As Object)
            If (Me.getStateListByCountryOperationCompleted Is Nothing) Then
                Me.getStateListByCountryOperationCompleted = AddressOf Me.OngetStateListByCountryOperationCompleted
            End If
            Me.InvokeAsync("getStateListByCountry", New Object() {Country}, Me.getStateListByCountryOperationCompleted, userState)
        End Sub
        
        Private Sub OngetStateListByCountryOperationCompleted(ByVal arg As Object)
            If (Not (Me.getStateListByCountryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getStateListByCountryCompleted(Me, New getStateListByCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateOppSalesStage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function updateOppSalesStage(ByVal OppID As String, ByVal SalesStage As String) As Boolean
            Dim results() As Object = Me.Invoke("updateOppSalesStage", New Object() {OppID, SalesStage})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub updateOppSalesStageAsync(ByVal OppID As String, ByVal SalesStage As String)
            Me.updateOppSalesStageAsync(OppID, SalesStage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub updateOppSalesStageAsync(ByVal OppID As String, ByVal SalesStage As String, ByVal userState As Object)
            If (Me.updateOppSalesStageOperationCompleted Is Nothing) Then
                Me.updateOppSalesStageOperationCompleted = AddressOf Me.OnupdateOppSalesStageOperationCompleted
            End If
            Me.InvokeAsync("updateOppSalesStage", New Object() {OppID, SalesStage}, Me.updateOppSalesStageOperationCompleted, userState)
        End Sub
        
        Private Sub OnupdateOppSalesStageOperationCompleted(ByVal arg As Object)
            If (Not (Me.updateOppSalesStageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent updateOppSalesStageCompleted(Me, New updateOppSalesStageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateOpp", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function updateOpp(ByVal OppID As String, ByVal SalesStage As String, ByVal intRevenue As Integer, ByVal dtCloseDate As Date, ByVal strReason As String, ByVal strDescription As String) As Boolean
            Dim results() As Object = Me.Invoke("updateOpp", New Object() {OppID, SalesStage, intRevenue, dtCloseDate, strReason, strDescription})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub updateOppAsync(ByVal OppID As String, ByVal SalesStage As String, ByVal intRevenue As Integer, ByVal dtCloseDate As Date, ByVal strReason As String, ByVal strDescription As String)
            Me.updateOppAsync(OppID, SalesStage, intRevenue, dtCloseDate, strReason, strDescription, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub updateOppAsync(ByVal OppID As String, ByVal SalesStage As String, ByVal intRevenue As Integer, ByVal dtCloseDate As Date, ByVal strReason As String, ByVal strDescription As String, ByVal userState As Object)
            If (Me.updateOppOperationCompleted Is Nothing) Then
                Me.updateOppOperationCompleted = AddressOf Me.OnupdateOppOperationCompleted
            End If
            Me.InvokeAsync("updateOpp", New Object() {OppID, SalesStage, intRevenue, dtCloseDate, strReason, strDescription}, Me.updateOppOperationCompleted, userState)
        End Sub
        
        Private Sub OnupdateOppOperationCompleted(ByVal arg As Object)
            If (Not (Me.updateOppCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent updateOppCompleted(Me, New updateOppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getOppList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getOppList(ByVal ParentID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getOppList", New Object() {ParentID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getOppListAsync(ByVal ParentID As String)
            Me.getOppListAsync(ParentID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getOppListAsync(ByVal ParentID As String, ByVal userState As Object)
            If (Me.getOppListOperationCompleted Is Nothing) Then
                Me.getOppListOperationCompleted = AddressOf Me.OngetOppListOperationCompleted
            End If
            Me.InvokeAsync("getOppList", New Object() {ParentID}, Me.getOppListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetOppListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getOppListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getOppListCompleted(Me, New getOppListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Add_Opp", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Add_Opp(ByVal strName As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strDesc As String, ByVal strEmployeeEmail As String, ByVal strAccountRowID As String) As Boolean
            Dim results() As Object = Me.Invoke("Add_Opp", New Object() {strName, strRevenue, strCurrency, strDesc, strEmployeeEmail, strAccountRowID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Add_OppAsync(ByVal strName As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strDesc As String, ByVal strEmployeeEmail As String, ByVal strAccountRowID As String)
            Me.Add_OppAsync(strName, strRevenue, strCurrency, strDesc, strEmployeeEmail, strAccountRowID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Add_OppAsync(ByVal strName As String, ByVal strRevenue As String, ByVal strCurrency As String, ByVal strDesc As String, ByVal strEmployeeEmail As String, ByVal strAccountRowID As String, ByVal userState As Object)
            If (Me.Add_OppOperationCompleted Is Nothing) Then
                Me.Add_OppOperationCompleted = AddressOf Me.OnAdd_OppOperationCompleted
            End If
            Me.InvokeAsync("Add_Opp", New Object() {strName, strRevenue, strCurrency, strDesc, strEmployeeEmail, strAccountRowID}, Me.Add_OppOperationCompleted, userState)
        End Sub
        
        Private Sub OnAdd_OppOperationCompleted(ByVal arg As Object)
            If (Not (Me.Add_OppCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Add_OppCompleted(Me, New Add_OppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccountList(ByVal strParentID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAccountList", New Object() {strParentID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccountListAsync(ByVal strParentID As String)
            Me.GetAccountListAsync(strParentID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountListAsync(ByVal strParentID As String, ByVal userState As Object)
            If (Me.GetAccountListOperationCompleted Is Nothing) Then
                Me.GetAccountListOperationCompleted = AddressOf Me.OnGetAccountListOperationCompleted
            End If
            Me.InvokeAsync("GetAccountList", New Object() {strParentID}, Me.GetAccountListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountListCompleted(Me, New GetAccountListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckEUZipCode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckEUZipCode(ByVal country As String, ByVal zipcode As String) As String
            Dim results() As Object = Me.Invoke("CheckEUZipCode", New Object() {country, zipcode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckEUZipCodeAsync(ByVal country As String, ByVal zipcode As String)
            Me.CheckEUZipCodeAsync(country, zipcode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckEUZipCodeAsync(ByVal country As String, ByVal zipcode As String, ByVal userState As Object)
            If (Me.CheckEUZipCodeOperationCompleted Is Nothing) Then
                Me.CheckEUZipCodeOperationCompleted = AddressOf Me.OnCheckEUZipCodeOperationCompleted
            End If
            Me.InvokeAsync("CheckEUZipCode", New Object() {country, zipcode}, Me.CheckEUZipCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckEUZipCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckEUZipCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckEUZipCodeCompleted(Me, New CheckEUZipCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DisableUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DisableUser(ByVal id As String, ByVal siteID As String) As Boolean
            Dim results() As Object = Me.Invoke("DisableUser", New Object() {id, siteID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DisableUserAsync(ByVal id As String, ByVal siteID As String)
            Me.DisableUserAsync(id, siteID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DisableUserAsync(ByVal id As String, ByVal siteID As String, ByVal userState As Object)
            If (Me.DisableUserOperationCompleted Is Nothing) Then
                Me.DisableUserOperationCompleted = AddressOf Me.OnDisableUserOperationCompleted
            End If
            Me.InvokeAsync("DisableUser", New Object() {id, siteID}, Me.DisableUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnDisableUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.DisableUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DisableUserCompleted(Me, New DisableUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EnableUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EnableUser(ByVal id As String, ByVal siteID As String) As Boolean
            Dim results() As Object = Me.Invoke("EnableUser", New Object() {id, siteID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EnableUserAsync(ByVal id As String, ByVal siteID As String)
            Me.EnableUserAsync(id, siteID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EnableUserAsync(ByVal id As String, ByVal siteID As String, ByVal userState As Object)
            If (Me.EnableUserOperationCompleted Is Nothing) Then
                Me.EnableUserOperationCompleted = AddressOf Me.OnEnableUserOperationCompleted
            End If
            Me.InvokeAsync("EnableUser", New Object() {id, siteID}, Me.EnableUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnEnableUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnableUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnableUserCompleted(Me, New EnableUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isEmployeeForWebsites", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isEmployeeForWebsites(ByVal id As String) As Boolean
            Dim results() As Object = Me.Invoke("isEmployeeForWebsites", New Object() {id})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isEmployeeForWebsitesAsync(ByVal id As String)
            Me.isEmployeeForWebsitesAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isEmployeeForWebsitesAsync(ByVal id As String, ByVal userState As Object)
            If (Me.isEmployeeForWebsitesOperationCompleted Is Nothing) Then
                Me.isEmployeeForWebsitesOperationCompleted = AddressOf Me.OnisEmployeeForWebsitesOperationCompleted
            End If
            Me.InvokeAsync("isEmployeeForWebsites", New Object() {id}, Me.isEmployeeForWebsitesOperationCompleted, userState)
        End Sub
        
        Private Sub OnisEmployeeForWebsitesOperationCompleted(ByVal arg As Object)
            If (Not (Me.isEmployeeForWebsitesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isEmployeeForWebsitesCompleted(Me, New isEmployeeForWebsitesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMailToAdmin", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendMailToAdmin(ByVal email As String, ByVal rowID_Cotnact As String, ByVal rowID_Activity As String) As Boolean
            Dim results() As Object = Me.Invoke("SendMailToAdmin", New Object() {email, rowID_Cotnact, rowID_Activity})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendMailToAdminAsync(ByVal email As String, ByVal rowID_Cotnact As String, ByVal rowID_Activity As String)
            Me.SendMailToAdminAsync(email, rowID_Cotnact, rowID_Activity, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendMailToAdminAsync(ByVal email As String, ByVal rowID_Cotnact As String, ByVal rowID_Activity As String, ByVal userState As Object)
            If (Me.SendMailToAdminOperationCompleted Is Nothing) Then
                Me.SendMailToAdminOperationCompleted = AddressOf Me.OnSendMailToAdminOperationCompleted
            End If
            Me.InvokeAsync("SendMailToAdmin", New Object() {email, rowID_Cotnact, rowID_Activity}, Me.SendMailToAdminOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendMailToAdminOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendMailToAdminCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendMailToAdminCompleted(Me, New SendMailToAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMailToAdmin2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendMailToAdmin2(ByVal email As String, ByVal rowID_Cotnact As String, ByVal rowID_Activity As String, <System.Xml.Serialization.XmlElementAttribute("isExist")> ByVal isExist1 As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("SendMailToAdmin2", New Object() {email, rowID_Cotnact, rowID_Activity, isExist1})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendMailToAdmin2Async(ByVal email As String, ByVal rowID_Cotnact As String, ByVal rowID_Activity As String, ByVal isExist1 As Boolean)
            Me.SendMailToAdmin2Async(email, rowID_Cotnact, rowID_Activity, isExist1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendMailToAdmin2Async(ByVal email As String, ByVal rowID_Cotnact As String, ByVal rowID_Activity As String, ByVal isExist1 As Boolean, ByVal userState As Object)
            If (Me.SendMailToAdmin2OperationCompleted Is Nothing) Then
                Me.SendMailToAdmin2OperationCompleted = AddressOf Me.OnSendMailToAdmin2OperationCompleted
            End If
            Me.InvokeAsync("SendMailToAdmin2", New Object() {email, rowID_Cotnact, rowID_Activity, isExist1}, Me.SendMailToAdmin2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendMailToAdmin2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendMailToAdmin2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendMailToAdmin2Completed(Me, New SendMailToAdmin2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendNotificationPasswordUpdated", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendNotificationPasswordUpdated(ByVal email As String, ByVal newPassword As String, ByVal userName As String) As Boolean
            Dim results() As Object = Me.Invoke("SendNotificationPasswordUpdated", New Object() {email, newPassword, userName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendNotificationPasswordUpdatedAsync(ByVal email As String, ByVal newPassword As String, ByVal userName As String)
            Me.SendNotificationPasswordUpdatedAsync(email, newPassword, userName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendNotificationPasswordUpdatedAsync(ByVal email As String, ByVal newPassword As String, ByVal userName As String, ByVal userState As Object)
            If (Me.SendNotificationPasswordUpdatedOperationCompleted Is Nothing) Then
                Me.SendNotificationPasswordUpdatedOperationCompleted = AddressOf Me.OnSendNotificationPasswordUpdatedOperationCompleted
            End If
            Me.InvokeAsync("SendNotificationPasswordUpdated", New Object() {email, newPassword, userName}, Me.SendNotificationPasswordUpdatedOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendNotificationPasswordUpdatedOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendNotificationPasswordUpdatedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendNotificationPasswordUpdatedCompleted(Me, New SendNotificationPasswordUpdatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum UserLevel
        
        '''<remarks/>
        None
        
        '''<remarks/>
        GA
        
        '''<remarks/>
        GAWithShippingInfo
        
        '''<remarks/>
        Employee
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class SSOUSER
        
        Private company_idField As String
        
        Private company_nameField As String
        
        Private login_passwordField As String
        
        Private first_nameField As String
        
        Private last_nameField As String
        
        Private email_addrField As String
        
        Private email_addr2Field As String
        
        Private mobileField As String
        
        Private tel_areacodeField As String
        
        Private tel_noField As String
        
        Private tel_extField As String
        
        Private fax_noField As String
        
        Private date_last_changedField As System.Nullable(Of Date)
        
        Private date_registeredField As System.Nullable(Of Date)
        
        Private job_titleField As String
        
        Private job_functionField As String
        
        Private departmentField As String
        
        Private urlField As String
        
        Private primary_org_idField As String
        
        Private created_byField As String
        
        Private business_application_areaField As String
        
        Private business_typeField As String
        
        Private countryField As String
        
        Private countryCodeField As String
        
        Private i_cookieField As Integer
        
        Private addressField As String
        
        Private address2Field As String
        
        Private cityField As String
        
        Private zipField As String
        
        Private stateField As String
        
        Private in_productField As String
        
        Private in_product_valuesField As String
        
        Private sourceField As String
        
        Private create_byuserField As String
        
        Private erpidField As String
        
        Private siebel_raw_idField As String
        
        Private siebel_Act_IDField As String
        
        Private siebel_statusField As String
        
        Private siebel_campaignIDField As String
        
        Private user_statusField As String
        
        Private contact_approachField As String
        
        Private learn_fromField As String
        
        Private howbuyField As String
        
        Private notifyField As String
        
        Private shipto_addressField As String
        
        Private billto_addressField As String
        
        Private axsc_locationField As String
        
        Private vat_numberField As String
        
        Private activateidField As String
        
        Private canseeorderField As Boolean
        
        Private lang_preferField As String
        
        Private reseller_idField As String
        
        Private cnpjField As String
        
        Private inscField As String
        
        Private promotion_codeField As String
        
        Private accountInfoField As AccountInfo
        
        Private accountIDField As String
        
        Private channelidField As Integer
        
        Private channelnameField As String
        
        Private channelwebField As String
        
        Private channelcontactField As String
        
        Private cPTypeField As String
        
        Private buField As String
        
        Private registerPurposeField As String
        
        Private isSavedToSiebelField As Boolean
        
        Private isCreateActivityWhenRegisterField As Boolean
        
        Private legalFormField As String
        
        Private insert_dateField As System.Nullable(Of Date)
        
        Private birthdayField As System.Nullable(Of Date)
        
        Private recommendEmailField As String
        
        Private recommendNameField As String
        
        Private simpleFormCampaignField As String
        
        Private simpleFormDescField As String
        
        Private simpleFormIDField As String
        
        Private utm_sourceField As String
        
        Private utm_mediumField As String
        
        Private utm_campaignField As String
        
        '''<remarks/>
        Public Property company_id() As String
            Get
                Return Me.company_idField
            End Get
            Set
                Me.company_idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property company_name() As String
            Get
                Return Me.company_nameField
            End Get
            Set
                Me.company_nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property login_password() As String
            Get
                Return Me.login_passwordField
            End Get
            Set
                Me.login_passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property first_name() As String
            Get
                Return Me.first_nameField
            End Get
            Set
                Me.first_nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property last_name() As String
            Get
                Return Me.last_nameField
            End Get
            Set
                Me.last_nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property email_addr() As String
            Get
                Return Me.email_addrField
            End Get
            Set
                Me.email_addrField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property email_addr2() As String
            Get
                Return Me.email_addr2Field
            End Get
            Set
                Me.email_addr2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property mobile() As String
            Get
                Return Me.mobileField
            End Get
            Set
                Me.mobileField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property tel_areacode() As String
            Get
                Return Me.tel_areacodeField
            End Get
            Set
                Me.tel_areacodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property tel_no() As String
            Get
                Return Me.tel_noField
            End Get
            Set
                Me.tel_noField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property tel_ext() As String
            Get
                Return Me.tel_extField
            End Get
            Set
                Me.tel_extField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property fax_no() As String
            Get
                Return Me.fax_noField
            End Get
            Set
                Me.fax_noField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property date_last_changed() As System.Nullable(Of Date)
            Get
                Return Me.date_last_changedField
            End Get
            Set
                Me.date_last_changedField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property date_registered() As System.Nullable(Of Date)
            Get
                Return Me.date_registeredField
            End Get
            Set
                Me.date_registeredField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property job_title() As String
            Get
                Return Me.job_titleField
            End Get
            Set
                Me.job_titleField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property job_function() As String
            Get
                Return Me.job_functionField
            End Get
            Set
                Me.job_functionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property department() As String
            Get
                Return Me.departmentField
            End Get
            Set
                Me.departmentField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property url() As String
            Get
                Return Me.urlField
            End Get
            Set
                Me.urlField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property primary_org_id() As String
            Get
                Return Me.primary_org_idField
            End Get
            Set
                Me.primary_org_idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property created_by() As String
            Get
                Return Me.created_byField
            End Get
            Set
                Me.created_byField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property business_application_area() As String
            Get
                Return Me.business_application_areaField
            End Get
            Set
                Me.business_application_areaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property business_type() As String
            Get
                Return Me.business_typeField
            End Get
            Set
                Me.business_typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property country() As String
            Get
                Return Me.countryField
            End Get
            Set
                Me.countryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CountryCode() As String
            Get
                Return Me.countryCodeField
            End Get
            Set
                Me.countryCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property i_cookie() As Integer
            Get
                Return Me.i_cookieField
            End Get
            Set
                Me.i_cookieField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property address() As String
            Get
                Return Me.addressField
            End Get
            Set
                Me.addressField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property address2() As String
            Get
                Return Me.address2Field
            End Get
            Set
                Me.address2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property city() As String
            Get
                Return Me.cityField
            End Get
            Set
                Me.cityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property zip() As String
            Get
                Return Me.zipField
            End Get
            Set
                Me.zipField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property state() As String
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property in_product() As String
            Get
                Return Me.in_productField
            End Get
            Set
                Me.in_productField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property in_product_values() As String
            Get
                Return Me.in_product_valuesField
            End Get
            Set
                Me.in_product_valuesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property source() As String
            Get
                Return Me.sourceField
            End Get
            Set
                Me.sourceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property create_byuser() As String
            Get
                Return Me.create_byuserField
            End Get
            Set
                Me.create_byuserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property erpid() As String
            Get
                Return Me.erpidField
            End Get
            Set
                Me.erpidField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property siebel_raw_id() As String
            Get
                Return Me.siebel_raw_idField
            End Get
            Set
                Me.siebel_raw_idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property siebel_Act_ID() As String
            Get
                Return Me.siebel_Act_IDField
            End Get
            Set
                Me.siebel_Act_IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property siebel_status() As String
            Get
                Return Me.siebel_statusField
            End Get
            Set
                Me.siebel_statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property siebel_campaignID() As String
            Get
                Return Me.siebel_campaignIDField
            End Get
            Set
                Me.siebel_campaignIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property user_status() As String
            Get
                Return Me.user_statusField
            End Get
            Set
                Me.user_statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property contact_approach() As String
            Get
                Return Me.contact_approachField
            End Get
            Set
                Me.contact_approachField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property learn_from() As String
            Get
                Return Me.learn_fromField
            End Get
            Set
                Me.learn_fromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property howbuy() As String
            Get
                Return Me.howbuyField
            End Get
            Set
                Me.howbuyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property notify() As String
            Get
                Return Me.notifyField
            End Get
            Set
                Me.notifyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property shipto_address() As String
            Get
                Return Me.shipto_addressField
            End Get
            Set
                Me.shipto_addressField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property billto_address() As String
            Get
                Return Me.billto_addressField
            End Get
            Set
                Me.billto_addressField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property axsc_location() As String
            Get
                Return Me.axsc_locationField
            End Get
            Set
                Me.axsc_locationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property vat_number() As String
            Get
                Return Me.vat_numberField
            End Get
            Set
                Me.vat_numberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property activateid() As String
            Get
                Return Me.activateidField
            End Get
            Set
                Me.activateidField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property canseeorder() As Boolean
            Get
                Return Me.canseeorderField
            End Get
            Set
                Me.canseeorderField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property lang_prefer() As String
            Get
                Return Me.lang_preferField
            End Get
            Set
                Me.lang_preferField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property reseller_id() As String
            Get
                Return Me.reseller_idField
            End Get
            Set
                Me.reseller_idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property cnpj() As String
            Get
                Return Me.cnpjField
            End Get
            Set
                Me.cnpjField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property insc() As String
            Get
                Return Me.inscField
            End Get
            Set
                Me.inscField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property promotion_code() As String
            Get
                Return Me.promotion_codeField
            End Get
            Set
                Me.promotion_codeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountInfo() As AccountInfo
            Get
                Return Me.accountInfoField
            End Get
            Set
                Me.accountInfoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountID() As String
            Get
                Return Me.accountIDField
            End Get
            Set
                Me.accountIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Channelid() As Integer
            Get
                Return Me.channelidField
            End Get
            Set
                Me.channelidField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Channelname() As String
            Get
                Return Me.channelnameField
            End Get
            Set
                Me.channelnameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Channelweb() As String
            Get
                Return Me.channelwebField
            End Get
            Set
                Me.channelwebField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Channelcontact() As String
            Get
                Return Me.channelcontactField
            End Get
            Set
                Me.channelcontactField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CPType() As String
            Get
                Return Me.cPTypeField
            End Get
            Set
                Me.cPTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BU() As String
            Get
                Return Me.buField
            End Get
            Set
                Me.buField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RegisterPurpose() As String
            Get
                Return Me.registerPurposeField
            End Get
            Set
                Me.registerPurposeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property isSavedToSiebel() As Boolean
            Get
                Return Me.isSavedToSiebelField
            End Get
            Set
                Me.isSavedToSiebelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property isCreateActivityWhenRegister() As Boolean
            Get
                Return Me.isCreateActivityWhenRegisterField
            End Get
            Set
                Me.isCreateActivityWhenRegisterField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property legalForm() As String
            Get
                Return Me.legalFormField
            End Get
            Set
                Me.legalFormField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Insert_date() As System.Nullable(Of Date)
            Get
                Return Me.insert_dateField
            End Get
            Set
                Me.insert_dateField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Birthday() As System.Nullable(Of Date)
            Get
                Return Me.birthdayField
            End Get
            Set
                Me.birthdayField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property recommendEmail() As String
            Get
                Return Me.recommendEmailField
            End Get
            Set
                Me.recommendEmailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property recommendName() As String
            Get
                Return Me.recommendNameField
            End Get
            Set
                Me.recommendNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property simpleFormCampaign() As String
            Get
                Return Me.simpleFormCampaignField
            End Get
            Set
                Me.simpleFormCampaignField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property simpleFormDesc() As String
            Get
                Return Me.simpleFormDescField
            End Get
            Set
                Me.simpleFormDescField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property simpleFormID() As String
            Get
                Return Me.simpleFormIDField
            End Get
            Set
                Me.simpleFormIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property utm_source() As String
            Get
                Return Me.utm_sourceField
            End Get
            Set
                Me.utm_sourceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property utm_medium() As String
            Get
                Return Me.utm_mediumField
            End Get
            Set
                Me.utm_mediumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property utm_campaign() As String
            Get
                Return Me.utm_campaignField
            End Get
            Set
                Me.utm_campaignField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class AccountInfo
        
        Private idField As String
        
        Private nameField As String
        
        Private eRPIDField As String
        
        Private taxIDField As String
        
        Private coutryField As String
        
        Private cityField As String
        
        Private address1Field As String
        
        Private address2Field As String
        
        Private phoneField As String
        
        Private faxField As String
        
        Private busGroupField As String
        
        Private accTypeField As String
        
        Private accStatusField As String
        
        Private primaryRepField As String
        
        Private primaryOrgField As String
        
        Private primaryIndField As String
        
        '''<remarks/>
        Public Property Id() As String
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ERPID() As String
            Get
                Return Me.eRPIDField
            End Get
            Set
                Me.eRPIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TaxID() As String
            Get
                Return Me.taxIDField
            End Get
            Set
                Me.taxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Coutry() As String
            Get
                Return Me.coutryField
            End Get
            Set
                Me.coutryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property City() As String
            Get
                Return Me.cityField
            End Get
            Set
                Me.cityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Address1() As String
            Get
                Return Me.address1Field
            End Get
            Set
                Me.address1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Address2() As String
            Get
                Return Me.address2Field
            End Get
            Set
                Me.address2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Phone() As String
            Get
                Return Me.phoneField
            End Get
            Set
                Me.phoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Fax() As String
            Get
                Return Me.faxField
            End Get
            Set
                Me.faxField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BusGroup() As String
            Get
                Return Me.busGroupField
            End Get
            Set
                Me.busGroupField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccType() As String
            Get
                Return Me.accTypeField
            End Get
            Set
                Me.accTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccStatus() As String
            Get
                Return Me.accStatusField
            End Get
            Set
                Me.accStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PrimaryRep() As String
            Get
                Return Me.primaryRepField
            End Get
            Set
                Me.primaryRepField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PrimaryOrg() As String
            Get
                Return Me.primaryOrgField
            End Get
            Set
                Me.primaryOrgField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PrimaryInd() As String
            Get
                Return Me.primaryIndField
            End Get
            Set
                Me.primaryIndField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class MEMBER_SIMPLE
        
        Private idField As Integer
        
        Private simpleFromIDField As System.Nullable(Of System.Guid)
        
        Private emailField As String
        
        Private firstNameField As String
        
        Private lastNameField As String
        
        Private companyNameField As String
        
        Private phoneAreaCodeField As String
        
        Private phoneNOField As String
        
        Private phoneExtField As String
        
        Private mobileField As String
        
        Private addressField As String
        
        Private countryField As String
        
        Private stateField As String
        
        Private campaignField As String
        
        Private campaignValueField As String
        
        Private answerField As String
        
        Private messageField As String
        
        Private contactRowIDField As String
        
        Private actionRowIDField As String
        
        Private actionTypeField As System.Nullable(Of Integer)
        
        Private createDateField As Date
        
        Private callbackURLField As String
        
        Private callbackURLNameField As String
        
        Private memberSourceField As String
        
        Private memberSourceIDField As String
        
        Private utm_sourceField As String
        
        Private utm_mediumField As String
        
        Private utm_campaignField As String
        
        '''<remarks/>
        Public Property ID() As Integer
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property SimpleFromID() As System.Nullable(Of System.Guid)
            Get
                Return Me.simpleFromIDField
            End Get
            Set
                Me.simpleFromIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Email() As String
            Get
                Return Me.emailField
            End Get
            Set
                Me.emailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FirstName() As String
            Get
                Return Me.firstNameField
            End Get
            Set
                Me.firstNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastName() As String
            Get
                Return Me.lastNameField
            End Get
            Set
                Me.lastNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyName() As String
            Get
                Return Me.companyNameField
            End Get
            Set
                Me.companyNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneAreaCode() As String
            Get
                Return Me.phoneAreaCodeField
            End Get
            Set
                Me.phoneAreaCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneNO() As String
            Get
                Return Me.phoneNOField
            End Get
            Set
                Me.phoneNOField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneExt() As String
            Get
                Return Me.phoneExtField
            End Get
            Set
                Me.phoneExtField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Mobile() As String
            Get
                Return Me.mobileField
            End Get
            Set
                Me.mobileField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Address() As String
            Get
                Return Me.addressField
            End Get
            Set
                Me.addressField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Country() As String
            Get
                Return Me.countryField
            End Get
            Set
                Me.countryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property State() As String
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Campaign() As String
            Get
                Return Me.campaignField
            End Get
            Set
                Me.campaignField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CampaignValue() As String
            Get
                Return Me.campaignValueField
            End Get
            Set
                Me.campaignValueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Answer() As String
            Get
                Return Me.answerField
            End Get
            Set
                Me.answerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Message() As String
            Get
                Return Me.messageField
            End Get
            Set
                Me.messageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ContactRowID() As String
            Get
                Return Me.contactRowIDField
            End Get
            Set
                Me.contactRowIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ActionRowID() As String
            Get
                Return Me.actionRowIDField
            End Get
            Set
                Me.actionRowIDField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property ActionType() As System.Nullable(Of Integer)
            Get
                Return Me.actionTypeField
            End Get
            Set
                Me.actionTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreateDate() As Date
            Get
                Return Me.createDateField
            End Get
            Set
                Me.createDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CallbackURL() As String
            Get
                Return Me.callbackURLField
            End Get
            Set
                Me.callbackURLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CallbackURLName() As String
            Get
                Return Me.callbackURLNameField
            End Get
            Set
                Me.callbackURLNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MemberSource() As String
            Get
                Return Me.memberSourceField
            End Get
            Set
                Me.memberSourceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MemberSourceID() As String
            Get
                Return Me.memberSourceIDField
            End Get
            Set
                Me.memberSourceIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property utm_source() As String
            Get
                Return Me.utm_sourceField
            End Get
            Set
                Me.utm_sourceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property utm_medium() As String
            Get
                Return Me.utm_mediumField
            End Get
            Set
                Me.utm_mediumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property utm_campaign() As String
            Get
                Return Me.utm_campaignField
            End Get
            Set
                Me.utm_campaignField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(OnlineRequestV2)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class OnlineRequest
        
        Private firstNameField As String
        
        Private lastNameField As String
        
        Private companyField As String
        
        Private emailField As String
        
        Private websiteField As String
        
        Private phoneField As String
        
        Private zipCodeField As String
        
        Private addressField As String
        
        Private cityField As String
        
        Private stateField As String
        
        Private countryField As String
        
        Private subjectField As String
        
        Private productCategoryField As String
        
        Private serialNumberField As String
        
        Private productField As String
        
        Private productFunctionField As String
        
        Private osField As String
        
        Private descriptionField As String
        
        Private ownerEmailField As String
        
        Private requestTypeField As Integer
        
        Private activityTypeField As Integer
        
        Private activitySourceField As Integer
        
        Private contactDataSourceField As String
        
        Private userTypeField As Integer
        
        Private requestRowIDField As String
        
        Private contactRowIDField As String
        
        Private logMessageField As String
        
        '''<remarks/>
        Public Property firstName() As String
            Get
                Return Me.firstNameField
            End Get
            Set
                Me.firstNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property lastName() As String
            Get
                Return Me.lastNameField
            End Get
            Set
                Me.lastNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property company() As String
            Get
                Return Me.companyField
            End Get
            Set
                Me.companyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property email() As String
            Get
                Return Me.emailField
            End Get
            Set
                Me.emailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property website() As String
            Get
                Return Me.websiteField
            End Get
            Set
                Me.websiteField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property phone() As String
            Get
                Return Me.phoneField
            End Get
            Set
                Me.phoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property zipCode() As String
            Get
                Return Me.zipCodeField
            End Get
            Set
                Me.zipCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property address() As String
            Get
                Return Me.addressField
            End Get
            Set
                Me.addressField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property city() As String
            Get
                Return Me.cityField
            End Get
            Set
                Me.cityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property state() As String
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property country() As String
            Get
                Return Me.countryField
            End Get
            Set
                Me.countryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property subject() As String
            Get
                Return Me.subjectField
            End Get
            Set
                Me.subjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property productCategory() As String
            Get
                Return Me.productCategoryField
            End Get
            Set
                Me.productCategoryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property serialNumber() As String
            Get
                Return Me.serialNumberField
            End Get
            Set
                Me.serialNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property product() As String
            Get
                Return Me.productField
            End Get
            Set
                Me.productField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property productFunction() As String
            Get
                Return Me.productFunctionField
            End Get
            Set
                Me.productFunctionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property os() As String
            Get
                Return Me.osField
            End Get
            Set
                Me.osField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ownerEmail() As String
            Get
                Return Me.ownerEmailField
            End Get
            Set
                Me.ownerEmailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property requestType() As Integer
            Get
                Return Me.requestTypeField
            End Get
            Set
                Me.requestTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property activityType() As Integer
            Get
                Return Me.activityTypeField
            End Get
            Set
                Me.activityTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property activitySource() As Integer
            Get
                Return Me.activitySourceField
            End Get
            Set
                Me.activitySourceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property contactDataSource() As String
            Get
                Return Me.contactDataSourceField
            End Get
            Set
                Me.contactDataSourceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property userType() As Integer
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property requestRowID() As String
            Get
                Return Me.requestRowIDField
            End Get
            Set
                Me.requestRowIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property contactRowID() As String
            Get
                Return Me.contactRowIDField
            End Get
            Set
                Me.contactRowIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property logMessage() As String
            Get
                Return Me.logMessageField
            End Get
            Set
                Me.logMessageField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class OnlineRequestV2
        Inherits OnlineRequest
        
        Private requestTypeEnumField As EnumRequestType
        
        Private activityTypeEnumField As EnumActivityType
        
        Private activitySourceEnumField As EnumActivitySource
        
        Private userTypeEnumField As EnumUserType
        
        Private cacheTimeField As Date
        
        '''<remarks/>
        Public Property requestTypeEnum() As EnumRequestType
            Get
                Return Me.requestTypeEnumField
            End Get
            Set
                Me.requestTypeEnumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property activityTypeEnum() As EnumActivityType
            Get
                Return Me.activityTypeEnumField
            End Get
            Set
                Me.activityTypeEnumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property activitySourceEnum() As EnumActivitySource
            Get
                Return Me.activitySourceEnumField
            End Get
            Set
                Me.activitySourceEnumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property userTypeEnum() As EnumUserType
            Get
                Return Me.userTypeEnumField
            End Get
            Set
                Me.userTypeEnumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property cacheTime() As Date
            Get
                Return Me.cacheTimeField
            End Get
            Set
                Me.cacheTimeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum EnumRequestType
        
        '''<remarks/>
        None
        
        '''<remarks/>
        Activity
        
        '''<remarks/>
        ServiceRequest
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum EnumActivityType
        
        '''<remarks/>
        None
        
        '''<remarks/>
        WebInbound
        
        '''<remarks/>
        WebInboundSales
        
        '''<remarks/>
        WebInboundService
        
        '''<remarks/>
        eStoreInquiry
        
        '''<remarks/>
        eStoreOrder
        
        '''<remarks/>
        eStoreQuotes
        
        '''<remarks/>
        eStoreRegistration
        
        '''<remarks/>
        EmailInbound
        
        '''<remarks/>
        EmailInboundSales
        
        '''<remarks/>
        EmailInboundService
        
        '''<remarks/>
        EmailOutbound
        
        '''<remarks/>
        EmailOutboundSales
        
        '''<remarks/>
        EmailOutboundService
        
        '''<remarks/>
        OnlineChat
        
        '''<remarks/>
        eStoreAddToCart
        
        '''<remarks/>
        eStoreAbortCheckOut
        
        '''<remarks/>
        eStoreBuildSystem
        
        '''<remarks/>
        eStoreCheckout
        
        '''<remarks/>
        eStoreCustomizeFunction
        
        '''<remarks/>
        eStoreProductCompare
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum EnumActivitySource
        
        '''<remarks/>
        None
        
        '''<remarks/>
        ServiceRequestCorp
        
        '''<remarks/>
        OnlineRegistrationCorpMyAdvantech
        
        '''<remarks/>
        OnlineRegistration
        
        '''<remarks/>
        SalesInquiry
        
        '''<remarks/>
        eStore
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum EnumUserType
        
        '''<remarks/>
        None
        
        '''<remarks/>
        Corpwebsite
        
        '''<remarks/>
        MyAdvantech
        
        '''<remarks/>
        eRMA
        
        '''<remarks/>
        eStore
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub loginCompletedEventHandler(ByVal sender As Object, ByVal e As loginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class loginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub loginAndCheckLevelCompletedEventHandler(ByVal sender As Object, ByVal e As loginAndCheckLevelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class loginAndCheckLevelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property level() As UserLevel
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),UserLevel)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub loginForEUMyAdvantechCompletedEventHandler(ByVal sender As Object, ByVal e As loginForEUMyAdvantechCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class loginForEUMyAdvantechCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub validateTempidCompletedEventHandler(ByVal sender As Object, ByVal e As validateTempidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class validateTempidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub validateTemidEmailCompletedEventHandler(ByVal sender As Object, ByVal e As validateTemidEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class validateTemidEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub validateLoginEmailCompletedEventHandler(ByVal sender As Object, ByVal e As validateLoginEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class validateLoginEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getProfileCompletedEventHandler(ByVal sender As Object, ByVal e As getProfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SSOUSER
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SSOUSER)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub isExistCompletedEventHandler(ByVal sender As Object, ByVal e As isExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getMasterProfileCompletedEventHandler(ByVal sender As Object, ByVal e As getMasterProfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getMasterProfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SSOUSER
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SSOUSER)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getProductInterestListCompletedEventHandler(ByVal sender As Object, ByVal e As getProductInterestListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProductInterestListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getProfile_byFieldCompletedEventHandler(ByVal sender As Object, ByVal e As getProfile_byFieldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProfile_byFieldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub updProfileCompletedEventHandler(ByVal sender As Object, ByVal e As updProfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class updProfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub updProfileByDataSetCompletedEventHandler(ByVal sender As Object, ByVal e As updProfileByDataSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class updProfileByDataSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub updProfileOnlyBasicInfoCompletedEventHandler(ByVal sender As Object, ByVal e As updProfileOnlyBasicInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class updProfileOnlyBasicInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub logoutCompletedEventHandler(ByVal sender As Object, ByVal e As logoutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class logoutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetLatestCZMemberCompletedEventHandler(ByVal sender As Object, ByVal e As GetLatestCZMemberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLatestCZMemberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub chkReqFieldsCompletedEventHandler(ByVal sender As Object, ByVal e As chkReqFieldsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class chkReqFieldsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Siebel_updatePWDCompletedEventHandler(ByVal sender As Object, ByVal e As Siebel_updatePWDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Siebel_updatePWDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Siebel_updateCommentCompletedEventHandler(ByVal sender As Object, ByVal e As Siebel_updateCommentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Siebel_updateCommentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Siebel_updateOrgCompletedEventHandler(ByVal sender As Object, ByVal e As Siebel_updateOrgCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Siebel_updateOrgCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Siebel_savecontactCompletedEventHandler(ByVal sender As Object, ByVal e As Siebel_savecontactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Siebel_savecontactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Siebel_getcontactCompletedEventHandler(ByVal sender As Object, ByVal e As Siebel_getcontactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Siebel_getcontactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SSOUSER
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SSOUSER)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub InsertMemberLogCompletedEventHandler(ByVal sender As Object, ByVal e As InsertMemberLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertMemberLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub InsertMemberLog2CompletedEventHandler(ByVal sender As Object, ByVal e As InsertMemberLog2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertMemberLog2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetLeadsRoutingAdminEmailCompletedEventHandler(ByVal sender As Object, ByVal e As GetLeadsRoutingAdminEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLeadsRoutingAdminEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAdminEmailForRMACompletedEventHandler(ByVal sender As Object, ByVal e As GetAdminEmailForRMACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAdminEmailForRMACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAdminEmailByCountryCompletedEventHandler(ByVal sender As Object, ByVal e As GetAdminEmailByCountryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAdminEmailByCountryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetGeneralEmailByCountryCompletedEventHandler(ByVal sender As Object, ByVal e As GetGeneralEmailByCountryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGeneralEmailByCountryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAdminEmailForPZCompletedEventHandler(ByVal sender As Object, ByVal e As GetAdminEmailForPZCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAdminEmailForPZCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddActivityCompletedEventHandler(ByVal sender As Object, ByVal e As AddActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddActivityWithWSCompletedEventHandler(ByVal sender As Object, ByVal e As AddActivityWithWSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddActivityWithWSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property contactID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property activityID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddOnlineRequestWithWSCompletedEventHandler(ByVal sender As Object, ByVal e As AddOnlineRequestWithWSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddOnlineRequestWithWSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property onlineRequest() As OnlineRequest
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),OnlineRequest)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddOnlineRequestV2WithWSCompletedEventHandler(ByVal sender As Object, ByVal e As AddOnlineRequestV2WithWSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddOnlineRequestV2WithWSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property onlineRequest() As OnlineRequestV2
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),OnlineRequestV2)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddActivityWithEmployeeEmailCompletedEventHandler(ByVal sender As Object, ByVal e As AddActivityWithEmployeeEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddActivityWithEmployeeEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddActivityWithEmployeeEmailToRegionalServerCompletedEventHandler(ByVal sender As Object, ByVal e As AddActivityWithEmployeeEmailToRegionalServerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddActivityWithEmployeeEmailToRegionalServerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddActivityWithEmployeeEmailAndAcitivtyTypeCompletedEventHandler(ByVal sender As Object, ByVal e As AddActivityWithEmployeeEmailAndAcitivtyTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddActivityWithEmployeeEmailAndAcitivtyTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerCompletedEventHandler(ByVal sender As Object, ByVal e As AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddActivityWithEmployeeEmailAndAcitivtyTypeToRegionalServerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerCompletedEventHandler(ByVal sender As Object, ByVal e As AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddActivityWithEmployeeEmailAndAcitivtyTypeOppIDToRegionalServerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddServiceRequestWithAEEmailCompletedEventHandler(ByVal sender As Object, ByVal e As AddServiceRequestWithAEEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddServiceRequestWithAEEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddServiceRequestWithWSCompletedEventHandler(ByVal sender As Object, ByVal e As AddServiceRequestWithWSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddServiceRequestWithWSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property contactID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property srID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddServiceRequestWithAEEmailNotifyEmailCompletedEventHandler(ByVal sender As Object, ByVal e As AddServiceRequestWithAEEmailNotifyEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddServiceRequestWithAEEmailNotifyEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getAddSRDescriptionByRowIDCompletedEventHandler(ByVal sender As Object, ByVal e As getAddSRDescriptionByRowIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAddSRDescriptionByRowIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property notifyEmail() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property subject() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property product() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property country() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property state() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property emailBody() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getSimpleFormLogCompletedEventHandler(ByVal sender As Object, ByVal e As getSimpleFormLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSimpleFormLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As MEMBER_SIMPLE
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),MEMBER_SIMPLE)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getServiceCenterEmailByCountryCompletedEventHandler(ByVal sender As Object, ByVal e As getServiceCenterEmailByCountryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getServiceCenterEmailByCountryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub registerCompletedEventHandler(ByVal sender As Object, ByVal e As registerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class registerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ssouser() As SSOUSER
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),SSOUSER)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getCountryCompletedEventHandler(ByVal sender As Object, ByVal e As getCountryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCountryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getCountryListCompletedEventHandler(ByVal sender As Object, ByVal e As getCountryListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCountryListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getCountryByCountryCompletedEventHandler(ByVal sender As Object, ByVal e As getCountryByCountryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCountryByCountryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getRegionByCountryCompletedEventHandler(ByVal sender As Object, ByVal e As getRegionByCountryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getRegionByCountryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getStateListByCountryCompletedEventHandler(ByVal sender As Object, ByVal e As getStateListByCountryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getStateListByCountryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub updateOppSalesStageCompletedEventHandler(ByVal sender As Object, ByVal e As updateOppSalesStageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class updateOppSalesStageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub updateOppCompletedEventHandler(ByVal sender As Object, ByVal e As updateOppCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class updateOppCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getOppListCompletedEventHandler(ByVal sender As Object, ByVal e As getOppListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getOppListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Add_OppCompletedEventHandler(ByVal sender As Object, ByVal e As Add_OppCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Add_OppCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAccountListCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CheckEUZipCodeCompletedEventHandler(ByVal sender As Object, ByVal e As CheckEUZipCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckEUZipCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DisableUserCompletedEventHandler(ByVal sender As Object, ByVal e As DisableUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DisableUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub EnableUserCompletedEventHandler(ByVal sender As Object, ByVal e As EnableUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EnableUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub isEmployeeForWebsitesCompletedEventHandler(ByVal sender As Object, ByVal e As isEmployeeForWebsitesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isEmployeeForWebsitesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SendMailToAdminCompletedEventHandler(ByVal sender As Object, ByVal e As SendMailToAdminCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendMailToAdminCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SendMailToAdmin2CompletedEventHandler(ByVal sender As Object, ByVal e As SendMailToAdmin2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendMailToAdmin2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SendNotificationPasswordUpdatedCompletedEventHandler(ByVal sender As Object, ByVal e As SendNotificationPasswordUpdatedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendNotificationPasswordUpdatedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
