'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("SAPDS"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class SAPDS
    Inherits Global.System.Data.DataSet
    
    Private tableSAP_PRODUCT_STATUS As SAP_PRODUCT_STATUSDataTable
    
    Private tableSAP_PRODUCT As SAP_PRODUCTDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SAP_PRODUCT_STATUS")) Is Nothing) Then
                MyBase.Tables.Add(New SAP_PRODUCT_STATUSDataTable(ds.Tables("SAP_PRODUCT_STATUS")))
            End If
            If (Not (ds.Tables("SAP_PRODUCT")) Is Nothing) Then
                MyBase.Tables.Add(New SAP_PRODUCTDataTable(ds.Tables("SAP_PRODUCT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SAP_PRODUCT_STATUS() As SAP_PRODUCT_STATUSDataTable
        Get
            Return Me.tableSAP_PRODUCT_STATUS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SAP_PRODUCT() As SAP_PRODUCTDataTable
        Get
            Return Me.tableSAP_PRODUCT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As SAPDS = CType(MyBase.Clone,SAPDS)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("SAP_PRODUCT_STATUS")) Is Nothing) Then
                MyBase.Tables.Add(New SAP_PRODUCT_STATUSDataTable(ds.Tables("SAP_PRODUCT_STATUS")))
            End If
            If (Not (ds.Tables("SAP_PRODUCT")) Is Nothing) Then
                MyBase.Tables.Add(New SAP_PRODUCTDataTable(ds.Tables("SAP_PRODUCT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSAP_PRODUCT_STATUS = CType(MyBase.Tables("SAP_PRODUCT_STATUS"),SAP_PRODUCT_STATUSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSAP_PRODUCT_STATUS) Is Nothing) Then
                Me.tableSAP_PRODUCT_STATUS.InitVars
            End If
        End If
        Me.tableSAP_PRODUCT = CType(MyBase.Tables("SAP_PRODUCT"),SAP_PRODUCTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSAP_PRODUCT) Is Nothing) Then
                Me.tableSAP_PRODUCT.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "SAPDS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/SAPDS.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSAP_PRODUCT_STATUS = New SAP_PRODUCT_STATUSDataTable()
        MyBase.Tables.Add(Me.tableSAP_PRODUCT_STATUS)
        Me.tableSAP_PRODUCT = New SAP_PRODUCTDataTable()
        MyBase.Tables.Add(Me.tableSAP_PRODUCT)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSAP_PRODUCT_STATUS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSAP_PRODUCT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As SAPDS = New SAPDS()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SAP_PRODUCT_STATUSRowChangeEventHandler(ByVal sender As Object, ByVal e As SAP_PRODUCT_STATUSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SAP_PRODUCTRowChangeEventHandler(ByVal sender As Object, ByVal e As SAP_PRODUCTRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SAP_PRODUCT_STATUSDataTable
        Inherits Global.System.Data.TypedTableBase(Of SAP_PRODUCT_STATUSRow)
        
        Private columnPART_NO As Global.System.Data.DataColumn
        
        Private columnMODEL_NO As Global.System.Data.DataColumn
        
        Private columnMATERIAL_GROUP As Global.System.Data.DataColumn
        
        Private columnPRODUCT_GROUP As Global.System.Data.DataColumn
        
        Private columnPRODUCT_DIVISION As Global.System.Data.DataColumn
        
        Private columnPRODUCT_LINE As Global.System.Data.DataColumn
        
        Private columnGENITEMCATGRP As Global.System.Data.DataColumn
        
        Private columnPRODUCT_DESC As Global.System.Data.DataColumn
        
        Private columnROHS_FLAG As Global.System.Data.DataColumn
        
        Private columnEGROUP As Global.System.Data.DataColumn
        
        Private columnEDIVISION As Global.System.Data.DataColumn
        
        Private columnNET_WEIGHT As Global.System.Data.DataColumn
        
        Private columnGROSS_WEIGHT As Global.System.Data.DataColumn
        
        Private columnWEIGHT_UNIT As Global.System.Data.DataColumn
        
        Private columnVOLUME As Global.System.Data.DataColumn
        
        Private columnVOLUME_UNIT As Global.System.Data.DataColumn
        
        Private columnCREATE_DATE As Global.System.Data.DataColumn
        
        Private columnLAST_UPD_DATE As Global.System.Data.DataColumn
        
        Private columnPRODUCT_TYPE As Global.System.Data.DataColumn
        
        Private columnGIP_CODE As Global.System.Data.DataColumn
        
        Private columnSIZE_DIMENSIONS As Global.System.Data.DataColumn
        
        Private columnSALES_ORG As Global.System.Data.DataColumn
        
        Private columnPRODUCT_STATUS As Global.System.Data.DataColumn
        
        Private columnMIN_ORDER_QTY As Global.System.Data.DataColumn
        
        Private columnDLV_PLANT As Global.System.Data.DataColumn
        
        Private columnMATERIAL_PRICING_GRP As Global.System.Data.DataColumn
        
        Private columnVALID_DATE As Global.System.Data.DataColumn
        
        Private columnITEM_CATEGORY_GROUP As Global.System.Data.DataColumn
        
        Private columnPLANT As Global.System.Data.DataColumn
        
        Private columnABC_INDICATOR As Global.System.Data.DataColumn
        
        Private columnEXTENDED_DESC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SAP_PRODUCT_STATUS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PART_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPART_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MODEL_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MATERIAL_GROUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATERIAL_GROUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODUCT_GROUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_GROUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODUCT_DIVISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_DIVISION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODUCT_LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_LINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GENITEMCATGRPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGENITEMCATGRP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODUCT_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ROHS_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROHS_FLAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EGROUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEGROUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EDIVISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEDIVISION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NET_WEIGHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNET_WEIGHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GROSS_WEIGHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGROSS_WEIGHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WEIGHT_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWEIGHT_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VOLUMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVOLUME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VOLUME_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVOLUME_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LAST_UPD_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAST_UPD_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODUCT_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GIP_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGIP_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SIZE_DIMENSIONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSIZE_DIMENSIONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SALES_ORGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSALES_ORG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODUCT_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MIN_ORDER_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMIN_ORDER_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DLV_PLANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDLV_PLANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MATERIAL_PRICING_GRPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATERIAL_PRICING_GRP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VALID_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALID_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ITEM_CATEGORY_GROUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_CATEGORY_GROUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLANTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLANT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ABC_INDICATORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnABC_INDICATOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTENDED_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTENDED_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SAP_PRODUCT_STATUSRow
            Get
                Return CType(Me.Rows(index),SAP_PRODUCT_STATUSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SAP_PRODUCT_STATUSRowChanging As SAP_PRODUCT_STATUSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SAP_PRODUCT_STATUSRowChanged As SAP_PRODUCT_STATUSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SAP_PRODUCT_STATUSRowDeleting As SAP_PRODUCT_STATUSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SAP_PRODUCT_STATUSRowDeleted As SAP_PRODUCT_STATUSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSAP_PRODUCT_STATUSRow(ByVal row As SAP_PRODUCT_STATUSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSAP_PRODUCT_STATUSRow( _
                    ByVal PART_NO As String,  _
                    ByVal MODEL_NO As String,  _
                    ByVal MATERIAL_GROUP As String,  _
                    ByVal PRODUCT_GROUP As String,  _
                    ByVal PRODUCT_DIVISION As String,  _
                    ByVal PRODUCT_LINE As String,  _
                    ByVal GENITEMCATGRP As String,  _
                    ByVal PRODUCT_DESC As String,  _
                    ByVal ROHS_FLAG As String,  _
                    ByVal EGROUP As String,  _
                    ByVal EDIVISION As String,  _
                    ByVal NET_WEIGHT As Double,  _
                    ByVal GROSS_WEIGHT As Double,  _
                    ByVal WEIGHT_UNIT As String,  _
                    ByVal VOLUME As Double,  _
                    ByVal VOLUME_UNIT As String,  _
                    ByVal CREATE_DATE As String,  _
                    ByVal LAST_UPD_DATE As String,  _
                    ByVal PRODUCT_TYPE As String,  _
                    ByVal GIP_CODE As String,  _
                    ByVal SIZE_DIMENSIONS As String,  _
                    ByVal SALES_ORG As String,  _
                    ByVal PRODUCT_STATUS As String,  _
                    ByVal MIN_ORDER_QTY As Decimal,  _
                    ByVal DLV_PLANT As String,  _
                    ByVal MATERIAL_PRICING_GRP As String,  _
                    ByVal VALID_DATE As String,  _
                    ByVal ITEM_CATEGORY_GROUP As String,  _
                    ByVal PLANT As String,  _
                    ByVal ABC_INDICATOR As String,  _
                    ByVal EXTENDED_DESC As String) As SAP_PRODUCT_STATUSRow
            Dim rowSAP_PRODUCT_STATUSRow As SAP_PRODUCT_STATUSRow = CType(Me.NewRow,SAP_PRODUCT_STATUSRow)
            Dim columnValuesArray() As Object = New Object() {PART_NO, MODEL_NO, MATERIAL_GROUP, PRODUCT_GROUP, PRODUCT_DIVISION, PRODUCT_LINE, GENITEMCATGRP, PRODUCT_DESC, ROHS_FLAG, EGROUP, EDIVISION, NET_WEIGHT, GROSS_WEIGHT, WEIGHT_UNIT, VOLUME, VOLUME_UNIT, CREATE_DATE, LAST_UPD_DATE, PRODUCT_TYPE, GIP_CODE, SIZE_DIMENSIONS, SALES_ORG, PRODUCT_STATUS, MIN_ORDER_QTY, DLV_PLANT, MATERIAL_PRICING_GRP, VALID_DATE, ITEM_CATEGORY_GROUP, PLANT, ABC_INDICATOR, EXTENDED_DESC}
            rowSAP_PRODUCT_STATUSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSAP_PRODUCT_STATUSRow)
            Return rowSAP_PRODUCT_STATUSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SAP_PRODUCT_STATUSDataTable = CType(MyBase.Clone,SAP_PRODUCT_STATUSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SAP_PRODUCT_STATUSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPART_NO = MyBase.Columns("PART_NO")
            Me.columnMODEL_NO = MyBase.Columns("MODEL_NO")
            Me.columnMATERIAL_GROUP = MyBase.Columns("MATERIAL_GROUP")
            Me.columnPRODUCT_GROUP = MyBase.Columns("PRODUCT_GROUP")
            Me.columnPRODUCT_DIVISION = MyBase.Columns("PRODUCT_DIVISION")
            Me.columnPRODUCT_LINE = MyBase.Columns("PRODUCT_LINE")
            Me.columnGENITEMCATGRP = MyBase.Columns("GENITEMCATGRP")
            Me.columnPRODUCT_DESC = MyBase.Columns("PRODUCT_DESC")
            Me.columnROHS_FLAG = MyBase.Columns("ROHS_FLAG")
            Me.columnEGROUP = MyBase.Columns("EGROUP")
            Me.columnEDIVISION = MyBase.Columns("EDIVISION")
            Me.columnNET_WEIGHT = MyBase.Columns("NET_WEIGHT")
            Me.columnGROSS_WEIGHT = MyBase.Columns("GROSS_WEIGHT")
            Me.columnWEIGHT_UNIT = MyBase.Columns("WEIGHT_UNIT")
            Me.columnVOLUME = MyBase.Columns("VOLUME")
            Me.columnVOLUME_UNIT = MyBase.Columns("VOLUME_UNIT")
            Me.columnCREATE_DATE = MyBase.Columns("CREATE_DATE")
            Me.columnLAST_UPD_DATE = MyBase.Columns("LAST_UPD_DATE")
            Me.columnPRODUCT_TYPE = MyBase.Columns("PRODUCT_TYPE")
            Me.columnGIP_CODE = MyBase.Columns("GIP_CODE")
            Me.columnSIZE_DIMENSIONS = MyBase.Columns("SIZE_DIMENSIONS")
            Me.columnSALES_ORG = MyBase.Columns("SALES_ORG")
            Me.columnPRODUCT_STATUS = MyBase.Columns("PRODUCT_STATUS")
            Me.columnMIN_ORDER_QTY = MyBase.Columns("MIN_ORDER_QTY")
            Me.columnDLV_PLANT = MyBase.Columns("DLV_PLANT")
            Me.columnMATERIAL_PRICING_GRP = MyBase.Columns("MATERIAL_PRICING_GRP")
            Me.columnVALID_DATE = MyBase.Columns("VALID_DATE")
            Me.columnITEM_CATEGORY_GROUP = MyBase.Columns("ITEM_CATEGORY_GROUP")
            Me.columnPLANT = MyBase.Columns("PLANT")
            Me.columnABC_INDICATOR = MyBase.Columns("ABC_INDICATOR")
            Me.columnEXTENDED_DESC = MyBase.Columns("EXTENDED_DESC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPART_NO = New Global.System.Data.DataColumn("PART_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPART_NO)
            Me.columnMODEL_NO = New Global.System.Data.DataColumn("MODEL_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_NO)
            Me.columnMATERIAL_GROUP = New Global.System.Data.DataColumn("MATERIAL_GROUP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATERIAL_GROUP)
            Me.columnPRODUCT_GROUP = New Global.System.Data.DataColumn("PRODUCT_GROUP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_GROUP)
            Me.columnPRODUCT_DIVISION = New Global.System.Data.DataColumn("PRODUCT_DIVISION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_DIVISION)
            Me.columnPRODUCT_LINE = New Global.System.Data.DataColumn("PRODUCT_LINE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_LINE)
            Me.columnGENITEMCATGRP = New Global.System.Data.DataColumn("GENITEMCATGRP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGENITEMCATGRP)
            Me.columnPRODUCT_DESC = New Global.System.Data.DataColumn("PRODUCT_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_DESC)
            Me.columnROHS_FLAG = New Global.System.Data.DataColumn("ROHS_FLAG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROHS_FLAG)
            Me.columnEGROUP = New Global.System.Data.DataColumn("EGROUP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEGROUP)
            Me.columnEDIVISION = New Global.System.Data.DataColumn("EDIVISION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEDIVISION)
            Me.columnNET_WEIGHT = New Global.System.Data.DataColumn("NET_WEIGHT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNET_WEIGHT)
            Me.columnGROSS_WEIGHT = New Global.System.Data.DataColumn("GROSS_WEIGHT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGROSS_WEIGHT)
            Me.columnWEIGHT_UNIT = New Global.System.Data.DataColumn("WEIGHT_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWEIGHT_UNIT)
            Me.columnVOLUME = New Global.System.Data.DataColumn("VOLUME", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVOLUME)
            Me.columnVOLUME_UNIT = New Global.System.Data.DataColumn("VOLUME_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVOLUME_UNIT)
            Me.columnCREATE_DATE = New Global.System.Data.DataColumn("CREATE_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATE_DATE)
            Me.columnLAST_UPD_DATE = New Global.System.Data.DataColumn("LAST_UPD_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAST_UPD_DATE)
            Me.columnPRODUCT_TYPE = New Global.System.Data.DataColumn("PRODUCT_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_TYPE)
            Me.columnGIP_CODE = New Global.System.Data.DataColumn("GIP_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGIP_CODE)
            Me.columnSIZE_DIMENSIONS = New Global.System.Data.DataColumn("SIZE_DIMENSIONS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSIZE_DIMENSIONS)
            Me.columnSALES_ORG = New Global.System.Data.DataColumn("SALES_ORG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSALES_ORG)
            Me.columnPRODUCT_STATUS = New Global.System.Data.DataColumn("PRODUCT_STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_STATUS)
            Me.columnMIN_ORDER_QTY = New Global.System.Data.DataColumn("MIN_ORDER_QTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMIN_ORDER_QTY)
            Me.columnDLV_PLANT = New Global.System.Data.DataColumn("DLV_PLANT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDLV_PLANT)
            Me.columnMATERIAL_PRICING_GRP = New Global.System.Data.DataColumn("MATERIAL_PRICING_GRP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATERIAL_PRICING_GRP)
            Me.columnVALID_DATE = New Global.System.Data.DataColumn("VALID_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALID_DATE)
            Me.columnITEM_CATEGORY_GROUP = New Global.System.Data.DataColumn("ITEM_CATEGORY_GROUP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_CATEGORY_GROUP)
            Me.columnPLANT = New Global.System.Data.DataColumn("PLANT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLANT)
            Me.columnABC_INDICATOR = New Global.System.Data.DataColumn("ABC_INDICATOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnABC_INDICATOR)
            Me.columnEXTENDED_DESC = New Global.System.Data.DataColumn("EXTENDED_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTENDED_DESC)
            Me.columnPART_NO.AllowDBNull = false
            Me.columnPART_NO.MaxLength = 54
            Me.columnMODEL_NO.AllowDBNull = false
            Me.columnMODEL_NO.MaxLength = 54
            Me.columnMATERIAL_GROUP.AllowDBNull = false
            Me.columnMATERIAL_GROUP.MaxLength = 27
            Me.columnPRODUCT_GROUP.AllowDBNull = false
            Me.columnPRODUCT_GROUP.MaxLength = 54
            Me.columnPRODUCT_DIVISION.AllowDBNull = false
            Me.columnPRODUCT_DIVISION.MaxLength = 54
            Me.columnPRODUCT_LINE.AllowDBNull = false
            Me.columnPRODUCT_LINE.MaxLength = 54
            Me.columnGENITEMCATGRP.AllowDBNull = false
            Me.columnGENITEMCATGRP.MaxLength = 12
            Me.columnPRODUCT_DESC.MaxLength = 120
            Me.columnROHS_FLAG.AllowDBNull = false
            Me.columnROHS_FLAG.MaxLength = 12
            Me.columnEGROUP.MaxLength = 50
            Me.columnEDIVISION.MaxLength = 50
            Me.columnNET_WEIGHT.DefaultValue = CType(0R,Double)
            Me.columnGROSS_WEIGHT.DefaultValue = CType(0R,Double)
            Me.columnWEIGHT_UNIT.MaxLength = 50
            Me.columnVOLUME.DefaultValue = CType(0R,Double)
            Me.columnVOLUME_UNIT.MaxLength = 50
            Me.columnCREATE_DATE.MaxLength = 24
            Me.columnLAST_UPD_DATE.MaxLength = 24
            Me.columnPRODUCT_TYPE.MaxLength = 30
            Me.columnGIP_CODE.MaxLength = 20
            Me.columnSIZE_DIMENSIONS.MaxLength = 96
            Me.columnSALES_ORG.MaxLength = 12
            Me.columnPRODUCT_STATUS.MaxLength = 6
            Me.columnMIN_ORDER_QTY.DefaultValue = CType(0D,Decimal)
            Me.columnDLV_PLANT.MaxLength = 12
            Me.columnMATERIAL_PRICING_GRP.MaxLength = 6
            Me.columnVALID_DATE.MaxLength = 24
            Me.columnITEM_CATEGORY_GROUP.MaxLength = 50
            Me.columnPLANT.MaxLength = 12
            Me.columnABC_INDICATOR.MaxLength = 6
            Me.columnEXTENDED_DESC.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSAP_PRODUCT_STATUSRow() As SAP_PRODUCT_STATUSRow
            Return CType(Me.NewRow,SAP_PRODUCT_STATUSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SAP_PRODUCT_STATUSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SAP_PRODUCT_STATUSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SAP_PRODUCT_STATUSRowChangedEvent) Is Nothing) Then
                RaiseEvent SAP_PRODUCT_STATUSRowChanged(Me, New SAP_PRODUCT_STATUSRowChangeEvent(CType(e.Row,SAP_PRODUCT_STATUSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SAP_PRODUCT_STATUSRowChangingEvent) Is Nothing) Then
                RaiseEvent SAP_PRODUCT_STATUSRowChanging(Me, New SAP_PRODUCT_STATUSRowChangeEvent(CType(e.Row,SAP_PRODUCT_STATUSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SAP_PRODUCT_STATUSRowDeletedEvent) Is Nothing) Then
                RaiseEvent SAP_PRODUCT_STATUSRowDeleted(Me, New SAP_PRODUCT_STATUSRowChangeEvent(CType(e.Row,SAP_PRODUCT_STATUSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SAP_PRODUCT_STATUSRowDeletingEvent) Is Nothing) Then
                RaiseEvent SAP_PRODUCT_STATUSRowDeleting(Me, New SAP_PRODUCT_STATUSRowChangeEvent(CType(e.Row,SAP_PRODUCT_STATUSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSAP_PRODUCT_STATUSRow(ByVal row As SAP_PRODUCT_STATUSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SAPDS = New SAPDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SAP_PRODUCT_STATUSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SAP_PRODUCTDataTable
        Inherits Global.System.Data.TypedTableBase(Of SAP_PRODUCTRow)
        
        Private columnPART_NO As Global.System.Data.DataColumn
        
        Private columnMODEL_NO As Global.System.Data.DataColumn
        
        Private columnMATERIAL_GROUP As Global.System.Data.DataColumn
        
        Private columnDIVISION As Global.System.Data.DataColumn
        
        Private columnPRODUCT_HIERARCHY As Global.System.Data.DataColumn
        
        Private columnPRODUCT_GROUP As Global.System.Data.DataColumn
        
        Private columnPRODUCT_DIVISION As Global.System.Data.DataColumn
        
        Private columnPRODUCT_LINE As Global.System.Data.DataColumn
        
        Private columnGENITEMCATGRP As Global.System.Data.DataColumn
        
        Private columnPRODUCT_DESC As Global.System.Data.DataColumn
        
        Private columnROHS_FLAG As Global.System.Data.DataColumn
        
        Private columnEGROUP As Global.System.Data.DataColumn
        
        Private columnSTATUS As Global.System.Data.DataColumn
        
        Private columnEDIVISION As Global.System.Data.DataColumn
        
        Private columnNET_WEIGHT As Global.System.Data.DataColumn
        
        Private columnVOLUME As Global.System.Data.DataColumn
        
        Private columnWEIGHT_UNIT As Global.System.Data.DataColumn
        
        Private columnGROSS_WEIGHT As Global.System.Data.DataColumn
        
        Private columnVOLUME_UNIT As Global.System.Data.DataColumn
        
        Private columnPRODUCT_TYPE As Global.System.Data.DataColumn
        
        Private columnLAST_UPD_DATE As Global.System.Data.DataColumn
        
        Private columnCREATE_DATE As Global.System.Data.DataColumn
        
        Private columnSIZE_DIMENSIONS As Global.System.Data.DataColumn
        
        Private columnGIP_CODE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SAP_PRODUCT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PART_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPART_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MODEL_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODEL_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MATERIAL_GROUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATERIAL_GROUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DIVISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIVISION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODUCT_HIERARCHYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_HIERARCHY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODUCT_GROUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_GROUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODUCT_DIVISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_DIVISION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODUCT_LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_LINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GENITEMCATGRPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGENITEMCATGRP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODUCT_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ROHS_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROHS_FLAG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EGROUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEGROUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EDIVISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEDIVISION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NET_WEIGHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNET_WEIGHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VOLUMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVOLUME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WEIGHT_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWEIGHT_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GROSS_WEIGHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGROSS_WEIGHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VOLUME_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVOLUME_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODUCT_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCT_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LAST_UPD_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAST_UPD_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SIZE_DIMENSIONSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSIZE_DIMENSIONS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GIP_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGIP_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SAP_PRODUCTRow
            Get
                Return CType(Me.Rows(index),SAP_PRODUCTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SAP_PRODUCTRowChanging As SAP_PRODUCTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SAP_PRODUCTRowChanged As SAP_PRODUCTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SAP_PRODUCTRowDeleting As SAP_PRODUCTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SAP_PRODUCTRowDeleted As SAP_PRODUCTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSAP_PRODUCTRow(ByVal row As SAP_PRODUCTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSAP_PRODUCTRow( _
                    ByVal PART_NO As String,  _
                    ByVal MODEL_NO As String,  _
                    ByVal MATERIAL_GROUP As String,  _
                    ByVal DIVISION As String,  _
                    ByVal PRODUCT_HIERARCHY As String,  _
                    ByVal PRODUCT_GROUP As String,  _
                    ByVal PRODUCT_DIVISION As String,  _
                    ByVal PRODUCT_LINE As String,  _
                    ByVal GENITEMCATGRP As String,  _
                    ByVal PRODUCT_DESC As String,  _
                    ByVal ROHS_FLAG As String,  _
                    ByVal EGROUP As String,  _
                    ByVal STATUS As String,  _
                    ByVal EDIVISION As String,  _
                    ByVal NET_WEIGHT As Double,  _
                    ByVal VOLUME As Double,  _
                    ByVal WEIGHT_UNIT As String,  _
                    ByVal GROSS_WEIGHT As Double,  _
                    ByVal VOLUME_UNIT As String,  _
                    ByVal PRODUCT_TYPE As String,  _
                    ByVal LAST_UPD_DATE As String,  _
                    ByVal CREATE_DATE As String,  _
                    ByVal SIZE_DIMENSIONS As String,  _
                    ByVal GIP_CODE As String) As SAP_PRODUCTRow
            Dim rowSAP_PRODUCTRow As SAP_PRODUCTRow = CType(Me.NewRow,SAP_PRODUCTRow)
            Dim columnValuesArray() As Object = New Object() {PART_NO, MODEL_NO, MATERIAL_GROUP, DIVISION, PRODUCT_HIERARCHY, PRODUCT_GROUP, PRODUCT_DIVISION, PRODUCT_LINE, GENITEMCATGRP, PRODUCT_DESC, ROHS_FLAG, EGROUP, STATUS, EDIVISION, NET_WEIGHT, VOLUME, WEIGHT_UNIT, GROSS_WEIGHT, VOLUME_UNIT, PRODUCT_TYPE, LAST_UPD_DATE, CREATE_DATE, SIZE_DIMENSIONS, GIP_CODE}
            rowSAP_PRODUCTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSAP_PRODUCTRow)
            Return rowSAP_PRODUCTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPART_NO(ByVal PART_NO As String) As SAP_PRODUCTRow
            Return CType(Me.Rows.Find(New Object() {PART_NO}),SAP_PRODUCTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SAP_PRODUCTDataTable = CType(MyBase.Clone,SAP_PRODUCTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SAP_PRODUCTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPART_NO = MyBase.Columns("PART_NO")
            Me.columnMODEL_NO = MyBase.Columns("MODEL_NO")
            Me.columnMATERIAL_GROUP = MyBase.Columns("MATERIAL_GROUP")
            Me.columnDIVISION = MyBase.Columns("DIVISION")
            Me.columnPRODUCT_HIERARCHY = MyBase.Columns("PRODUCT_HIERARCHY")
            Me.columnPRODUCT_GROUP = MyBase.Columns("PRODUCT_GROUP")
            Me.columnPRODUCT_DIVISION = MyBase.Columns("PRODUCT_DIVISION")
            Me.columnPRODUCT_LINE = MyBase.Columns("PRODUCT_LINE")
            Me.columnGENITEMCATGRP = MyBase.Columns("GENITEMCATGRP")
            Me.columnPRODUCT_DESC = MyBase.Columns("PRODUCT_DESC")
            Me.columnROHS_FLAG = MyBase.Columns("ROHS_FLAG")
            Me.columnEGROUP = MyBase.Columns("EGROUP")
            Me.columnSTATUS = MyBase.Columns("STATUS")
            Me.columnEDIVISION = MyBase.Columns("EDIVISION")
            Me.columnNET_WEIGHT = MyBase.Columns("NET_WEIGHT")
            Me.columnVOLUME = MyBase.Columns("VOLUME")
            Me.columnWEIGHT_UNIT = MyBase.Columns("WEIGHT_UNIT")
            Me.columnGROSS_WEIGHT = MyBase.Columns("GROSS_WEIGHT")
            Me.columnVOLUME_UNIT = MyBase.Columns("VOLUME_UNIT")
            Me.columnPRODUCT_TYPE = MyBase.Columns("PRODUCT_TYPE")
            Me.columnLAST_UPD_DATE = MyBase.Columns("LAST_UPD_DATE")
            Me.columnCREATE_DATE = MyBase.Columns("CREATE_DATE")
            Me.columnSIZE_DIMENSIONS = MyBase.Columns("SIZE_DIMENSIONS")
            Me.columnGIP_CODE = MyBase.Columns("GIP_CODE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPART_NO = New Global.System.Data.DataColumn("PART_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPART_NO)
            Me.columnMODEL_NO = New Global.System.Data.DataColumn("MODEL_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODEL_NO)
            Me.columnMATERIAL_GROUP = New Global.System.Data.DataColumn("MATERIAL_GROUP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATERIAL_GROUP)
            Me.columnDIVISION = New Global.System.Data.DataColumn("DIVISION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIVISION)
            Me.columnPRODUCT_HIERARCHY = New Global.System.Data.DataColumn("PRODUCT_HIERARCHY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_HIERARCHY)
            Me.columnPRODUCT_GROUP = New Global.System.Data.DataColumn("PRODUCT_GROUP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_GROUP)
            Me.columnPRODUCT_DIVISION = New Global.System.Data.DataColumn("PRODUCT_DIVISION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_DIVISION)
            Me.columnPRODUCT_LINE = New Global.System.Data.DataColumn("PRODUCT_LINE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_LINE)
            Me.columnGENITEMCATGRP = New Global.System.Data.DataColumn("GENITEMCATGRP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGENITEMCATGRP)
            Me.columnPRODUCT_DESC = New Global.System.Data.DataColumn("PRODUCT_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_DESC)
            Me.columnROHS_FLAG = New Global.System.Data.DataColumn("ROHS_FLAG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROHS_FLAG)
            Me.columnEGROUP = New Global.System.Data.DataColumn("EGROUP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEGROUP)
            Me.columnSTATUS = New Global.System.Data.DataColumn("STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS)
            Me.columnEDIVISION = New Global.System.Data.DataColumn("EDIVISION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEDIVISION)
            Me.columnNET_WEIGHT = New Global.System.Data.DataColumn("NET_WEIGHT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNET_WEIGHT)
            Me.columnVOLUME = New Global.System.Data.DataColumn("VOLUME", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVOLUME)
            Me.columnWEIGHT_UNIT = New Global.System.Data.DataColumn("WEIGHT_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWEIGHT_UNIT)
            Me.columnGROSS_WEIGHT = New Global.System.Data.DataColumn("GROSS_WEIGHT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGROSS_WEIGHT)
            Me.columnVOLUME_UNIT = New Global.System.Data.DataColumn("VOLUME_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVOLUME_UNIT)
            Me.columnPRODUCT_TYPE = New Global.System.Data.DataColumn("PRODUCT_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCT_TYPE)
            Me.columnLAST_UPD_DATE = New Global.System.Data.DataColumn("LAST_UPD_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAST_UPD_DATE)
            Me.columnCREATE_DATE = New Global.System.Data.DataColumn("CREATE_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATE_DATE)
            Me.columnSIZE_DIMENSIONS = New Global.System.Data.DataColumn("SIZE_DIMENSIONS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSIZE_DIMENSIONS)
            Me.columnGIP_CODE = New Global.System.Data.DataColumn("GIP_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGIP_CODE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPART_NO}, true))
            Me.columnPART_NO.AllowDBNull = false
            Me.columnPART_NO.Unique = true
            Me.columnPART_NO.MaxLength = 54
            Me.columnMODEL_NO.AllowDBNull = false
            Me.columnMODEL_NO.MaxLength = 54
            Me.columnMATERIAL_GROUP.AllowDBNull = false
            Me.columnMATERIAL_GROUP.MaxLength = 27
            Me.columnDIVISION.AllowDBNull = false
            Me.columnDIVISION.MaxLength = 6
            Me.columnPRODUCT_HIERARCHY.AllowDBNull = false
            Me.columnPRODUCT_HIERARCHY.MaxLength = 54
            Me.columnPRODUCT_GROUP.AllowDBNull = false
            Me.columnPRODUCT_GROUP.MaxLength = 54
            Me.columnPRODUCT_DIVISION.AllowDBNull = false
            Me.columnPRODUCT_DIVISION.MaxLength = 54
            Me.columnPRODUCT_LINE.AllowDBNull = false
            Me.columnPRODUCT_LINE.MaxLength = 54
            Me.columnGENITEMCATGRP.AllowDBNull = false
            Me.columnGENITEMCATGRP.MaxLength = 12
            Me.columnPRODUCT_DESC.MaxLength = 120
            Me.columnROHS_FLAG.AllowDBNull = false
            Me.columnROHS_FLAG.MaxLength = 12
            Me.columnEGROUP.MaxLength = 50
            Me.columnSTATUS.MaxLength = 50
            Me.columnEDIVISION.MaxLength = 50
            Me.columnWEIGHT_UNIT.MaxLength = 50
            Me.columnVOLUME_UNIT.MaxLength = 50
            Me.columnPRODUCT_TYPE.MaxLength = 30
            Me.columnLAST_UPD_DATE.MaxLength = 24
            Me.columnCREATE_DATE.MaxLength = 24
            Me.columnSIZE_DIMENSIONS.MaxLength = 96
            Me.columnGIP_CODE.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSAP_PRODUCTRow() As SAP_PRODUCTRow
            Return CType(Me.NewRow,SAP_PRODUCTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SAP_PRODUCTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SAP_PRODUCTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SAP_PRODUCTRowChangedEvent) Is Nothing) Then
                RaiseEvent SAP_PRODUCTRowChanged(Me, New SAP_PRODUCTRowChangeEvent(CType(e.Row,SAP_PRODUCTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SAP_PRODUCTRowChangingEvent) Is Nothing) Then
                RaiseEvent SAP_PRODUCTRowChanging(Me, New SAP_PRODUCTRowChangeEvent(CType(e.Row,SAP_PRODUCTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SAP_PRODUCTRowDeletedEvent) Is Nothing) Then
                RaiseEvent SAP_PRODUCTRowDeleted(Me, New SAP_PRODUCTRowChangeEvent(CType(e.Row,SAP_PRODUCTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SAP_PRODUCTRowDeletingEvent) Is Nothing) Then
                RaiseEvent SAP_PRODUCTRowDeleting(Me, New SAP_PRODUCTRowChangeEvent(CType(e.Row,SAP_PRODUCTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSAP_PRODUCTRow(ByVal row As SAP_PRODUCTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SAPDS = New SAPDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SAP_PRODUCTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SAP_PRODUCT_STATUSRow
        Inherits Global.System.Data.DataRow
        
        Private tableSAP_PRODUCT_STATUS As SAP_PRODUCT_STATUSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSAP_PRODUCT_STATUS = CType(Me.Table,SAP_PRODUCT_STATUSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PART_NO() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT_STATUS.PART_NOColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.PART_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MODEL_NO() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT_STATUS.MODEL_NOColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.MODEL_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MATERIAL_GROUP() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT_STATUS.MATERIAL_GROUPColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.MATERIAL_GROUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCT_GROUP() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT_STATUS.PRODUCT_GROUPColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.PRODUCT_GROUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCT_DIVISION() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT_STATUS.PRODUCT_DIVISIONColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.PRODUCT_DIVISIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCT_LINE() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT_STATUS.PRODUCT_LINEColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.PRODUCT_LINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GENITEMCATGRP() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT_STATUS.GENITEMCATGRPColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.GENITEMCATGRPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCT_DESC() As String
            Get
                If Me.IsPRODUCT_DESCNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.PRODUCT_DESCColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.PRODUCT_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ROHS_FLAG() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT_STATUS.ROHS_FLAGColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.ROHS_FLAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EGROUP() As String
            Get
                If Me.IsEGROUPNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.EGROUPColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.EGROUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EDIVISION() As String
            Get
                If Me.IsEDIVISIONNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.EDIVISIONColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.EDIVISIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NET_WEIGHT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.NET_WEIGHTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NET_WEIGHT' in table 'SAP_PRODUCT_STATUS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.NET_WEIGHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GROSS_WEIGHT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.GROSS_WEIGHTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GROSS_WEIGHT' in table 'SAP_PRODUCT_STATUS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.GROSS_WEIGHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WEIGHT_UNIT() As String
            Get
                If Me.IsWEIGHT_UNITNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.WEIGHT_UNITColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.WEIGHT_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VOLUME() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.VOLUMEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VOLUME' in table 'SAP_PRODUCT_STATUS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.VOLUMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VOLUME_UNIT() As String
            Get
                If Me.IsVOLUME_UNITNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.VOLUME_UNITColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.VOLUME_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATE_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.CREATE_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATE_DATE' in table 'SAP_PRODUCT_STATUS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.CREATE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LAST_UPD_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.LAST_UPD_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAST_UPD_DATE' in table 'SAP_PRODUCT_STATUS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.LAST_UPD_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCT_TYPE() As String
            Get
                If Me.IsPRODUCT_TYPENull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.PRODUCT_TYPEColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.PRODUCT_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GIP_CODE() As String
            Get
                If Me.IsGIP_CODENull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.GIP_CODEColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.GIP_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SIZE_DIMENSIONS() As String
            Get
                If Me.IsSIZE_DIMENSIONSNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.SIZE_DIMENSIONSColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.SIZE_DIMENSIONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SALES_ORG() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.SALES_ORGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SALES_ORG' in table 'SAP_PRODUCT_STATUS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.SALES_ORGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCT_STATUS() As String
            Get
                If Me.IsPRODUCT_STATUSNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.PRODUCT_STATUSColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.PRODUCT_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MIN_ORDER_QTY() As Decimal
            Get
                If Me.IsMIN_ORDER_QTYNull Then
                    Return 0D
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.MIN_ORDER_QTYColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.MIN_ORDER_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DLV_PLANT() As String
            Get
                If Me.IsDLV_PLANTNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.DLV_PLANTColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.DLV_PLANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MATERIAL_PRICING_GRP() As String
            Get
                If Me.IsMATERIAL_PRICING_GRPNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.MATERIAL_PRICING_GRPColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.MATERIAL_PRICING_GRPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VALID_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.VALID_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VALID_DATE' in table 'SAP_PRODUCT_STATUS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.VALID_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ITEM_CATEGORY_GROUP() As String
            Get
                If Me.IsITEM_CATEGORY_GROUPNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.ITEM_CATEGORY_GROUPColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.ITEM_CATEGORY_GROUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLANT() As String
            Get
                If Me.IsPLANTNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.PLANTColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.PLANTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ABC_INDICATOR() As String
            Get
                If Me.IsABC_INDICATORNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.ABC_INDICATORColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.ABC_INDICATORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTENDED_DESC() As String
            Get
                If Me.IsEXTENDED_DESCNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableSAP_PRODUCT_STATUS.EXTENDED_DESCColumn),String)
                End If
            End Get
            Set
                Me(Me.tableSAP_PRODUCT_STATUS.EXTENDED_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRODUCT_DESCNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.PRODUCT_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRODUCT_DESCNull()
            Me(Me.tableSAP_PRODUCT_STATUS.PRODUCT_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEGROUPNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.EGROUPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEGROUPNull()
            Me(Me.tableSAP_PRODUCT_STATUS.EGROUPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEDIVISIONNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.EDIVISIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEDIVISIONNull()
            Me(Me.tableSAP_PRODUCT_STATUS.EDIVISIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNET_WEIGHTNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.NET_WEIGHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNET_WEIGHTNull()
            Me(Me.tableSAP_PRODUCT_STATUS.NET_WEIGHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGROSS_WEIGHTNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.GROSS_WEIGHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGROSS_WEIGHTNull()
            Me(Me.tableSAP_PRODUCT_STATUS.GROSS_WEIGHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWEIGHT_UNITNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.WEIGHT_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWEIGHT_UNITNull()
            Me(Me.tableSAP_PRODUCT_STATUS.WEIGHT_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVOLUMENull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.VOLUMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVOLUMENull()
            Me(Me.tableSAP_PRODUCT_STATUS.VOLUMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVOLUME_UNITNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.VOLUME_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVOLUME_UNITNull()
            Me(Me.tableSAP_PRODUCT_STATUS.VOLUME_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATE_DATENull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.CREATE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATE_DATENull()
            Me(Me.tableSAP_PRODUCT_STATUS.CREATE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLAST_UPD_DATENull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.LAST_UPD_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLAST_UPD_DATENull()
            Me(Me.tableSAP_PRODUCT_STATUS.LAST_UPD_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRODUCT_TYPENull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.PRODUCT_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRODUCT_TYPENull()
            Me(Me.tableSAP_PRODUCT_STATUS.PRODUCT_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGIP_CODENull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.GIP_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGIP_CODENull()
            Me(Me.tableSAP_PRODUCT_STATUS.GIP_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSIZE_DIMENSIONSNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.SIZE_DIMENSIONSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSIZE_DIMENSIONSNull()
            Me(Me.tableSAP_PRODUCT_STATUS.SIZE_DIMENSIONSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSALES_ORGNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.SALES_ORGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSALES_ORGNull()
            Me(Me.tableSAP_PRODUCT_STATUS.SALES_ORGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRODUCT_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.PRODUCT_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRODUCT_STATUSNull()
            Me(Me.tableSAP_PRODUCT_STATUS.PRODUCT_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMIN_ORDER_QTYNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.MIN_ORDER_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMIN_ORDER_QTYNull()
            Me(Me.tableSAP_PRODUCT_STATUS.MIN_ORDER_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDLV_PLANTNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.DLV_PLANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDLV_PLANTNull()
            Me(Me.tableSAP_PRODUCT_STATUS.DLV_PLANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMATERIAL_PRICING_GRPNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.MATERIAL_PRICING_GRPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMATERIAL_PRICING_GRPNull()
            Me(Me.tableSAP_PRODUCT_STATUS.MATERIAL_PRICING_GRPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVALID_DATENull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.VALID_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVALID_DATENull()
            Me(Me.tableSAP_PRODUCT_STATUS.VALID_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsITEM_CATEGORY_GROUPNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.ITEM_CATEGORY_GROUPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetITEM_CATEGORY_GROUPNull()
            Me(Me.tableSAP_PRODUCT_STATUS.ITEM_CATEGORY_GROUPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLANTNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.PLANTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLANTNull()
            Me(Me.tableSAP_PRODUCT_STATUS.PLANTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsABC_INDICATORNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.ABC_INDICATORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetABC_INDICATORNull()
            Me(Me.tableSAP_PRODUCT_STATUS.ABC_INDICATORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTENDED_DESCNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT_STATUS.EXTENDED_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTENDED_DESCNull()
            Me(Me.tableSAP_PRODUCT_STATUS.EXTENDED_DESCColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SAP_PRODUCTRow
        Inherits Global.System.Data.DataRow
        
        Private tableSAP_PRODUCT As SAP_PRODUCTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSAP_PRODUCT = CType(Me.Table,SAP_PRODUCTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PART_NO() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT.PART_NOColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.PART_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MODEL_NO() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT.MODEL_NOColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.MODEL_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MATERIAL_GROUP() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT.MATERIAL_GROUPColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.MATERIAL_GROUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DIVISION() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT.DIVISIONColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.DIVISIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCT_HIERARCHY() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT.PRODUCT_HIERARCHYColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.PRODUCT_HIERARCHYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCT_GROUP() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT.PRODUCT_GROUPColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.PRODUCT_GROUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCT_DIVISION() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT.PRODUCT_DIVISIONColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.PRODUCT_DIVISIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCT_LINE() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT.PRODUCT_LINEColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.PRODUCT_LINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GENITEMCATGRP() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT.GENITEMCATGRPColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.GENITEMCATGRPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCT_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT.PRODUCT_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODUCT_DESC' in table 'SAP_PRODUCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.PRODUCT_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ROHS_FLAG() As String
            Get
                Return CType(Me(Me.tableSAP_PRODUCT.ROHS_FLAGColumn),String)
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.ROHS_FLAGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EGROUP() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT.EGROUPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EGROUP' in table 'SAP_PRODUCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.EGROUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT.STATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUS' in table 'SAP_PRODUCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EDIVISION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT.EDIVISIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EDIVISION' in table 'SAP_PRODUCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.EDIVISIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NET_WEIGHT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT.NET_WEIGHTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NET_WEIGHT' in table 'SAP_PRODUCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.NET_WEIGHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VOLUME() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT.VOLUMEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VOLUME' in table 'SAP_PRODUCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.VOLUMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WEIGHT_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT.WEIGHT_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WEIGHT_UNIT' in table 'SAP_PRODUCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.WEIGHT_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GROSS_WEIGHT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT.GROSS_WEIGHTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GROSS_WEIGHT' in table 'SAP_PRODUCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.GROSS_WEIGHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VOLUME_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT.VOLUME_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VOLUME_UNIT' in table 'SAP_PRODUCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.VOLUME_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCT_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT.PRODUCT_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODUCT_TYPE' in table 'SAP_PRODUCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.PRODUCT_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LAST_UPD_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT.LAST_UPD_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LAST_UPD_DATE' in table 'SAP_PRODUCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.LAST_UPD_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATE_DATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT.CREATE_DATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATE_DATE' in table 'SAP_PRODUCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.CREATE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SIZE_DIMENSIONS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT.SIZE_DIMENSIONSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SIZE_DIMENSIONS' in table 'SAP_PRODUCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.SIZE_DIMENSIONSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GIP_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSAP_PRODUCT.GIP_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GIP_CODE' in table 'SAP_PRODUCT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSAP_PRODUCT.GIP_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRODUCT_DESCNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT.PRODUCT_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRODUCT_DESCNull()
            Me(Me.tableSAP_PRODUCT.PRODUCT_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEGROUPNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT.EGROUPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEGROUPNull()
            Me(Me.tableSAP_PRODUCT.EGROUPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT.STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSTATUSNull()
            Me(Me.tableSAP_PRODUCT.STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEDIVISIONNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT.EDIVISIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEDIVISIONNull()
            Me(Me.tableSAP_PRODUCT.EDIVISIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNET_WEIGHTNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT.NET_WEIGHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNET_WEIGHTNull()
            Me(Me.tableSAP_PRODUCT.NET_WEIGHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVOLUMENull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT.VOLUMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVOLUMENull()
            Me(Me.tableSAP_PRODUCT.VOLUMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWEIGHT_UNITNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT.WEIGHT_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWEIGHT_UNITNull()
            Me(Me.tableSAP_PRODUCT.WEIGHT_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGROSS_WEIGHTNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT.GROSS_WEIGHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGROSS_WEIGHTNull()
            Me(Me.tableSAP_PRODUCT.GROSS_WEIGHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVOLUME_UNITNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT.VOLUME_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVOLUME_UNITNull()
            Me(Me.tableSAP_PRODUCT.VOLUME_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRODUCT_TYPENull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT.PRODUCT_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRODUCT_TYPENull()
            Me(Me.tableSAP_PRODUCT.PRODUCT_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLAST_UPD_DATENull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT.LAST_UPD_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLAST_UPD_DATENull()
            Me(Me.tableSAP_PRODUCT.LAST_UPD_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATE_DATENull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT.CREATE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATE_DATENull()
            Me(Me.tableSAP_PRODUCT.CREATE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSIZE_DIMENSIONSNull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT.SIZE_DIMENSIONSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSIZE_DIMENSIONSNull()
            Me(Me.tableSAP_PRODUCT.SIZE_DIMENSIONSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGIP_CODENull() As Boolean
            Return Me.IsNull(Me.tableSAP_PRODUCT.GIP_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGIP_CODENull()
            Me(Me.tableSAP_PRODUCT.GIP_CODEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SAP_PRODUCT_STATUSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SAP_PRODUCT_STATUSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SAP_PRODUCT_STATUSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SAP_PRODUCT_STATUSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SAP_PRODUCTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SAP_PRODUCTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SAP_PRODUCTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SAP_PRODUCTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace SAPDSTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SAP_PRODUCT_STATUSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SAP_PRODUCT_STATUS"
            tableMapping.ColumnMappings.Add("PART_NO", "PART_NO")
            tableMapping.ColumnMappings.Add("MODEL_NO", "MODEL_NO")
            tableMapping.ColumnMappings.Add("MATERIAL_GROUP", "MATERIAL_GROUP")
            tableMapping.ColumnMappings.Add("PRODUCT_GROUP", "PRODUCT_GROUP")
            tableMapping.ColumnMappings.Add("PRODUCT_DIVISION", "PRODUCT_DIVISION")
            tableMapping.ColumnMappings.Add("PRODUCT_LINE", "PRODUCT_LINE")
            tableMapping.ColumnMappings.Add("GENITEMCATGRP", "GENITEMCATGRP")
            tableMapping.ColumnMappings.Add("PRODUCT_DESC", "PRODUCT_DESC")
            tableMapping.ColumnMappings.Add("ROHS_FLAG", "ROHS_FLAG")
            tableMapping.ColumnMappings.Add("EGROUP", "EGROUP")
            tableMapping.ColumnMappings.Add("EDIVISION", "EDIVISION")
            tableMapping.ColumnMappings.Add("NET_WEIGHT", "NET_WEIGHT")
            tableMapping.ColumnMappings.Add("GROSS_WEIGHT", "GROSS_WEIGHT")
            tableMapping.ColumnMappings.Add("WEIGHT_UNIT", "WEIGHT_UNIT")
            tableMapping.ColumnMappings.Add("VOLUME", "VOLUME")
            tableMapping.ColumnMappings.Add("VOLUME_UNIT", "VOLUME_UNIT")
            tableMapping.ColumnMappings.Add("CREATE_DATE", "CREATE_DATE")
            tableMapping.ColumnMappings.Add("LAST_UPD_DATE", "LAST_UPD_DATE")
            tableMapping.ColumnMappings.Add("PRODUCT_TYPE", "PRODUCT_TYPE")
            tableMapping.ColumnMappings.Add("GIP_CODE", "GIP_CODE")
            tableMapping.ColumnMappings.Add("SIZE_DIMENSIONS", "SIZE_DIMENSIONS")
            tableMapping.ColumnMappings.Add("SALES_ORG", "SALES_ORG")
            tableMapping.ColumnMappings.Add("PRODUCT_STATUS", "PRODUCT_STATUS")
            tableMapping.ColumnMappings.Add("MIN_ORDER_QTY", "MIN_ORDER_QTY")
            tableMapping.ColumnMappings.Add("DLV_PLANT", "DLV_PLANT")
            tableMapping.ColumnMappings.Add("MATERIAL_PRICING_GRP", "MATERIAL_PRICING_GRP")
            tableMapping.ColumnMappings.Add("VALID_DATE", "VALID_DATE")
            tableMapping.ColumnMappings.Add("ITEM_CATEGORY_GROUP", "ITEM_CATEGORY_GROUP")
            tableMapping.ColumnMappings.Add("PLANT", "PLANT")
            tableMapping.ColumnMappings.Add("ABC_INDICATOR", "ABC_INDICATOR")
            tableMapping.ColumnMappings.Add("EXTENDED_DESC", "EXTENDED_DESC")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("MY").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT          a.PART_NO, a.MODEL_NO, a.MATERIAL_GROUP, a.PRODUCT_GROUP, a.PRODU"& _ 
                "CT_DIVISION, a.PRODUCT_LINE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            a.GENITEMCATGRP, a.PR"& _ 
                "ODUCT_DESC, a.ROHS_FLAG, a.EGROUP, a.EDIVISION, a.NET_WEIGHT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "            a.GROSS_WEIGHT, a.WEIGHT_UNIT, a.VOLUME, a.VOLUME_UNIT, a.CREATE_DAT"& _ 
                "E, a.LAST_UPD_DATE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            a.PRODUCT_TYPE, a.GIP_CODE, a."& _ 
                "SIZE_DIMENSIONS, b.SALES_ORG, b.PRODUCT_STATUS, b.MIN_ORDER_QTY, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "               b.DLV_PLANT, b.MATERIAL_PRICING_GRP, b.VALID_DATE, b.ITEM_CATEGOR"& _ 
                "Y_GROUP, c.PLANT, c.ABC_INDICATOR,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                             d.EXTENDED_DESC"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM              SAP_PRODUCT AS a INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            SAP"& _ 
                "_PRODUCT_STATUS_ORDERABLE AS b ON a.PART_NO = b.PART_NO LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                     SAP_PRODUCT_ABC AS c ON a.PART_NO = c.PART_NO AND b.DLV_PLA"& _ 
                "NT = c.PLANT LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            SAP_PRODUCT_EXT_DESC A"& _ 
                "S d ON a.PART_NO = d.PART_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE          (a.PART_NO = @PN) AND (b.SALES_ORG "& _ 
                "= @SALESORG)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PN", Global.System.Data.SqlDbType.NVarChar, 54, Global.System.Data.ParameterDirection.Input, 0, 0, "PART_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SALESORG", Global.System.Data.SqlDbType.NVarChar, 12, Global.System.Data.ParameterDirection.Input, 0, 0, "SALES_ORG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal PN As String, ByVal SALESORG As String) As SAPDS.SAP_PRODUCT_STATUSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PN")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PN,String)
            End If
            If (SALESORG Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SALESORG,String)
            End If
            Dim dataTable As SAPDS.SAP_PRODUCT_STATUSDataTable = New SAPDS.SAP_PRODUCT_STATUSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SAP_PRODUCTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SAP_PRODUCT"
            tableMapping.ColumnMappings.Add("PART_NO", "PART_NO")
            tableMapping.ColumnMappings.Add("MODEL_NO", "MODEL_NO")
            tableMapping.ColumnMappings.Add("MATERIAL_GROUP", "MATERIAL_GROUP")
            tableMapping.ColumnMappings.Add("DIVISION", "DIVISION")
            tableMapping.ColumnMappings.Add("PRODUCT_HIERARCHY", "PRODUCT_HIERARCHY")
            tableMapping.ColumnMappings.Add("PRODUCT_GROUP", "PRODUCT_GROUP")
            tableMapping.ColumnMappings.Add("PRODUCT_DIVISION", "PRODUCT_DIVISION")
            tableMapping.ColumnMappings.Add("PRODUCT_LINE", "PRODUCT_LINE")
            tableMapping.ColumnMappings.Add("GENITEMCATGRP", "GENITEMCATGRP")
            tableMapping.ColumnMappings.Add("PRODUCT_DESC", "PRODUCT_DESC")
            tableMapping.ColumnMappings.Add("ROHS_FLAG", "ROHS_FLAG")
            tableMapping.ColumnMappings.Add("EGROUP", "EGROUP")
            tableMapping.ColumnMappings.Add("STATUS", "STATUS")
            tableMapping.ColumnMappings.Add("EDIVISION", "EDIVISION")
            tableMapping.ColumnMappings.Add("NET_WEIGHT", "NET_WEIGHT")
            tableMapping.ColumnMappings.Add("VOLUME", "VOLUME")
            tableMapping.ColumnMappings.Add("WEIGHT_UNIT", "WEIGHT_UNIT")
            tableMapping.ColumnMappings.Add("GROSS_WEIGHT", "GROSS_WEIGHT")
            tableMapping.ColumnMappings.Add("VOLUME_UNIT", "VOLUME_UNIT")
            tableMapping.ColumnMappings.Add("PRODUCT_TYPE", "PRODUCT_TYPE")
            tableMapping.ColumnMappings.Add("LAST_UPD_DATE", "LAST_UPD_DATE")
            tableMapping.ColumnMappings.Add("CREATE_DATE", "CREATE_DATE")
            tableMapping.ColumnMappings.Add("SIZE_DIMENSIONS", "SIZE_DIMENSIONS")
            tableMapping.ColumnMappings.Add("GIP_CODE", "GIP_CODE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SAP_PRODUCT] WHERE (([PART_NO] = @Original_PART_NO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PART_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PART_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SAP_PRODUCT] ([PART_NO], [MODEL_NO], [MATERIAL_GROUP], [DIVISION], ["& _ 
                "PRODUCT_HIERARCHY], [PRODUCT_GROUP], [PRODUCT_DIVISION], [PRODUCT_LINE], [GENITE"& _ 
                "MCATGRP], [PRODUCT_DESC], [ROHS_FLAG], [EGROUP], [STATUS], [EDIVISION], [NET_WEI"& _ 
                "GHT], [VOLUME], [WEIGHT_UNIT], [GROSS_WEIGHT], [VOLUME_UNIT], [PRODUCT_TYPE], [L"& _ 
                "AST_UPD_DATE], [CREATE_DATE], [SIZE_DIMENSIONS], [GIP_CODE]) VALUES (@PART_NO, @"& _ 
                "MODEL_NO, @MATERIAL_GROUP, @DIVISION, @PRODUCT_HIERARCHY, @PRODUCT_GROUP, @PRODU"& _ 
                "CT_DIVISION, @PRODUCT_LINE, @GENITEMCATGRP, @PRODUCT_DESC, @ROHS_FLAG, @EGROUP, "& _ 
                "@STATUS, @EDIVISION, @NET_WEIGHT, @VOLUME, @WEIGHT_UNIT, @GROSS_WEIGHT, @VOLUME_"& _ 
                "UNIT, @PRODUCT_TYPE, @LAST_UPD_DATE, @CREATE_DATE, @SIZE_DIMENSIONS, @GIP_CODE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PART_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PART_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATERIAL_GROUP", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATERIAL_GROUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIVISION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIVISION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCT_HIERARCHY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCT_HIERARCHY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCT_GROUP", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCT_GROUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCT_DIVISION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCT_DIVISION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCT_LINE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCT_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GENITEMCATGRP", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GENITEMCATGRP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCT_DESC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCT_DESC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ROHS_FLAG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROHS_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EGROUP", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EGROUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EDIVISION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EDIVISION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NET_WEIGHT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NET_WEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VOLUME", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOLUME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WEIGHT_UNIT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WEIGHT_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GROSS_WEIGHT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GROSS_WEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VOLUME_UNIT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOLUME_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCT_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCT_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAST_UPD_DATE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAST_UPD_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATE_DATE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SIZE_DIMENSIONS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SIZE_DIMENSIONS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GIP_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GIP_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SAP_PRODUCT] SET [PART_NO] = @PART_NO, [MODEL_NO] = @MODEL_NO, [MATERIAL_"& _ 
                "GROUP] = @MATERIAL_GROUP, [DIVISION] = @DIVISION, [PRODUCT_HIERARCHY] = @PRODUCT"& _ 
                "_HIERARCHY, [PRODUCT_GROUP] = @PRODUCT_GROUP, [PRODUCT_DIVISION] = @PRODUCT_DIVI"& _ 
                "SION, [PRODUCT_LINE] = @PRODUCT_LINE, [GENITEMCATGRP] = @GENITEMCATGRP, [PRODUCT"& _ 
                "_DESC] = @PRODUCT_DESC, [ROHS_FLAG] = @ROHS_FLAG, [EGROUP] = @EGROUP, [STATUS] ="& _ 
                " @STATUS, [EDIVISION] = @EDIVISION, [NET_WEIGHT] = @NET_WEIGHT, [VOLUME] = @VOLU"& _ 
                "ME, [WEIGHT_UNIT] = @WEIGHT_UNIT, [GROSS_WEIGHT] = @GROSS_WEIGHT, [VOLUME_UNIT] "& _ 
                "= @VOLUME_UNIT, [PRODUCT_TYPE] = @PRODUCT_TYPE, [LAST_UPD_DATE] = @LAST_UPD_DATE"& _ 
                ", [CREATE_DATE] = @CREATE_DATE, [SIZE_DIMENSIONS] = @SIZE_DIMENSIONS, [GIP_CODE]"& _ 
                " = @GIP_CODE WHERE (([PART_NO] = @Original_PART_NO))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PART_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PART_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODEL_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODEL_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MATERIAL_GROUP", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MATERIAL_GROUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIVISION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIVISION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCT_HIERARCHY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCT_HIERARCHY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCT_GROUP", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCT_GROUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCT_DIVISION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCT_DIVISION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCT_LINE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCT_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GENITEMCATGRP", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GENITEMCATGRP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCT_DESC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCT_DESC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ROHS_FLAG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ROHS_FLAG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EGROUP", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EGROUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EDIVISION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EDIVISION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NET_WEIGHT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NET_WEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VOLUME", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOLUME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WEIGHT_UNIT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WEIGHT_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GROSS_WEIGHT", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GROSS_WEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VOLUME_UNIT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOLUME_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRODUCT_TYPE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRODUCT_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LAST_UPD_DATE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LAST_UPD_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATE_DATE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SIZE_DIMENSIONS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SIZE_DIMENSIONS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GIP_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GIP_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PART_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PART_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("B2B").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     PART_NO, MODEL_NO, MATERIAL_GROUP, DIVISION, PRODUCT_HIERARCHY, PRODUC"& _ 
                "T_GROUP, PRODUCT_DIVISION, PRODUCT_LINE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      GENITEMCATGRP, "& _ 
                "PRODUCT_DESC, ROHS_FLAG, EGROUP, STATUS, EDIVISION, NET_WEIGHT, VOLUME, WEIGHT_U"& _ 
                "NIT, GROSS_WEIGHT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      VOLUME_UNIT, PRODUCT_TYPE, LAST_UPD_D"& _ 
                "ATE, CREATE_DATE, SIZE_DIMENSIONS, GIP_CODE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         SAP_PRODUCT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE    "& _ 
                " (PART_NO = @PN)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PN", Global.System.Data.SqlDbType.NVarChar, 54, Global.System.Data.ParameterDirection.Input, 0, 0, "PART_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT          top 1 PRODUCT_LINE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM              SAP_PRODUCT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE         "& _ 
                " (PART_NO = @PN)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PN", Global.System.Data.SqlDbType.NVarChar, 54, Global.System.Data.ParameterDirection.Input, 0, 0, "PART_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal PN As String) As SAPDS.SAP_PRODUCTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PN")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PN,String)
            End If
            Dim dataTable As SAPDS.SAP_PRODUCTDataTable = New SAPDS.SAP_PRODUCTDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SAPDS.SAP_PRODUCTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SAPDS) As Integer
            Return Me.Adapter.Update(dataSet, "SAP_PRODUCT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetProductLineByPN(ByVal PN As String) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (PN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PN")
            Else
                command.Parameters(0).Value = CType(PN,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
    End Class
End Namespace
