'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18063
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="eQuotation")>  _
Partial Public Class SiebelQuoteDBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertSiebelQuoteMaster(instance As SiebelQuoteMaster)
    End Sub
  Partial Private Sub UpdateSiebelQuoteMaster(instance As SiebelQuoteMaster)
    End Sub
  Partial Private Sub DeleteSiebelQuoteMaster(instance As SiebelQuoteMaster)
    End Sub
  Partial Private Sub InsertSiebelQuoteDetail(instance As SiebelQuoteDetail)
    End Sub
  Partial Private Sub UpdateSiebelQuoteDetail(instance As SiebelQuoteDetail)
    End Sub
  Partial Private Sub DeleteSiebelQuoteDetail(instance As SiebelQuoteDetail)
    End Sub
  #End Region
	
	Public Sub New()
        MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("EQ").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property SiebelQuoteMasters() As System.Data.Linq.Table(Of SiebelQuoteMaster)
		Get
			Return Me.GetTable(Of SiebelQuoteMaster)
		End Get
	End Property
	
	Public ReadOnly Property SiebelQuoteDetails() As System.Data.Linq.Table(Of SiebelQuoteDetail)
		Get
			Return Me.GetTable(Of SiebelQuoteDetail)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SiebelQuoteMaster")>  _
Partial Public Class SiebelQuoteMaster
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _QuoteRowid As String
	
	Private _AccountRowid As String
	
	Private _AccountErpid As String
	
	Private _OptyID As String
	
	Private _OptyName As String
	
	Private _OptyStage As String
	
	Private _OptyAmount As System.Nullable(Of Decimal)
	
	Private _CreateTime As System.Nullable(Of Date)
	
	Private _CreateBy As String
	
	Private _SiebelQuoteDetails As EntitySet(Of SiebelQuoteDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnQuoteRowidChanging(value As String)
    End Sub
    Partial Private Sub OnQuoteRowidChanged()
    End Sub
    Partial Private Sub OnAccountRowidChanging(value As String)
    End Sub
    Partial Private Sub OnAccountRowidChanged()
    End Sub
    Partial Private Sub OnAccountErpidChanging(value As String)
    End Sub
    Partial Private Sub OnAccountErpidChanged()
    End Sub
    Partial Private Sub OnOptyIDChanging(value As String)
    End Sub
    Partial Private Sub OnOptyIDChanged()
    End Sub
    Partial Private Sub OnOptyNameChanging(value As String)
    End Sub
    Partial Private Sub OnOptyNameChanged()
    End Sub
    Partial Private Sub OnOptyStageChanging(value As String)
    End Sub
    Partial Private Sub OnOptyStageChanged()
    End Sub
    Partial Private Sub OnOptyAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOptyAmountChanged()
    End Sub
    Partial Private Sub OnCreateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateTimeChanged()
    End Sub
    Partial Private Sub OnCreateByChanging(value As String)
    End Sub
    Partial Private Sub OnCreateByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SiebelQuoteDetails = New EntitySet(Of SiebelQuoteDetail)(AddressOf Me.attach_SiebelQuoteDetails, AddressOf Me.detach_SiebelQuoteDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuoteRowid", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property QuoteRowid() As String
		Get
			Return Me._QuoteRowid
		End Get
		Set
			If (String.Equals(Me._QuoteRowid, value) = false) Then
				Me.OnQuoteRowidChanging(value)
				Me.SendPropertyChanging
				Me._QuoteRowid = value
				Me.SendPropertyChanged("QuoteRowid")
				Me.OnQuoteRowidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountRowid", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AccountRowid() As String
		Get
			Return Me._AccountRowid
		End Get
		Set
			If (String.Equals(Me._AccountRowid, value) = false) Then
				Me.OnAccountRowidChanging(value)
				Me.SendPropertyChanging
				Me._AccountRowid = value
				Me.SendPropertyChanged("AccountRowid")
				Me.OnAccountRowidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountErpid", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AccountErpid() As String
		Get
			Return Me._AccountErpid
		End Get
		Set
			If (String.Equals(Me._AccountErpid, value) = false) Then
				Me.OnAccountErpidChanging(value)
				Me.SendPropertyChanging
				Me._AccountErpid = value
				Me.SendPropertyChanged("AccountErpid")
				Me.OnAccountErpidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OptyID", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OptyID() As String
		Get
			Return Me._OptyID
		End Get
		Set
			If (String.Equals(Me._OptyID, value) = false) Then
				Me.OnOptyIDChanging(value)
				Me.SendPropertyChanging
				Me._OptyID = value
				Me.SendPropertyChanged("OptyID")
				Me.OnOptyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OptyName", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OptyName() As String
		Get
			Return Me._OptyName
		End Get
		Set
			If (String.Equals(Me._OptyName, value) = false) Then
				Me.OnOptyNameChanging(value)
				Me.SendPropertyChanging
				Me._OptyName = value
				Me.SendPropertyChanged("OptyName")
				Me.OnOptyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OptyStage", DbType:="NChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OptyStage() As String
		Get
			Return Me._OptyStage
		End Get
		Set
			If (String.Equals(Me._OptyStage, value) = false) Then
				Me.OnOptyStageChanging(value)
				Me.SendPropertyChanging
				Me._OptyStage = value
				Me.SendPropertyChanged("OptyStage")
				Me.OnOptyStageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OptyAmount", DbType:="Decimal(18,0)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OptyAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._OptyAmount
		End Get
		Set
			If (Me._OptyAmount.Equals(value) = false) Then
				Me.OnOptyAmountChanging(value)
				Me.SendPropertyChanging
				Me._OptyAmount = value
				Me.SendPropertyChanged("OptyAmount")
				Me.OnOptyAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateTime", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CreateTime() As System.Nullable(Of Date)
		Get
			Return Me._CreateTime
		End Get
		Set
			If (Me._CreateTime.Equals(value) = false) Then
				Me.OnCreateTimeChanging(value)
				Me.SendPropertyChanging
				Me._CreateTime = value
				Me.SendPropertyChanged("CreateTime")
				Me.OnCreateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateBy", DbType:="NVarChar(80)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CreateBy() As String
		Get
			Return Me._CreateBy
		End Get
		Set
			If (String.Equals(Me._CreateBy, value) = false) Then
				Me.OnCreateByChanging(value)
				Me.SendPropertyChanging
				Me._CreateBy = value
				Me.SendPropertyChanged("CreateBy")
				Me.OnCreateByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiebelQuoteMaster_SiebelQuoteDetail", Storage:="_SiebelQuoteDetails", ThisKey:="id", OtherKey:="MasterID")>  _
	Public Property SiebelQuoteDetails() As EntitySet(Of SiebelQuoteDetail)
		Get
			Return Me._SiebelQuoteDetails
		End Get
		Set
			Me._SiebelQuoteDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SiebelQuoteDetails(ByVal entity As SiebelQuoteDetail)
		Me.SendPropertyChanging
		entity.SiebelQuoteMaster = Me
	End Sub
	
	Private Sub detach_SiebelQuoteDetails(ByVal entity As SiebelQuoteDetail)
		Me.SendPropertyChanging
		entity.SiebelQuoteMaster = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SiebelQuoteDetail")>  _
Partial Public Class SiebelQuoteDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _PartNO As String
	
	Private _Line_NO As System.Nullable(Of Integer)
	
	Private _QTY As System.Nullable(Of Integer)
	
	Private _Description As String
	
	Private _UnitPrice As System.Nullable(Of Decimal)
	
	Private _ItemType As Integer
	
	Private _HigherLevel As Integer
	
	Private _MasterID As System.Nullable(Of Integer)
	
	Private _SiebelQuoteMaster As EntityRef(Of SiebelQuoteMaster)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnPartNOChanging(value As String)
    End Sub
    Partial Private Sub OnPartNOChanged()
    End Sub
    Partial Private Sub OnLine_NOChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLine_NOChanged()
    End Sub
    Partial Private Sub OnQTYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQTYChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnUnitPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUnitPriceChanged()
    End Sub
    Partial Private Sub OnItemTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnItemTypeChanged()
    End Sub
    Partial Private Sub OnHigherLevelChanging(value As Integer)
    End Sub
    Partial Private Sub OnHigherLevelChanged()
    End Sub
    Partial Private Sub OnMasterIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMasterIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SiebelQuoteMaster = CType(Nothing, EntityRef(Of SiebelQuoteMaster))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PartNO", DbType:="NVarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PartNO() As String
		Get
			Return Me._PartNO
		End Get
		Set
			If (String.Equals(Me._PartNO, value) = false) Then
				Me.OnPartNOChanging(value)
				Me.SendPropertyChanging
				Me._PartNO = value
				Me.SendPropertyChanged("PartNO")
				Me.OnPartNOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Line_NO", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Line_NO() As System.Nullable(Of Integer)
		Get
			Return Me._Line_NO
		End Get
		Set
			If (Me._Line_NO.Equals(value) = false) Then
				Me.OnLine_NOChanging(value)
				Me.SendPropertyChanging
				Me._Line_NO = value
				Me.SendPropertyChanged("Line_NO")
				Me.OnLine_NOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QTY", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property QTY() As System.Nullable(Of Integer)
		Get
			Return Me._QTY
		End Get
		Set
			If (Me._QTY.Equals(value) = false) Then
				Me.OnQTYChanging(value)
				Me.SendPropertyChanging
				Me._QTY = value
				Me.SendPropertyChanged("QTY")
				Me.OnQTYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Decimal(18,0)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UnitPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._UnitPrice
		End Get
		Set
			If (Me._UnitPrice.Equals(value) = false) Then
				Me.OnUnitPriceChanging(value)
				Me.SendPropertyChanging
				Me._UnitPrice = value
				Me.SendPropertyChanged("UnitPrice")
				Me.OnUnitPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemType", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ItemType() As Integer
		Get
			Return Me._ItemType
		End Get
		Set
			If ((Me._ItemType = value)  _
						= false) Then
				Me.OnItemTypeChanging(value)
				Me.SendPropertyChanging
				Me._ItemType = value
				Me.SendPropertyChanged("ItemType")
				Me.OnItemTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HigherLevel", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HigherLevel() As Integer
		Get
			Return Me._HigherLevel
		End Get
		Set
			If ((Me._HigherLevel = value)  _
						= false) Then
				Me.OnHigherLevelChanging(value)
				Me.SendPropertyChanging
				Me._HigherLevel = value
				Me.SendPropertyChanged("HigherLevel")
				Me.OnHigherLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MasterID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MasterID() As System.Nullable(Of Integer)
		Get
			Return Me._MasterID
		End Get
		Set
			If (Me._MasterID.Equals(value) = false) Then
				If Me._SiebelQuoteMaster.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMasterIDChanging(value)
				Me.SendPropertyChanging
				Me._MasterID = value
				Me.SendPropertyChanged("MasterID")
				Me.OnMasterIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SiebelQuoteMaster_SiebelQuoteDetail", Storage:="_SiebelQuoteMaster", ThisKey:="MasterID", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property SiebelQuoteMaster() As SiebelQuoteMaster
		Get
			Return Me._SiebelQuoteMaster.Entity
		End Get
		Set
			Dim previousValue As SiebelQuoteMaster = Me._SiebelQuoteMaster.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SiebelQuoteMaster.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SiebelQuoteMaster.Entity = Nothing
					previousValue.SiebelQuoteDetails.Remove(Me)
				End If
				Me._SiebelQuoteMaster.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SiebelQuoteDetails.Add(Me)
					Me._MasterID = value.id
				Else
					Me._MasterID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("SiebelQuoteMaster")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
