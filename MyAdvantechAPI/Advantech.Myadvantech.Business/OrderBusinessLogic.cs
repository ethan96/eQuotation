//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using Advantech.Myadvantech.DataAccess;
using Microsoft.VisualBasic;
using System.Configuration;
using System.Text.RegularExpressions;
using Read_Sap_Table;

namespace Advantech.Myadvantech.Business
{

    /// <summary>
    /// Order business layer
    /// </summary>
    public class OrderBusinessLogic
    {

        public static Boolean SplitPricefromCart(String _CartID, int _ParentLineNo, Decimal _TotalAmount, String _ERPID, String _ORGID, String _Currency, Decimal _TaxRate, ref String _errMsg)
        {
            try
            {
                // Generate order object from cart detail
                Order order = CartDetailHelper.CartDetail2Order(CartDetailHelper.GetCartDetailByID(_CartID), _ERPID, _ORGID, _Currency);

                // Get System items only
                order.LineItems = order.LineItems.Where(d => (d.LineNumber == _ParentLineNo || d.ParentLineNumber == _ParentLineNo)).OrderBy(d => d.LineNumber).ToList();

                // Exclude tax for SAP price sharing
                Decimal _PretaxAmount = _TotalAmount / (1 + _TaxRate);

                // Re-calculating price from SAP
                Boolean SpiltResult = Advantech.Myadvantech.DataAccess.SAPDAL.SharingConfigSystemPrice(ref order, _PretaxAmount, _ParentLineNo, ref _errMsg);

                // Write new price data back to cart detail
                if (!SpiltResult || !String.IsNullOrEmpty(_errMsg))
                {
                    return false;
                }
                else
                {
                    MyAdvantechDAL my = new MyAdvantechDAL();
                    List<cart_DETAIL_V2> list_cd = my.GetCartDetailV2ByCartID(_CartID);
                    foreach (Product _part in order.LineItems)
                    {
                        list_cd.Where(d => d.Part_No.Equals(_part.PartNumber) && d.Line_No == _part.LineNumber).ToList().ForEach(c => { c.Unit_Price = _part.UnitPrice * (1 + _TaxRate); });
                    }
                    MyAdvantechContext.Current.SaveChanges();
                    return true;
                }
            }
            catch (Exception e)
            {
                _errMsg = e.ToString();
                return false;
            }
        }

        public static Tuple<Boolean, List<QuotationDetail>> SplitPricefromQuote(List<QuotationDetail> _QuoteDetails, int _ParentLineNo, Decimal _TotalAmount, String _ERPID, String _ORGID, String _Currency, Decimal _TaxRate, ref String _errMsg)
        {
            try
            {
                // Generate order object from cart detail
                Order order = QuotationDetailHelper.QuoteDetail2Order(_QuoteDetails, _ERPID, _ORGID, _Currency);


                // Get System items only
                order.LineItems = order.LineItems.Where(d => (d.LineNumber == _ParentLineNo || d.ParentLineNumber == _ParentLineNo)).OrderBy(d => d.LineNumber).ToList();

                // Exclude tax for SAP price sharing
                Decimal pretaxTotalAmount = _TotalAmount / (1 + _TaxRate);

                // Re-calculating price from SAP
                Boolean isSuccessful = Advantech.Myadvantech.DataAccess.SAPDAL.SharingConfigSystemPrice(ref order, pretaxTotalAmount, _ParentLineNo, ref _errMsg);

                // Write new price data back to cart detail
                if (!isSuccessful || !String.IsNullOrEmpty(_errMsg))
                {
                    return Tuple.Create(false, _QuoteDetails);
                }
                else
                {
                    //攤價後小數點差距重新補齊
                    decimal newTotalAmount = order.LineItems.Sum(d => Math.Round((Decimal)(d.UnitPrice * (1 + _TaxRate)), 2, MidpointRounding.AwayFromZero) * d.Quantity);
                    //decimal newTotalAmount = order.LineItems.Sum(d => (d.UnitPrice * d.Quantity * (1 + _TaxRate)));
                    decimal balance = _TotalAmount - newTotalAmount;
                    var firstItem = order.LineItems.SingleOrDefault(d => d.LineNumber == _ParentLineNo + 1);
                    if (firstItem != null)
                        firstItem.UnitPrice += (balance / (1 + _TaxRate) / firstItem.Quantity);

                    foreach (Product _part in order.LineItems)
                    {
                        _QuoteDetails.Where(d => d.partNo.Equals(_part.PartNumber) && d.line_No == _part.LineNumber).ToList().ForEach(c => { c.newUnitPrice = _part.UnitPrice; });
                    }



                    return Tuple.Create(true, _QuoteDetails);
                }
            }
            catch (Exception e)
            {
                _errMsg = e.ToString();
                return Tuple.Create(false, _QuoteDetails);
            }
        }

        public static String CopyAEUCart2Quotation(String _CartID, String _ERPID, String _UserID, Boolean _isTesting)
        {
            SAP_DIMCOMPANY SAPDimCompany = MyAdvantechContext.Current.SAP_DIMCOMPANY.Where(d => d.COMPANY_ID.Equals(_ERPID)).FirstOrDefault();
            SIEBEL_ACCOUNT SiebelAccount = MyAdvantechContext.Current.SIEBEL_ACCOUNT.Where(d => d.ERP_ID.Equals(_ERPID)).FirstOrDefault();


            DataTable dtSalesinfo = DataAccess.SAPDAL.GetSalesGroupOfficeDivisionDistrictByERPID(_ERPID);
            String SalesGroupCode = String.Empty, SalesOfficeCode = String.Empty, SalesDistrict = String.Empty;
            if (dtSalesinfo != null && dtSalesinfo.Rows.Count > 0)
            {
                SalesGroupCode = dtSalesinfo.Rows[0]["SalesGroup"].ToString();
                SalesOfficeCode = dtSalesinfo.Rows[0]["SalesOffice"].ToString();
                SalesDistrict = dtSalesinfo.Rows[0]["District"].ToString();
            }

            String quoteid = System.Guid.NewGuid().ToString().Replace("-", "").Substring(0, 15);

            // Create Quotation Master
            QuotationMaster QM = new QuotationMaster();
            QM.quoteId = quoteid;
            QM.quoteToRowId = SiebelAccount.ROW_ID;
            QM.quoteToErpId = SiebelAccount.ERP_ID;
            QM.quoteToName = SiebelAccount.ACCOUNT_NAME;
            QM.currency = SAPDimCompany.CURRENCY;
            QM.salesEmail = "";
            QM.salesRowId = "";
            QM.quoteDate = DateTime.Now;
            QM.deliveryDate = DateTime.Now.AddDays(3);
            QM.expiredDate = DateTime.Now.AddDays(30);
            QM.shipTerm = "EX Works";
            QM.paymentTerm = "PPD";
            QM.freight = 0;
            QM.insurance = 0;
            QM.specialCharge = 0;
            QM.tax = 0;
            QM.createdBy = _UserID;
            QM.createdDate = DateTime.Now;
            QM.isShowListPrice = 0; //
            QM.isShowDiscount = 0; //
            QM.isShowDueDate = 0; //
            QM.isLumpSumOnly = 1; //
            QM.isRepeatedOrder = 0; //
            QM.DelDateFlag = 0; //
            QM.org = "EU10";
            QM.siebelRBU = SiebelAccount.RBU;
            QM.DIST_CHAN = "30";
            QM.DIVISION = "00";
            QM.SALESGROUP = SalesGroupCode;
            QM.SALESOFFICE = SalesOfficeCode;
            QM.DISTRICT = SalesDistrict;
            QM.isExempt = 0;
            QM.PRINTOUT_FORMAT = 1; //
            QM.DocReg = 31; //
            QM.DocType = 0; //
            QM.DOCSTATUS = 0; //
            QM.Partial = 0; //
            QM.IS_EARLYSHIP = 0; //
            QM.LastUpdatedDate = DateTime.Now;
            QM.LastUpdatedBy = _UserID;
            QM.PODate = DateTime.Now;
            QM.isVirPartOnly = 0; //
            QM.quoteNo = QuoteBusinessLogic.GetEQOrderNumber("GQ", _isTesting);
            QM.Revision_Number = 1;
            QM.Active = true;
            eQuotationContext.Current.QuotationMaster.Add(QM);

            // Create Quotation Extension
            QuotationExtension QE = new QuotationExtension();
            QE.QuoteID = quoteid;
            QE.EmailGreeting = "";
            QE.SpecialTandC = "";
            QE.SignatureRowID = "";
            QE.Engineer = "";
            QE.Engineer_Telephone = "";
            QE.QuoteSource = "";
            QE.LastUpdated = DateTime.Now;
            QE.LastUpdatedBy = _UserID;
            QE.QuoteSource = "eStore";
            QE.IsShowTotal = true;
            QE.ApprovalFlowType = 0;
            QE.AuditType = 0;
            QE.Warranty = "2 Years";
            QE.ABRQuoteType = "ZQTI";
            QE.CopyPurpose = 0;
            eQuotationContext.Current.QuotationExtension.Add(QE);
            eQuotationContext.Current.SaveChanges();

            // Create Quotation Partner      
            QuotationPartnerHelper.CreateEQPartnerByERPID(_ERPID, quoteid, OrderPartnerType.SoldTo);
            QuotationPartnerHelper.CreateEQPartnerByERPID(_ERPID, quoteid, OrderPartnerType.ShipTo);
            QuotationPartnerHelper.CreateEQPartnerByERPID(_ERPID, quoteid, OrderPartnerType.BillTo);
            QuotationPartnerHelper.CreateEQPartnerByERPID("", quoteid, OrderPartnerType.EndCoutomer);
            QuotationPartnerHelper.CreateEQPartnerByERPID("", quoteid, OrderPartnerType.Employee1);

            // Create Quotation Detail
            CartDetailHelper.CartDetail2QuoteDetail(_CartID, quoteid);

            return quoteid;
        }

        /// <summary>
        /// The function checks that if the PO number of specific account already exists 
        /// </summary>
        /// <param name="ORGID"></param>
        /// <param name="ERPID"></param>
        /// <param name="PO"></param>
        /// <returns></returns>
        public static bool IsPONumberExisting(string ORGID, string ERPID, string PO)
        {
            if (string.IsNullOrEmpty(ORGID)) { return false; }
            if (string.IsNullOrEmpty(ERPID)) { return false; }
            if (string.IsNullOrEmpty(PO)) { return false; }

            DataTable dt = Advantech.Myadvantech.DataAccess.SAPDAL.GetAccountPONumber(ORGID, ERPID, PO);
            if (dt != null && dt.Rows.Count > 0)
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// The function checks AEU's order that if there is any item's request qty is less than minimum order qty
        /// </summary>
        /// <param name="OrderID"></param>
        /// <param name="OrgID"></param>
        /// <param name="ErrMsg"></param>
        /// <returns></returns>
        public static bool IsAEUOrderItemBelowMOQ(string OrderID, string OrgID, ref string ErrMsg)
        {
            DataTable dt = Advantech.Myadvantech.DataAccess.MyAdvantechDAL.getBelowMOQLineItem(OrderID, OrgID);
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow _row in dt.Rows)
                {
                    ErrMsg += _row["part_no"] + " total quantity " + _row["TotalQty"] + " is less than minimum order quantity " + Convert.ToInt32(_row["MIN_ORDER_QTY"]) + "<br/>";
                }
                return true;
            }

            return false;
        }


        // Ryan 20170302 Comment below out, new function with same name is applied
        //public static string GetUSAOnlineOrderPrefix(string OrderID)
        //{
        //    string prefix = string.Empty;
        //    StringBuilder sql = new StringBuilder();
        //    sql.Append(" SELECT TOP 1 id_rbu FROM EAI_IDMAP ei ");
        //    sql.Append(" INNER JOIN ORDER_PARTNERS op ON ei.id_sap = op.ERPID ");
        //    sql.Append(string.Format(" WHERE op.TYPE = 'E' AND op.ORDER_ID = '{0}' ", OrderID));
        //    object obj = SqlProvider.dbExecuteScalar("MY", sql.ToString());

        //    if (obj != null)
        //    {
        //        if (obj.ToString().Equals("AOnline", StringComparison.OrdinalIgnoreCase))
        //        {
        //            prefix = "AUSO";
        //        }
        //        if (obj.ToString().Equals("IA-AOnline", StringComparison.OrdinalIgnoreCase))
        //        {
        //            prefix = "AIAG";
        //        }
        //    }
        //    if (!string.IsNullOrEmpty(prefix))
        //        return prefix;


        //    MyAdvantechDAL _My = new MyAdvantechDAL();
        //    CARTMASTERV2 cart = _My.getCartMasterV2ByCartID(OrderID);
        //    if (cart != null && !string.IsNullOrEmpty(cart.QuoteID))
        //    {
        //        QuotationMasterHelper helper = new QuotationMasterHelper();
        //        QuotationMaster master = helper.GetQuotationMaster(cart.QuoteID);
        //        if (master != null)
        //        {

        //            if (master.salesEmail != null && !string.IsNullOrEmpty(master.salesEmail))
        //            {
        //                obj = SqlProvider.dbExecuteScalar("MY", string.Format(" SELECT top 1 id_rbu FROM EAI_IDMAP  where id_sap=(select top 1 SALES_CODE from SAP_EMPLOYEE where EMAIL='{0}' and SALES_CODE<>'')", master.salesEmail));
        //            }
        //            if (obj == null && master.createdBy != null && !string.IsNullOrEmpty(master.createdBy))
        //            {
        //                obj = SqlProvider.dbExecuteScalar("MY", string.Format(" SELECT top 1 id_rbu FROM EAI_IDMAP  where id_sap=(select top 1 SALES_CODE from SAP_EMPLOYEE where EMAIL='{0}' and SALES_CODE<>'')", master.createdBy));

        //            }
        //            if (obj != null)
        //            {
        //                if (obj.ToString().Equals("AOnline", StringComparison.OrdinalIgnoreCase))
        //                {
        //                    prefix = "AUSO";
        //                }
        //                if (obj.ToString().Equals("IA-AOnline", StringComparison.OrdinalIgnoreCase))
        //                {
        //                    prefix = "AIAG";
        //                }
        //            }
        //        }
        //    }
        //    if (!string.IsNullOrEmpty(prefix))
        //        return prefix;

        //    //MyAdvantechDAL _My = new MyAdvantechDAL();
        //    //CARTMASTERV2 cart = _My.getCartMasterV2ByCartID(OrderID);
        //    _My = new MyAdvantechDAL();
        //    cart = _My.getCartMasterV2ByCartID(OrderID);


        //    if (cart != null && !string.IsNullOrEmpty(cart.QuoteID))
        //    {
        //        QuotationMasterHelper helper = new QuotationMasterHelper();
        //        QuotationMaster master = helper.GetQuotationMaster(cart.QuoteID);

        //        if (master != null && !string.IsNullOrEmpty(master.quoteNo))
        //        {
        //            StringBuilder sb = new StringBuilder(master.quoteNo.Substring(0, 3));
        //            sb.Append("O");
        //            return sb.ToString();
        //        }
        //    }
        //    return string.Empty;
        //}

        public static string GetUSAOnlineOrderPrefix(string OrderID)
        {
            string prefix = string.Empty;
            string userid = string.Empty;

            // First step, get from Order Parters
            StringBuilder sql1 = new StringBuilder();
            sql1.Append(" select b.EMAIL, b.SALES_CODE, b.SALESGROUP, b.SALESOFFICE ");
            sql1.Append(" from ORDER_PARTNERS a inner join SAP_EMPLOYEE b on a.ERPID = b.SALES_CODE ");
            sql1.AppendFormat(" where a.TYPE = 'E' and a.ORDER_ID = '{0}' ", OrderID);
            DataTable dt1 = SqlProvider.dbGetDataTable("MY", sql1.ToString());

            if (dt1 != null && dt1.Rows.Count > 0)
            {
                if (dt1.Rows[0]["SALESGROUP"].ToString().Equals("219") && dt1.Rows[0]["SALESOFFICE"].ToString().Equals("2110"))
                    prefix = "AIAG";
                else if (dt1.Rows[0]["SALESGROUP"].ToString().Equals("21A") && dt1.Rows[0]["SALESOFFICE"].ToString().Equals("2110"))
                    prefix = "AISY";
                else if (dt1.Rows[0]["SALESOFFICE"].ToString().Equals("2100"))
                    prefix = "AACO";
                else if (dt1.Rows[0]["SALESOFFICE"].ToString().Equals("2200") || dt1.Rows[0]["SALESOFFICE"].ToString().Equals("2300"))
                    prefix = "AENO";
                else
                    prefix = "AUSO";
            }
            if (!string.IsNullOrEmpty(prefix))
                return prefix;


            // Second step, get from quotation
            MyAdvantechDAL _My = new MyAdvantechDAL();
            CARTMASTERV2 cart = _My.getCartMasterV2ByCartID(OrderID);
            if (cart != null && !string.IsNullOrEmpty(cart.QuoteID))
            {
                QuotationMasterHelper helper = new QuotationMasterHelper();
                QuotationMaster master = helper.GetQuotationMaster(cart.QuoteID);
                if (master != null)
                {
                    if (master.salesEmail != null && !string.IsNullOrEmpty(master.salesEmail))
                    {
                        userid = master.salesEmail;
                    }
                    if (String.IsNullOrEmpty(userid) && master.createdBy != null && !string.IsNullOrEmpty(master.createdBy))
                    {
                        userid = master.createdBy;
                    }

                    if (!String.IsNullOrEmpty(userid))
                    {
                        StringBuilder sql2 = new StringBuilder();
                        sql2.Append(" select distinct b.PrimarySmtpAddress,c.SALES_CODE,c.SALESGROUP,c.SALESOFFICE ");

                        //sql2.Append(" from ADVANTECH_ADDRESSBOOK_GROUP a left join ADVANTECH_ADDRESSBOOK b on a.ID = b.ID ");
                        sql2.Append(" from AD_MEMBER_GROUP a left join AD_MEMBER b on a.EMAIL = b.PrimarySmtpAddress ");

                        sql2.Append(" left join SAP_EMPLOYEE c on b.PrimarySmtpAddress = c.EMAIL ");
                        sql2.AppendFormat(" where b.PrimarySmtpAddress = '{0}'", userid);
                        DataTable dt2 = SqlProvider.dbGetDataTable("MY", sql2.ToString());

                        if (dt2 != null && dt2.Rows.Count > 0)
                        {
                            if (dt2.Rows[0]["SALESGROUP"].ToString().Equals("219") && dt2.Rows[0]["SALESOFFICE"].ToString().Equals("2110"))
                                prefix = "AIAG";
                            else if (dt2.Rows[0]["SALESGROUP"].ToString().Equals("21A") && dt2.Rows[0]["SALESOFFICE"].ToString().Equals("2110"))
                                prefix = "AISY";
                            else if (dt2.Rows[0]["SALESOFFICE"].ToString().Equals("2100"))
                                prefix = "AACO";
                            else if (dt2.Rows[0]["SALESOFFICE"].ToString().Equals("2200") || dt2.Rows[0]["SALESOFFICE"].ToString().Equals("2300"))
                                prefix = "AENO";
                            else
                                prefix = "AUSO";
                        }
                    }
                }
            }
            if (!string.IsNullOrEmpty(prefix))
                return prefix;


            //Third step, get from quotation prefix
            _My = new MyAdvantechDAL();
            cart = _My.getCartMasterV2ByCartID(OrderID);
            if (cart != null && !string.IsNullOrEmpty(cart.QuoteID))
            {
                QuotationMasterHelper helper = new QuotationMasterHelper();
                QuotationMaster master = helper.GetQuotationMaster(cart.QuoteID);

                if (master != null && !string.IsNullOrEmpty(master.quoteNo))
                {
                    StringBuilder sb = new StringBuilder(master.quoteNo.Substring(0, 3));
                    sb.Append("O");
                    return sb.ToString();
                }
            }
            return string.Empty;
        }

        public static DateTime GetLocalTime(string org)
        {
            DateTime localtime = DateTime.Now;
            DateTime utcTime = DateTime.Now.ToUniversalTime();
            var _Result = from a in MyAdvantechContext.Current.TIMEZONE
                          where a.ORG == org
                          select a;
            TIMEZONE _TIMEZONERow = _Result.First<TIMEZONE>();
            TimeZoneInfo TZI = TimeZoneInfo.FindSystemTimeZoneById(_TIMEZONERow.TimeZoneName);
            TimeSpan TS = TZI.GetUtcOffset(utcTime);
            localtime = utcTime.Add(TS);
            return localtime;
        }

        public static Boolean ConvertMyAdvantechCartToSAPOrder(String Order_No, String OrgID, ref string ErrMsg, Boolean isSimulate = false, String QuoteID = "", Boolean IsCreateSAPQuote = false)
        {
            //return false;
            //SA_APPLICATION _SA_APPLICATION = MyAdminContext.Current.SA_APPLICATION.Find("111");
            //ORDER_MASTER _order_master = MyAdvantechEntities.

            //QuotationMaster _QMaster = eQuotationContext.Current.QuotationMaster.Find("deca9b1a59b245d");

            //  MyAdminEntity _MyAdminEntity = new MyAdminEntity();


            try
            {
                //eQEntities _eq = new eQEntities();
                //MyAdvantechEntities _MyA = new MyAdvantechEntities();

                //Myadvantech.DataAccess.MyAdvantechContext
                //MyAdvantechContext.Current.ORDER_MASTER.

                //MyAdvantechContext.Current.ORDER_MASTER.Find();

                bool _IsUS01ORG = false;
                DateTime USCompanyNextWorkingDate = DateTime.Now;
                bool IsBTOSOrder = false;// MyOrderX.IsHaveBtos(Order_No)
                if (OrgID.Trim().Equals("US01", StringComparison.InvariantCultureIgnoreCase))
                {
                    _IsUS01ORG = true;
                    //USCompanyNextWorkingDate = MyCartOrderBizDAL.getCompNextWorkDateV2(LocalTime, HttpContext.Current.Session("org_id"), 1)
                }

                DateTime LocalTime = GetLocalTime(OrgID.Substring(0, 2));

                var _OrderMasterResult = from b in MyAdvantechContext.Current.ORDER_MASTER
                                         where b.ORDER_ID == Order_No
                                         select b;

                var _OrderDetailResult = from b in MyAdvantechContext.Current.ORDER_DETAIL
                                         where b.ORDER_ID == Order_No
                                         select b;

                if (_OrderMasterResult.Count<ORDER_MASTER>() == 0)
                {
                    ErrMsg = "RAW DATA ERROR!";
                    return false;
                }
                ORDER_MASTER _OrderMasterRow = _OrderMasterResult.First<ORDER_MASTER>();
                Order _order = new Order();

                var _OrderPartnersResult = from a in MyAdvantechContext.Current.ORDER_PARTNERS
                                           where a.ORDER_ID == Order_No
                                           select a;

                if (_OrderMasterResult.Count<ORDER_MASTER>() == 0)
                {
                    ErrMsg = "RAW DATA ERROR!";
                    return false;
                }

                OrderPartner _OrderPartner = null;
                foreach (ORDER_PARTNERS _row in _OrderPartnersResult)
                {
                    _OrderPartner.Type = OrderPartnerType.SoldTo;
                    switch (_row.TYPE)
                    {
                        case "SOLDTO":
                            _OrderPartner.Type = OrderPartnerType.SoldTo;
                            break;
                        case "S":
                            _OrderPartner.Type = OrderPartnerType.ShipTo;
                            break;
                        case "B":
                            _OrderPartner.Type = OrderPartnerType.BillTo;
                            break;
                        case "E":
                            _OrderPartner.Type = OrderPartnerType.Employee1;
                            break;
                        case "E1":
                            _OrderPartner.Type = OrderPartnerType.Employee2;
                            break;
                        case "E2":
                            _OrderPartner.Type = OrderPartnerType.Employee3;
                            break;
                        case "EM":
                            _OrderPartner.Type = OrderPartnerType.EndCoutomer;
                            break;
                        case "ZM":
                            _OrderPartner.Type = OrderPartnerType.EmployeeResponse;
                            break;
                        case "KIP":
                            _OrderPartner.Type = OrderPartnerType.KeyInPerson;
                            break;
                        default:
                            _OrderPartner = null;
                            break;
                    }
                    if (_OrderPartner != null)
                    {
                        _OrderPartner.ErpID = _row.ERPID;
                        _OrderPartner.Address = _row.ADDRESS;
                        _OrderPartner.Attention = _row.ATTENTION;
                        _OrderPartner.City = _row.CITY;
                        _OrderPartner.Country = _row.COUNTRY;
                        _OrderPartner.District = _row.DISTRICT;
                        _OrderPartner.Mobile = _row.MOBILE;
                        _OrderPartner.Name = _row.NAME;
                        _OrderPartner.State = _row.STATE;
                        _OrderPartner.Street = _row.STREET;
                        _OrderPartner.Street2 = _row.STREET2;
                        _OrderPartner.TaxJuri = _row.TAXJURI;
                        _OrderPartner.Tel = _row.TEL;
                        _OrderPartner.ZipCode = _row.ZIPCODE;

                        _order.SetOrderPartnet(_OrderPartner);
                    }
                }


                //  需要再確認TBD
                //    Dim _IsUS01ORG As Boolean = False, USCompanyNextWorkingDate As Date, IsBTOSOrder As Boolean = MyOrderX.IsHaveBtos(Order_No)
                //    If HttpContext.Current.Session("org_id").ToString.Trim.Equals("US01", StringComparison.OrdinalIgnoreCase) Then
                //        _IsUS01ORG = True
                //        USCompanyNextWorkingDate = MyCartOrderBizDAL.getCompNextWorkDateV2(LocalTime, HttpContext.Current.Session("org_id"), 1)
                //    End If


                //With dtMaster
                //        soldtoID = .Rows(0).Item("soldto_id")
                //        Dim DTcompany As DataTable = my_Company.GetDT(String.Format("company_id='{0}'", soldtoID), "")
                //        If DTcompany.Rows.Count = 0 Then
                //            ErrMsg = "Invalid SoldTo!"
                //            ProcStatus_Save2(ErrMsg, Order_No, "S")
                //            Return False
                //        End If
                //        Dim distr_chan As String = "10", division As String = "00"
                //        SAPDOC.Get_disChannel_and_division(soldtoID, distr_chan, division)
                //        HDR.ORDER_TYPE = .Rows(0).Item("Order_Type") : HDR.SALES_ORG = sales_org : HDR.DIST_CHAN = distr_chan : HDR.DIVISION = division
                //        HDR.Currency = _currency

                SAPOrderType _OrderTypeENUM = SAPOrderType.ZOR;
                Enum.TryParse(_OrderMasterRow.ORDER_TYPE, out _OrderTypeENUM);
                _order.OrderType = _OrderTypeENUM;
                //_order.OrgID = "";  TBC
                _order.OrgID = OrgID;
                _order.DistChannel = _OrderMasterRow.DIST_CHAN;
                _order.Division = _OrderMasterRow.DIVISION;
                _order.Currency = _OrderMasterRow.CURRENCY;

                if (IsCreateSAPQuote)
                {

                }
                else
                {

                }

                //        If IsCreateSAPQuote Then
                //            HDR.ORDER_TYPE = "AG"
                //            If Util.IsTestingQuote2Order() Then
                //                Dim MyDC As New eQuotationDBDataContext
                //                Dim CurrVersion As Object = (From QMlist In MyDC.QuotationMasters
                //                                                      Where QMlist.quoteNo = QuoteID AndAlso QMlist.Active = True
                //                                                      Select QMlist.Revision_Number).FirstOrDefault()
                //                If CurrVersion IsNot Nothing AndAlso Not String.IsNullOrEmpty(CurrVersion) Then
                //                    HDR.VERSION = QuoteID + "V" + CurrVersion.ToString.Trim
                //                End If
                //            End If
                //        Else
                //            'If Not IsNothing(HttpContext.Current.Session("OPTYID")) Then
                //            '    HDR.VERSION = HttpContext.Current.Session("OPTYID")
                //            'End If
                //            'If String.Equals(sales_org, "TW01", StringComparison.CurrentCultureIgnoreCase) Then
                //            Dim _CartMaster As CartMaster = MyCartX.GetCartMaster(HttpContext.Current.Session("CART_ID").ToString.Trim)
                //            If Not IsNothing(_CartMaster) AndAlso _CartMaster.OpportunityID IsNot Nothing AndAlso Not String.IsNullOrEmpty(_CartMaster.OpportunityID.Trim) Then
                //                HDR.VERSION = _CartMaster.OpportunityID
                //            End If
                //            'End If
                //        End If
                //        If Not String.IsNullOrEmpty(.Rows(0).Item("DIST_CHAN").ToString()) Then
                //            HDR.DIST_CHAN = .Rows(0).Item("DIST_CHAN").ToString() : HDR.DIVISION = .Rows(0).Item("DIVISION").ToString()
                //            'HDR.SalesGroup = .Rows(0).Item("SALESGROUP").ToString() : HDR.SalesOffice = .Rows(0).Item("SALESOFFICE").ToString()
                //        End If
                //        'ICC 2014/10/17 Only US order has to set sales_group and sales_office
                //        If HttpContext.Current.Session("ORG_ID").ToString.ToUpper.StartsWith("US") Then
                //            HDR.SalesGroup = .Rows(0).Item("SALESGROUP").ToString() : HDR.SalesOffice = .Rows(0).Item("SALESOFFICE").ToString()
                //        End If
                if (OrgID.ToUpper().StartsWith("US"))
                {
                    _order.SalesGroup = _OrderMasterRow.SALESGROUP;
                    _order.SalesOffice = _OrderMasterRow.SALESOFFICE;
                }

                //        HDR.INCO1 = .Rows(0).Item("INCOTERM")
                _order.Incoterms1 = _OrderMasterRow.INCOTERM;
                string INCO2 = "blank";
                //        Dim INCO2 As String = "blank"
                //        If .Rows(0).Item("INCOTERM_TEXT") <> "" Then INCO2 = .Rows(0).Item("INCOTERM_TEXT")
                if (!string.IsNullOrEmpty(_OrderMasterRow.INCOTERM_TEXT))
                {
                    _order.Incoterms2 = _OrderMasterRow.INCOTERM_TEXT;
                }
                _order.Incoterms2 = INCO2;
                //        HDR.INCO2 = INCO2

                //SHIPTO_COUNTRY這一段待補
                //        Dim Company_Country As String = ""
                //        If DTcompany.Rows(0).Item("COUNTRY_NAME") IsNot DBNull.Value Then Company_Country = DTcompany.Rows(0).Item("COUNTRY_NAME")
                //        If Company_Country.ToUpper = "NL" Then
                //            HDR.SHIPTO_COUNTRY = Company_Country.ToUpper : HDR.TRIANGULAR_INDICATOR = "X"
                //        End If


                _order.PaymentTerm = _OrderMasterRow.PAYTERM.ToUpper();
                //        If String.IsNullOrEmpty(.Rows(0).Item("PAYTERM").ToString()) = False Then
                //            HDR.PAYTERM = UCase(.Rows(0).Item("PAYTERM").ToString())
                //        End If

                //        'Frank 20140701: Control Order's taxable status 
                //        HDR.TAX_CLASS = ""
                //        If sales_org.ToUpper.StartsWith("US") Then
                //            HDR.TAX_CLASS = IIf(Integer.TryParse(.Rows(0).Item("isExempt"), 0) AndAlso CInt(.Rows(0).Item("isExempt")) = 1, 0, 1)
                //        End If
                if (OrgID.ToUpper().StartsWith("US"))
                {
                    if (_OrderMasterRow.isExempt == 1)
                    {
                        _order.TaxClass = "0";
                    }
                    else
                    {
                        _order.TaxClass = "1";
                    }
                }


                //        Dim rd As DateTime = LocalTime
                //        If CDate(.Rows(0).Item("required_date")) > rd Then
                //            rd = CDate(.Rows(0).Item("required_date"))
                //        End If
                //DateTime rd = localTime;
                DateTime rd = LocalTime;
                if (_OrderMasterRow.REQUIRED_DATE == null)
                {
                    rd = DateTime.Now;
                }
                else
                {
                    if (_OrderMasterRow.REQUIRED_DATE > rd)
                    {
                        rd = _OrderMasterRow.REQUIRED_DATE.Value;
                    }
                }

                //        '\Ming 20140929  检查页面停留时间过长，是不是已经过了13点。
                //        If _IsUS01ORG AndAlso Not IsBTOSOrder Then
                //            If DateDiff(DateInterval.Day, CDate(LocalTime.ToString("yyyy/MM/dd")), rd) <= 0 Then
                //                If LocalTime.Hour >= 13 Then
                //                    rd = USCompXanyNextWorkingDate.ToString("yyyy/MM/dd")
                //                End If
                //            End If
                //        End If
                if (_IsUS01ORG && !IsBTOSOrder)
                {
                    if ((LocalTime - rd).Days <= 0)
                    {
                        if (LocalTime.Hour >= 13)
                        {
                            rd = USCompanyNextWorkingDate;
                        }
                    }
                }


                //        HDR.REQUIRE_DATE = rd.ToString("yyyy/MM/dd") : HDR.SHIP_CONDITION = Left(.Rows(0).Item("SHIP_CONDITION"), 2)
                _order.RequireDate = rd;
                _order.ShipCondition = _OrderMasterRow.SHIP_CONDITION.Substring(0, 2);

                //        HDR.CUST_PO_NO = IIf(.Rows(0).Item("po_no") = "", Order_No, .Rows(0).Item("po_no")) : HDR.SHIP_CUST_PO_NO = ""
                if (string.IsNullOrEmpty(_OrderMasterRow.PO_NO))
                {
                    _order.CustomerPONumber = Order_No;
                }
                else
                {
                    _order.CustomerPONumber = _OrderMasterRow.PO_NO;
                }
                _order.ShipToCustomerPONumber = "";
                //        HDR.PO_DATE = Global_Inc.FormatDate(.Rows(0).Item("po_date"))
                _order.PODate = _order.PODate;

                //        If .Rows(0).Item("partial_flag") = "0" Then HDR.PARTIAL_SHIPMENT = "X"
                if (_OrderMasterRow.PARTIAL_FLAG == "0") { _order.PartialShipment = true; }
                //        If HttpContext.Current.Session("org_id").ToString.Trim.Equals("EU10", StringComparison.OrdinalIgnoreCase) Then
                //            'Frank 20141002
                //            'If MyOrderX.IsHaveBtos(Order_No) Then HDR.PARTIAL_SHIPMENT = ""
                //            If IsBTOSOrder Then HDR.PARTIAL_SHIPMENT = ""
                //        End If
                if (OrgID.Trim().Equals("EU10", StringComparison.InvariantCultureIgnoreCase))
                {
                    if (IsBTOSOrder) { _order.PaymentTerm = ""; }
                }
                //        HDR.EARLY_SHIP = "0001"
                _order.EarlyShipment = "0001";
                //        If .Rows(0).Item("SOLDTO_ID") = "SAID" Then
                //            HDR.TAXDEL_CTY = "SG" : HDR.TAXDES_CTY = "ID"
                //        End If
                if (_OrderMasterRow.SOLDTO_ID.Equals("SAID", StringComparison.InvariantCultureIgnoreCase))
                {
                    _order.TAXDEL_CTY = "SG";
                    _order.TAXDES_CTY = "ID";

                }
                //        If Not IsDBNull(.Rows(0).Item("DISTRICT")) AndAlso .Rows(0).Item("DISTRICT") <> "" Then
                //            HDR.DISTRICT = .Rows(0).Item("DISTRICT").ToString
                //        End If
                if (!string.IsNullOrEmpty(_OrderMasterRow.DISTRICT))
                {
                    _order.District = _OrderMasterRow.DISTRICT;
                }
                //    End With



                //Order detail
                //    For Each R As DataRow In dtDetail.Rows
                foreach (ORDER_DETAIL _row in _OrderDetailResult)
                {
                    Product _LineItem = new Product();
                    if (_row.ORDER_LINE_TYPE == "1")
                    {
                        _LineItem.HigherLevel = _row.HigherLevel.GetValueOrDefault(100);
                    }
                    _LineItem.LineNumber = _row.LINE_NO.GetValueOrDefault();
                    _LineItem.PlantID = _row.DeliveryPlant;
                    //            If Global_Inc.IsNumericItem(.Item("part_no")) Then
                    //                DR.MATERIAL = "00000000" & .Item("part_no")
                    //            Else
                    //                If CInt(.Item("ORDER_LINE_TYPE")) = OrderItemType.BtosParent Then
                    //                    DR.MATERIAL = replaceCartBTO(.Item("part_no"))
                    //                Else
                    //                    DR.MATERIAL = .Item("part_no")
                    //                End If
                    //            End If

                    if (!string.IsNullOrEmpty(_row.Description) && _row.Description.Trim().Length <= 40)
                    {
                        _LineItem.SAPDescription = _row.Description;
                    }

                    _LineItem.CustomerMaterial = _row.CustMaterialNo;
                    _LineItem.DMF_Flag = _row.DMF_Flag;
                    _LineItem.Quantity = _row.QTY.GetValueOrDefault(1);

                    DateTime rd1 = LocalTime; //需要與趙明確認
                    if (_row.REQUIRED_DATE > rd1)
                    {
                        rd1 = _row.REQUIRED_DATE.GetValueOrDefault();
                    }
                    _LineItem.RequireDate = rd1;
                    _LineItem.SellingPrice = _row.UNIT_PRICE.GetValueOrDefault();
                    _LineItem.Currency = _OrderMasterRow.CURRENCY;
                    //            If MyOrderX.IsEUBtosOrder(Order_No) Then
                    //                If CInt(.Item("ORDER_LINE_TYPE")) = OrderItemType.BtosParent Then
                    //                    DR.REQ_DATE = "2020/12/31" ' rd.AddYears(1).ToString("yyyy/MM/dd")
                    //                End If
                    //            End If
                    //            '/end
                    //Ming 20140929  检查页面停留时间过长，是不是已经过了13点。
                    if (_IsUS01ORG && !IsBTOSOrder)
                    {
                        _LineItem.RequireDate = USCompanyNextWorkingDate;
                    }
                    //            '\ 2013-8-26,MXT2****下單時，傳進SAP SO的part no的price传空值，为了就是能让SAP自动带出UUMM001的价格
                    //            If Util.IsMexicoT2Customer(soldtoID, "") Then
                    //                DR.PRICE = "0"
                    //            End If
                    //            'ODM Spacial setting 
                    //            If MyCartOrderBizDAL.isODMOrder(Order_No) Then
                    //                DR.PLANT = "TWM3" : DR.ShipPoint = "TWH1"
                    //                'DR.StorageLoc = "0018"
                    //            End If


                    //            'Frank 2013/06/18: Set storage location to "1100" when creating sales order for SG01
                    //            If UCase(HttpContext.Current.Session("Org_id")) = "SG01" Then
                    //                DR.StorageLoc = "1100"
                    //            End If
                    if (OrgID.Equals("SG01", StringComparison.InvariantCultureIgnoreCase))
                    {
                        _LineItem.StorageLoc = "1100";
                    }

                    //            'JJ 2014/2/26：當TW01的單子有968T開頭的料號時，將ZTB1塞入ItCa欄位
                    //            If sales_org = "TW01" AndAlso Left(UCase(.Item("part_no")), 4) = "968T" Then
                    //                DR.ItCa = "ZTB1"
                    //            End If
                    //            'ICC 2014/10/24 Check ItemCategoryGroup. If it is SAMM then set ItCa = ZTN3
                    //            Dim icg As Object = dbUtil.dbExecuteScalar("MY", String.Format("select ITEM_CATEGORY_GROUP from SAP_PRODUCT_STATUS where PART_NO='{0}' and SALES_ORG='{1}'", .Item("part_no"), sales_org))
                    //            If Not icg Is Nothing AndAlso icg.ToString = "SAMM" Then
                    //                DR.ItCa = "ZTN3"
                    //            End If
                    //        End With
                    //        DDT.Rows.Add(DR)


                }



            }
            catch (Exception e)
            {
                string _err = e.Message;
            }

            //_Order.OrgID=_ordermaster

            //_MyA.ORDER_MASTER.

            //Myadvantech.DataAccess.MyAdminContext
            return false;
        }

        //  Public Shared Function SOCreateV6(ByVal Order_No As String, ByRef ErrMsg As String, Optional ByVal isSimulate As Boolean = False, Optional ByVal QuoteID As String = "", Optional ByVal IsCreateSAPQuote As Boolean = False) As Boolean
        //    Dim IB As Integer = 0
        //    Dim myOrderMaster As New order_Master("B2B", "Order_Master"), myOrderDetail As New order_Detail("B2B", "Order_Detail")
        //    Dim my_Company As New SAP_Company("b2b", "sap_dimcompany"), myFt As New Freight("b2b", "Freight")
        //    Dim LocalTime As DateTime = SAPDOC.GetLocalTime(HttpContext.Current.Session("org_id").ToString.Substring(0, 2))
        //    Dim dtMaster As DataTable = myOrderMaster.GetDT(String.Format("order_id='{0}'", Order_No), ""), dtDetail As DataTable = myOrderDetail.GetDT(String.Format("order_id='{0}'", Order_No), "line_No")
        //    Dim dtFt As DataTable = myFt.GetDT(String.Format("order_id='{0}'", Order_No), "")
        //    Dim sales_org As String = UCase(HttpContext.Current.Session("Org_id"))
        //    If dtMaster.Rows.Count = 0 Or dtDetail.Rows.Count = 0 Then
        //        ErrMsg = "RAW DATA ERROR!"
        //        ProcStatus_Save2(ErrMsg, Order_No, "TablesMD")
        //        Return False
        //    End If
        //    Dim _currency As String = String.Empty
        //    If dtMaster.Rows(0).Item("currency") IsNot Nothing Then
        //        _currency = dtMaster.Rows(0).Item("currency")
        //    End If
        //    Dim HDT As New SAPDAL.SalesOrder.OrderHeaderDataTable, DDT As New SAPDAL.SalesOrder.OrderLinesDataTable, PDT As New SAPDAL.SalesOrder.PartnerFuncDataTable
        //    Dim TDT As New SAPDAL.SalesOrder.HeaderTextsDataTable, CODT As New SAPDAL.SalesOrder.ConditionDataTable, CDT As New SAPDAL.SalesOrder.CreditCardDataTable
        //    'Header
        //    Dim HDR As SAPDAL.SalesOrder.OrderHeaderRow = HDT.NewRow
        //    Dim soldtoID As String = String.Empty

        //    Dim _IsUS01ORG As Boolean = False, USCompanyNextWorkingDate As Date, IsBTOSOrder As Boolean = MyOrderX.IsHaveBtos(Order_No)
        //    If HttpContext.Current.Session("org_id").ToString.Trim.Equals("US01", StringComparison.OrdinalIgnoreCase) Then
        //        _IsUS01ORG = True
        //        USCompanyNextWorkingDate = MyCartOrderBizDAL.getCompNextWorkDateV2(LocalTime, HttpContext.Current.Session("org_id"), 1)
        //    End If


        //    With dtMaster
        //        soldtoID = .Rows(0).Item("soldto_id")
        //        Dim DTcompany As DataTable = my_Company.GetDT(String.Format("company_id='{0}'", soldtoID), "")
        //        If DTcompany.Rows.Count = 0 Then
        //            ErrMsg = "Invalid SoldTo!"
        //            ProcStatus_Save2(ErrMsg, Order_No, "S")
        //            Return False
        //        End If
        //        Dim distr_chan As String = "10", division As String = "00"
        //        SAPDOC.Get_disChannel_and_division(soldtoID, distr_chan, division)
        //        HDR.ORDER_TYPE = .Rows(0).Item("Order_Type") : HDR.SALES_ORG = sales_org : HDR.DIST_CHAN = distr_chan : HDR.DIVISION = division
        //        HDR.Currency = _currency
        //        If IsCreateSAPQuote Then
        //            HDR.ORDER_TYPE = "AG"
        //            If Util.IsTestingQuote2Order() Then
        //                Dim MyDC As New eQuotationDBDataContext
        //                Dim CurrVersion As Object = (From QMlist In MyDC.QuotationMasters
        //                                                      Where QMlist.quoteNo = QuoteID AndAlso QMlist.Active = True
        //                                                      Select QMlist.Revision_Number).FirstOrDefault()
        //                If CurrVersion IsNot Nothing AndAlso Not String.IsNullOrEmpty(CurrVersion) Then
        //                    HDR.VERSION = QuoteID + "V" + CurrVersion.ToString.Trim
        //                End If
        //            End If
        //        Else
        //            'If Not IsNothing(HttpContext.Current.Session("OPTYID")) Then
        //            '    HDR.VERSION = HttpContext.Current.Session("OPTYID")
        //            'End If
        //            'If String.Equals(sales_org, "TW01", StringComparison.CurrentCultureIgnoreCase) Then
        //            Dim _CartMaster As CartMaster = MyCartX.GetCartMaster(HttpContext.Current.Session("CART_ID").ToString.Trim)
        //            If Not IsNothing(_CartMaster) AndAlso _CartMaster.OpportunityID IsNot Nothing AndAlso Not String.IsNullOrEmpty(_CartMaster.OpportunityID.Trim) Then
        //                HDR.VERSION = _CartMaster.OpportunityID
        //            End If
        //            'End If
        //        End If
        //        If Not String.IsNullOrEmpty(.Rows(0).Item("DIST_CHAN").ToString()) Then
        //            HDR.DIST_CHAN = .Rows(0).Item("DIST_CHAN").ToString() : HDR.DIVISION = .Rows(0).Item("DIVISION").ToString()
        //            'HDR.SalesGroup = .Rows(0).Item("SALESGROUP").ToString() : HDR.SalesOffice = .Rows(0).Item("SALESOFFICE").ToString()
        //        End If
        //        'ICC 2014/10/17 Only US order has to set sales_group and sales_office
        //        If HttpContext.Current.Session("ORG_ID").ToString.ToUpper.StartsWith("US") Then
        //            HDR.SalesGroup = .Rows(0).Item("SALESGROUP").ToString() : HDR.SalesOffice = .Rows(0).Item("SALESOFFICE").ToString()
        //        End If
        //        HDR.INCO1 = .Rows(0).Item("INCOTERM")
        //        Dim INCO2 As String = "blank"
        //        If .Rows(0).Item("INCOTERM_TEXT") <> "" Then INCO2 = .Rows(0).Item("INCOTERM_TEXT")
        //        HDR.INCO2 = INCO2
        //        Dim Company_Country As String = ""
        //        If DTcompany.Rows(0).Item("COUNTRY_NAME") IsNot DBNull.Value Then Company_Country = DTcompany.Rows(0).Item("COUNTRY_NAME")
        //        If Company_Country.ToUpper = "NL" Then
        //            HDR.SHIPTO_COUNTRY = Company_Country.ToUpper : HDR.TRIANGULAR_INDICATOR = "X"
        //        End If
        //        If String.IsNullOrEmpty(.Rows(0).Item("PAYTERM").ToString()) = False Then
        //            HDR.PAYTERM = UCase(.Rows(0).Item("PAYTERM").ToString())
        //        End If

        //        'Frank 20140701: Control Order's taxable status 
        //        HDR.TAX_CLASS = ""
        //        If sales_org.ToUpper.StartsWith("US") Then
        //            HDR.TAX_CLASS = IIf(Integer.TryParse(.Rows(0).Item("isExempt"), 0) AndAlso CInt(.Rows(0).Item("isExempt")) = 1, 0, 1)
        //        End If

        //        Dim rd As DateTime = LocalTime
        //        If CDate(.Rows(0).Item("required_date")) > rd Then
        //            rd = CDate(.Rows(0).Item("required_date"))
        //        End If

        //        '\Ming 20140929  检查页面停留时间过长，是不是已经过了13点。
        //        If _IsUS01ORG AndAlso Not IsBTOSOrder Then
        //            If DateDiff(DateInterval.Day, CDate(LocalTime.ToString("yyyy/MM/dd")), rd) <= 0 Then
        //                If LocalTime.Hour >= 13 Then
        //                    rd = USCompanyNextWorkingDate.ToString("yyyy/MM/dd")
        //                End If
        //            End If
        //        End If

        //        HDR.REQUIRE_DATE = rd.ToString("yyyy/MM/dd") : HDR.SHIP_CONDITION = Left(.Rows(0).Item("SHIP_CONDITION"), 2)
        //        HDR.CUST_PO_NO = IIf(.Rows(0).Item("po_no") = "", Order_No, .Rows(0).Item("po_no")) : HDR.SHIP_CUST_PO_NO = ""
        //        HDR.PO_DATE = Global_Inc.FormatDate(.Rows(0).Item("po_date"))
        //        If .Rows(0).Item("partial_flag") = "0" Then HDR.PARTIAL_SHIPMENT = "X"
        //        If HttpContext.Current.Session("org_id").ToString.Trim.Equals("EU10", StringComparison.OrdinalIgnoreCase) Then
        //            'Frank 20141002
        //            'If MyOrderX.IsHaveBtos(Order_No) Then HDR.PARTIAL_SHIPMENT = ""
        //            If IsBTOSOrder Then HDR.PARTIAL_SHIPMENT = ""
        //        End If
        //        HDR.EARLY_SHIP = "0001"
        //        If .Rows(0).Item("SOLDTO_ID") = "SAID" Then
        //            HDR.TAXDEL_CTY = "SG" : HDR.TAXDES_CTY = "ID"
        //        End If
        //        If Not IsDBNull(.Rows(0).Item("DISTRICT")) AndAlso .Rows(0).Item("DISTRICT") <> "" Then
        //            HDR.DISTRICT = .Rows(0).Item("DISTRICT").ToString
        //        End If
        //    End With
        //    If Not String.IsNullOrEmpty(QuoteID) AndAlso Not IsCreateSAPQuote Then
        //        HDR.Ref_Doc = QuoteID
        //    End If
        //    If Not String.IsNullOrEmpty(QuoteID) AndAlso isSimulate = True Then
        //        HDR.Ref_Doc = QuoteID
        //    End If
        //    If (Not dtMaster.Rows(0).Item("Created_By").ToString.ToLower.Contains("nada.liu")) AndAlso (Util.IsTesting() Or HttpContext.Current.Request.ServerVariables("SERVER_PORT").ToString() <> "80") Then
        //        HDR.DEST_TYPE = 1
        //    End If
        //    If dtMaster.Rows(0).Item("Created_By").ToString.ToLower.Contains("py.khor") Then
        //        HDR.DEST_TYPE = 0
        //    End If
        //    HDT.Rows.Add(HDR)
        //    '/Header
        //    'Detail

        //    'Dim sORG As String = UCase(HttpContext.Current.Session("Org_id"))
        //    For Each R As DataRow In dtDetail.Rows
        //        Dim DR As SAPDAL.SalesOrder.OrderLinesRow = DDT.NewRow
        //        With R
        //            DR.PART_Dlv = ""
        //            'If UCase(HttpContext.Current.Session("Org_id")) <> "EU10" Then
        //            If .Item("ORDER_LINE_TYPE") = 1 Then
        //                If Not IsDBNull(.Item("HigherLevel")) AndAlso Integer.TryParse(.Item("HigherLevel"), 0) Then
        //                    DR.HIGHER_LEVEL = .Item("HigherLevel").ToString()
        //                Else
        //                    DR.HIGHER_LEVEL = "100"
        //                End If
        //            End If
        //            'End If
        //            DR.LINE_NO = .Item("Line_No")
        //            'If UCase(HttpContext.Current.Session("Org_id")) <> "EU10" Then DR.DELIVERY_GROUP = "10"
        //            'If dtMaster.Rows(0).Item("SOLDTO_ID") = "SAID" Then 
        //            If Not IsDBNull(.Item("DeliveryPlant")) AndAlso .Item("DeliveryPlant").ToString.Length > 0 Then
        //                DR.PLANT = .Item("DeliveryPlant")
        //            End If
        //            If Global_Inc.IsNumericItem(.Item("part_no")) Then
        //                DR.MATERIAL = "00000000" & .Item("part_no")
        //            Else
        //                If CInt(.Item("ORDER_LINE_TYPE")) = OrderItemType.BtosParent Then
        //                    DR.MATERIAL = replaceCartBTO(.Item("part_no"))
        //                Else
        //                    DR.MATERIAL = .Item("part_no")
        //                End If
        //            End If
        //            If Not IsDBNull(.Item("Description")) Then
        //                If Not .Item("Description").ToString.Trim.Length > 40 Then
        //                    DR.Description = .Item("Description").ToString.Trim
        //                End If
        //            End If
        //            DR.CUST_MATERIAL = .Item("CustMaterialNo") : DR.DMF_FLAG = .Item("DMF_Flag") : DR.QTY = .Item("qty")
        //            Dim rd As DateTime = LocalTime
        //            If CDate(.Item("required_date")) > rd Then rd = CDate(.Item("required_date"))
        //            DR.REQ_DATE = rd.ToString("yyyy/MM/dd") : DR.PRICE = .Item("unit_price") : DR.CURRENCY = dtMaster.Rows(0).Item("currency")
        //            '\ 20140825 欧洲Btos Parent Item FirstDate 设置成 2020-12-31
        //            If MyOrderX.IsEUBtosOrder(Order_No) Then
        //                If CInt(.Item("ORDER_LINE_TYPE")) = OrderItemType.BtosParent Then
        //                    DR.REQ_DATE = "2020/12/31" ' rd.AddYears(1).ToString("yyyy/MM/dd")
        //                End If
        //            End If
        //            '/end
        //            '\Ming 20140929  检查页面停留时间过长，是不是已经过了13点。
        //            If _IsUS01ORG AndAlso Not IsBTOSOrder Then
        //                If DateDiff(DateInterval.Day, CDate(LocalTime.ToString("yyyy/MM/dd")), CDate(DR.REQ_DATE)) <= 0 Then
        //                    If LocalTime.Hour >= 13 Then
        //                        DR.REQ_DATE = USCompanyNextWorkingDate.ToString("yyyy/MM/dd")
        //                    End If
        //                End If
        //            End If
        //            '/end
        //            '\ 2013-8-26,MXT2****下單時，傳進SAP SO的part no的price传空值，为了就是能让SAP自动带出UUMM001的价格
        //            If Util.IsMexicoT2Customer(soldtoID, "") Then
        //                DR.PRICE = "0"
        //            End If
        //            '/ end
        //            'ODM Spacial setting 
        //            If MyCartOrderBizDAL.isODMOrder(Order_No) Then
        //                DR.PLANT = "TWM3" : DR.ShipPoint = "TWH1"
        //                'DR.StorageLoc = "0018"
        //            End If
        //            'End ODM Spacial setting

        //            'Frank 2013/06/18: Set storage location to "1100" when creating sales order for SG01
        //            If UCase(HttpContext.Current.Session("Org_id")) = "SG01" Then
        //                DR.StorageLoc = "1100"
        //            End If

        //            'JJ 2014/2/26：當TW01的單子有968T開頭的料號時，將ZTB1塞入ItCa欄位
        //            If sales_org = "TW01" AndAlso Left(UCase(.Item("part_no")), 4) = "968T" Then
        //                DR.ItCa = "ZTB1"
        //            End If
        //            'ICC 2014/10/24 Check ItemCategoryGroup. If it is SAMM then set ItCa = ZTN3
        //            Dim icg As Object = dbUtil.dbExecuteScalar("MY", String.Format("select ITEM_CATEGORY_GROUP from SAP_PRODUCT_STATUS where PART_NO='{0}' and SALES_ORG='{1}'", .Item("part_no"), sales_org))
        //            If Not icg Is Nothing AndAlso icg.ToString = "SAMM" Then
        //                DR.ItCa = "ZTN3"
        //            End If
        //        End With
        //        DDT.Rows.Add(DR)
        //    Next
        //    '/Detail

        //    'Text
        //    With dtMaster
        //        Dim TR1 As SAPDAL.SalesOrder.HeaderTextsRow = TDT.NewRow, TR2 As SAPDAL.SalesOrder.HeaderTextsRow = TDT.NewRow, TR3 As SAPDAL.SalesOrder.HeaderTextsRow = TDT.NewRow
        //        Dim TR4 As SAPDAL.SalesOrder.HeaderTextsRow = TDT.NewRow, TR5 As SAPDAL.SalesOrder.HeaderTextsRow = TDT.NewRow
        //        TR1.TEXT_ID = "0001" 'SALESNOTE
        //        TR1.LANG_ID = "EN" : TR1.TEXT_LINE = .Rows(0).Item("SALES_NOTE")
        //        TR2.TEXT_ID = "0002" 'EXNOTE
        //        TR2.LANG_ID = "EN" : TR2.TEXT_LINE = .Rows(0).Item("ORDER_NOTE")
        //        TR3.TEXT_ID = "ZEOP" 'OPNOTE
        //        TR3.LANG_ID = "EN" : TR3.TEXT_LINE = .Rows(0).Item("OP_NOTE")
        //        TR4.TEXT_ID = "ZPRJ" 'PRJNOTE
        //        TR4.LANG_ID = "EN" : TR4.TEXT_LINE = .Rows(0).Item("prj_NOTE")
        //        TR5.TEXT_ID = "ZBIL" 'Billing Instruction
        //        TR5.LANG_ID = "EN" : TR5.TEXT_LINE = .Rows(0).Item("BILLINGINSTRUCTION_INFO")
        //        TDT.Rows.Add(TR1) : TDT.Rows.Add(TR2) : TDT.Rows.Add(TR3) : TDT.Rows.Add(TR4) : TDT.Rows.Add(TR5)
        //        If Not String.IsNullOrEmpty(.Rows(0).Item("CREDIT_CARD").ToString()) AndAlso Not String.IsNullOrEmpty(.Rows(0).Item("CREDIT_CARD_VERIFY_NUMBER").ToString()) _
        //            AndAlso Date.TryParse(.Rows(0).Item("CREDIT_CARD_EXPIRE_DATE").ToString(), Now) Then
        //            CDT.AddCreditCardRow(.Rows(0).Item("CREDIT_CARD_HOLDER").ToString(), CDate(.Rows(0).Item("CREDIT_CARD_EXPIRE_DATE").ToString()).ToString("yyyyMMdd"), _
        //                                 .Rows(0).Item("CREDIT_CARD_TYPE").ToString(), .Rows(0).Item("CREDIT_CARD").ToString(), .Rows(0).Item("CREDIT_CARD_VERIFY_NUMBER").ToString())
        //        End If
        //    End With
        //    '/Text
        //    'Partner
        //    With dtMaster
        //        Dim PR1 As SAPDAL.SalesOrder.PartnerFuncRow = PDT.NewRow, PR2 As SAPDAL.SalesOrder.PartnerFuncRow = PDT.NewRow
        //        'ming get value from OrderPartners
        //        Dim A As New MyOrderDSTableAdapters.ORDER_PARTNERSTableAdapter
        //        Dim OPdt As MyOrderDS.ORDER_PARTNERSDataTable = A.GetPartnersByOrderID(Order_No)
        //        If OPdt.Rows.Count = 0 Then
        //            ErrMsg = "Order without partner info"
        //            ProcStatus_Save2(ErrMsg, Order_No, "ORDER_PARTNERS")
        //            Return False
        //        End If
        //        Dim TempSOLDTO As String = String.Empty, TempB As String = String.Empty, KeyInPerson As String = String.Empty
        //        Dim ParentCompany As String = String.Empty
        //        For Each op As MyOrderDS.ORDER_PARTNERSRow In OPdt
        //            Dim PR As SAPDAL.SalesOrder.PartnerFuncRow = PDT.NewRow()
        //            PR.NUMBER = op.ERPID.ToUpper.Trim
        //            If op.TYPE.Equals("SOLDTO", StringComparison.OrdinalIgnoreCase) Then
        //                PR.ROLE = "AG"
        //                TempSOLDTO = op.ERPID.ToUpper.Trim
        //                '\2013-8-26,MXT2****在MyAdvantech下單時，傳進SAP SO的sold to要替換成UUMM001，其他參數都維持一樣
        //                If Util.IsMexicoT2Customer(op.ERPID.ToUpper.Trim, ParentCompany) Then
        //                    PR.NUMBER = ParentCompany
        //                End If
        //                '/end
        //                PDT.Rows.Add(PR)
        //            ElseIf op.TYPE.Equals("S", StringComparison.OrdinalIgnoreCase) Then
        //                PR.ROLE = "WE"
        //                '\2013-8-26,MXT2****在MyAdvantech下單時，傳進SAP SO的sold to要替換成UUMM001，其他參數都維持一樣
        //                If Util.IsMexicoT2Customer(op.ERPID.ToUpper.Trim, ParentCompany) Then
        //                    PR.NUMBER = ParentCompany
        //                End If
        //                '/end
        //                PDT.Rows.Add(PR)
        //            ElseIf op.TYPE.Equals("B", StringComparison.OrdinalIgnoreCase) Then
        //                PR.ROLE = "RE"
        //                TempB = op.ERPID.ToUpper.Trim
        //                PDT.Rows.Add(PR)
        //            ElseIf op.TYPE.Equals("E", StringComparison.OrdinalIgnoreCase) Then
        //                PR.ROLE = "VE"
        //                PDT.Rows.Add(PR)
        //            ElseIf op.TYPE.Equals("E2", StringComparison.OrdinalIgnoreCase) Then
        //                PR.ROLE = "Z2"
        //                PDT.Rows.Add(PR)
        //            ElseIf op.TYPE.Equals("E3", StringComparison.OrdinalIgnoreCase) Then
        //                PR.ROLE = "Z3"
        //                PDT.Rows.Add(PR)
        //            ElseIf op.TYPE.Equals("KIP", StringComparison.OrdinalIgnoreCase) Then
        //                KeyInPerson = op.ERPID.ToUpper.Trim
        //            ElseIf op.TYPE.Equals("EM", StringComparison.OrdinalIgnoreCase) Then
        //                PR.ROLE = "EM"
        //                PDT.Rows.Add(PR)
        //            End If
        //            PDT.AcceptChanges()
        //        Next
        //        If Not String.IsNullOrEmpty(TempB) AndAlso Not String.IsNullOrEmpty(TempSOLDTO) Then ' AndAlso TempB <> TempSOLDTO Then
        //            Dim PR As SAPDAL.SalesOrder.PartnerFuncRow = PDT.NewRow()
        //            PR.NUMBER = TempB
        //            PR.ROLE = "RG"
        //            PDT.Rows.Add(PR)
        //            PDT.AcceptChanges()
        //        End If
        //        'Dim KeyInPerson As String = SAPDOC.GetKeyInPerson(dtMaster.Rows(0).Item("CREATED_BY").ToString)
        //        If Not String.IsNullOrEmpty(KeyInPerson) Then
        //            Dim PR6 As SAPDAL.SalesOrder.PartnerFuncRow = PDT.NewRow : PR6.ROLE = "ZR" : PR6.NUMBER = KeyInPerson : PDT.Rows.Add(PR6)
        //        End If
        //        If .Rows(0).Item("ER_EMPLOYEE") <> "" Then
        //            Dim PR3 As SAPDAL.SalesOrder.PartnerFuncRow = PDT.NewRow : PR3.ROLE = "ZM" : PR3.NUMBER = .Rows(0).Item("ER_EMPLOYEE") : PDT.Rows.Add(PR3)
        //        End If
        //        If .Rows(0).Item("END_CUST") <> "" Then
        //            Dim PR4 As SAPDAL.SalesOrder.PartnerFuncRow = PDT.NewRow : PR4.ROLE = "EM" : PR4.NUMBER = .Rows(0).Item("END_CUST") : PDT.Rows.Add(PR4)
        //        End If
        //        ' ming end
        //        'PR1.ROLE = "AG" : PR1.NUMBER = .Rows(0).Item("soldto_id").ToString.ToUpper : PDT.Rows.Add(PR1)
        //        'PR2.ROLE = "WE" : PR2.NUMBER = .Rows(0).Item("shipto_id").ToString.ToUpper : PDT.Rows.Add(PR2)

        //        'If .Rows(0).Item("EMPLOYEEID") <> "" Then
        //        '    Dim PR5 As SAPDAL.SalesOrder.PartnerFuncRow = PDT.NewRow : PR5.ROLE = "VE" : PR5.NUMBER = .Rows(0).Item("EMPLOYEEID") : PDT.Rows.Add(PR5)
        //        'End If
        //        'If Not IsDBNull(.Rows(0).Item("BILLTO_ID")) AndAlso .Rows(0).Item("BILLTO_ID").ToString <> "" AndAlso _
        //        '   Not .Rows(0).Item("BILLTO_ID").ToString.Trim.Equals(.Rows(0).Item("soldto_id").ToString, StringComparison.OrdinalIgnoreCase) Then
        //        '    Dim PR7 As SAPDAL.SalesOrder.PartnerFuncRow = PDT.NewRow : PR7.ROLE = "RE" : PR7.NUMBER = .Rows(0).Item("BILLTO_ID") : PDT.Rows.Add(PR7)
        //        'End If
        //    End With
        //    '/Partner
        //    'Condition
        //    For Each R As DataRow In dtFt.Rows
        //        Dim conLine As SAPDAL.SalesOrder.ConditionRow = CODT.NewRow
        //        With R
        //            conLine.TYPE = .Item("ftype") : conLine.VALUE = .Item("fvalue") : conLine.CURRENCY = dtMaster.Rows(0).Item("currency")
        //        End With
        //        CODT.Rows.Add(conLine)
        //    Next

        //    '/Condition
        //    Dim RDT As New DataTable : RDT.TableName = "RDTABLE"
        //    Dim WS As New SAPDAL.SAPDAL

        //    Dim B As Boolean = False
        //    Dim REFORDERNO As String = Order_No
        //    Dim OMExt As orderMasterExtensionV2 = MyOrderX.GetOrderMasterExtension(Order_No)
        //    Dim UpdateOrderNoFlag As Boolean = False
        //    If OMExt IsNot Nothing AndAlso OMExt.OrderNoScheme = 1 Then
        //        REFORDERNO = "" : UpdateOrderNoFlag = True
        //    End If
        //    If IsCreateSAPQuote Then
        //        Dim Temp_QuoteID As String = QuoteID
        //        B = WS.CreateQuotation(QuoteID, ErrMsg, HDT, DDT, PDT, CODT, TDT, RDT)
        //        If B = False Then
        //            'Util.SendEmail("eBusiness.AEU@advantech.eu,ming.zhao@advantech.com.cn", "myadvanteh@advantech.com", "Create SAP Quote Failed:" + Temp_QuoteID, ErrMsg, True, "", "")
        //            ProcStatus_Save(RDT, Temp_QuoteID, IB, "AG")
        //            SAPDOC.SendFailedOrderMail(QuoteID, Order_No)
        //        End If
        //        Return B
        //    End If
        //    If dtMaster.Rows(0).Item("Order_Type").ToString.ToUpper = "ZOR2" Or dtMaster.Rows(0).Item("Order_Type").ToString.ToUpper = "ZOR" _
        //        Or dtMaster.Rows(0).Item("Order_Type").ToString.ToUpper = "ZOR6" Then
        //        If isSimulate Then
        //            Dim sno As String = "DMO"
        //            Dim RNO As New Random
        //            sno &= RNO.Next(0, 9999999).ToString("0000000")
        //            B = WS.SimulateSO(sno, ErrMsg, HDT, DDT, PDT, CODT, TDT, CDT, RDT, LocalTime)
        //        Else
        //            B = WS.CreateSO(REFORDERNO, ErrMsg, HDT, DDT, PDT, CODT, TDT, CDT, RDT, LocalTime)
        //        End If
        //    ElseIf dtMaster.Rows(0).Item("Order_Type").ToString.ToUpper = "AG" Then
        //        'B = WS.CreateQuotation(REFORDERNO, ErrMsg, HDT, DDT, PDT, CODT, TDT, RDT)
        //    Else
        //        ErrMsg = "DOC TYPE ERR!"
        //        Return False
        //    End If
        //    WS.Dispose()
        //    If B AndAlso UpdateOrderNoFlag Then
        //        Dim NewOrderNo = SAPDAL.Global_Inc.RemovePrecedingZeros(REFORDERNO)
        //        Dim sb As StringBuilder = New StringBuilder()
        //        sb.AppendFormat(" update ORDER_MASTER set ORDER_ID ='{0}', ORDER_NO='{0}' WHERE ORDER_ID='{1}';", NewOrderNo, Order_No)
        //        sb.AppendFormat(" update  ORDER_DETAIL set ORDER_ID ='{0}' where ORDER_ID='{1}' ", NewOrderNo, Order_No)
        //        dbUtil.dbExecuteNoQuery("MY", sb.ToString())
        //        Order_No = NewOrderNo
        //    End If
        //    'OrderUtilities.showDT(RDT) : HttpContext.Current.Response.End()
        //    Dim ordertype As String = dtMaster.Rows(0).Item("Order_Type").ToString.ToUpper
        //    If Not String.IsNullOrEmpty(ErrMsg.ToString.Trim) Then
        //        ErrMsg = "Internal Error occurred:  " + ErrMsg.ToString.Trim
        //        Util.InsertMyErrLog("Create SO Failed " + Order_No + ": " + ErrMsg)
        //        Dim A As New MyOrderDSTableAdapters.ORDER_PROC_STATUS2TableAdapter
        //        A.Insert(Order_No, 1, 1, ErrMsg, Now.Date, 0, ordertype)
        //    End If
        //    If B Then IB = 1
        //    ProcStatus_Save(RDT, Order_No, IB, ordertype)
        //    'Catch ex As Exception
        //    '    ErrMsg = ex.ToString()
        //    '    Return False
        //    'End Try
        //    If IB = 1 Then
        //        Return True
        //    Else
        //        Return False
        //    End If
        //End Function

        /// <summary>
        /// Check if our system has to show list price as L1 price to account
        /// </summary>
        /// <param name="ERPID"></param>
        /// <returns></returns>
        public static Boolean IsBBShowWebPrice(String ERPID)
        {
            List<SAP_DIMCOMPANY> CompanyList = MyAdvantechDAL.GetSAPDIMCompanyByERPID(ERPID);
            if (CompanyList.Count > 0 
                && CompanyList[0].ORG_ID.Equals("US10",StringComparison.InvariantCultureIgnoreCase)
                && CompanyList[0].PRICE_GRP.Equals("L1", StringComparison.InvariantCultureIgnoreCase))
            {
                return true;
            }

            return false;
        }

        public static Boolean IsRiskOrder(String id, RiskOrderInputType input_type)
        {
            try
            {
                Decimal total_amount = 0;
                String sql_str = String.Empty;
                String connection_str = String.Empty;

                MyAdvantechDAL myadal = new MyAdvantechDAL();
                eQuotationDAL eqdal = new eQuotationDAL();

                switch (input_type)
                {
                    case RiskOrderInputType.Quote:

                        // Ryan 20170321 Return true if total amount is greater than 10000 per Denise's request.                        
                        List<QuotationDetail> list_qd = eqdal.GetQuoteDetailByQuoteID(id);
                        foreach (QuotationDetail q in list_qd)
                        {
                            total_amount += (decimal)(q.unitPrice * q.qty);
                        }
                        if (total_amount > 10000)
                            return true;

                        // Ryan 20180717 If any items part number start with 968T then treat it as NCNR per Denise's request.
                        if(list_qd.Where(qd=>qd.partNo.ToUpper().StartsWith("968T")).Any())
                            return true;

                        connection_str = "EQ";
                        sql_str = "select a.partNo as partno, a.Qty as qty, a.UnitPrice as unit_price,b.ABC_INDICATOR,C.PRODUCT_TYPE " +
                            " from QuotationDetail a left join MyAdvantechGlobal.dbo.SAP_PRODUCT_ABC b " +
                            " on a.partNo=b.PART_NO left join MyAdvantechGlobal.dbo.SAP_PRODUCT c on a.partNo=c.PART_NO " +
                            " where a.quoteId ='" + id + "' and b.PLANT='USH1' and " +
                            " ((b.ABC_INDICATOR like 'C%' or b.ABC_INDICATOR like 'D%' or b.ABC_INDICATOR like 'T%' or b.ABC_INDICATOR like 'P%') " +
                            " or (c.PRODUCT_TYPE='ZPER' and (a.partNo like 'X%' or a.partNo like 'Y%')))";
                        break;

                    case RiskOrderInputType.Cart:

                        // Ryan 20170321 Return true if total amount is greater than 10000 per Denise's request.
                        List<cart_DETAIL_V2> list_cd = myadal.GetCartDetailV2ByCartID(id);
                        foreach (cart_DETAIL_V2 c in list_cd)
                        {
                            total_amount += (decimal)(c.Unit_Price * c.Qty);
                        }
                        if (total_amount > 10000)
                            return true;

                        // Ryan 20180717 If any items part number start with 968T then treat it as NCNR per Denise's request.
                        if (list_cd.Where(cd => cd.Part_No.ToUpper().StartsWith("968T")).Any())
                            return true;

                        connection_str = "MY";
                        sql_str = "select a.Part_No as partno, a.Qty as qty, a.Unit_Price as unit_price,b.ABC_INDICATOR,C.PRODUCT_TYPE " +
                            " from cart_DETAIL_V2 a left join SAP_PRODUCT_ABC b on a.Part_No = b.PART_NO " +
                            " left join SAP_PRODUCT c on a.Part_No = c.PART_NO " +
                            " where Cart_Id = '" + id + "' and b.PLANT='USH1' and " +
                            " ( (b.ABC_INDICATOR like 'C%' or b.ABC_INDICATOR like 'D%' or b.ABC_INDICATOR like 'T%' or b.ABC_INDICATOR like 'P%') " +
                            "  or (c.PRODUCT_TYPE='ZPER' and (a.Part_No like 'X%' or a.Part_No like 'Y%')) )";
                        break;

                    case RiskOrderInputType.Order:

                        // Ryan 20170321 Return true if total amount is greater than 10000 per Denise's request.
                        List<ORDER_DETAIL> list_od = MyAdvantechDAL.GetOrderDetail(id);
                        foreach (ORDER_DETAIL o in list_od)
                        {
                            total_amount += (decimal)(o.UNIT_PRICE * o.QTY);
                        }
                        if (total_amount > 10000)
                            return true;

                        // Ryan 20180717 If any items part number start with 968T then treat it as NCNR per Denise's request.
                        if (list_od.Where(od => od.PART_NO.ToUpper().StartsWith("968T")).Any())
                            return true;

                        connection_str = "MY";
                        sql_str = "select a.Part_No as partno, a.Qty as qty, a.Unit_Price as unit_price,b.ABC_INDICATOR,C.PRODUCT_TYPE " +
                            " from ORDER_DETAIL a left join SAP_PRODUCT_ABC b on a.Part_No = b.PART_NO " +
                            " left join SAP_PRODUCT c on a.Part_No = c.PART_NO " +
                            " where ORDER_ID = '" + id + "' and b.PLANT='USH1' and " +
                            " ( (b.ABC_INDICATOR like 'C%' or b.ABC_INDICATOR like 'D%' or b.ABC_INDICATOR like 'T%' or b.ABC_INDICATOR like 'P%') " +
                            "  or (c.PRODUCT_TYPE='ZPER' and (a.Part_No like 'X%' or a.Part_No like 'Y%')) )";
                        break;

                    default:
                        break;
                }
                DataTable dt = SqlProvider.dbGetDataTable(connection_str, sql_str);

                if (dt.Rows.Count > 0 && dt != null)
                {
                    foreach (DataRow d in dt.Rows)
                    {
                        if ((Convert.ToDecimal(d["qty"]) * Convert.ToDecimal(d["unit_price"])) > 2000 && input_type != RiskOrderInputType.Quote)
                            return true;
                    }
                }

                return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public static bool isERPIDExist(string ERPID)
        {
            return DataAccess.SAPDAL.isERPIDExist(ERPID, false);
        }
        public static String GenerateNewUSShipToID(String _CountryCode, String _Region, String _CompanyName, Boolean _isTesting)
        {
            String ERPID = "";
            int ascii_no = 65; // Represents "A"

            // Input parameter can't be null or empty.
            if (String.IsNullOrEmpty(_CountryCode) || String.IsNullOrEmpty(_CompanyName) || (_CountryCode.Equals("USA") && String.IsNullOrEmpty(_Region)))
            {
                System.Net.Mail.SmtpClient smtpClient1 = new System.Net.Mail.SmtpClient(ConfigurationManager.AppSettings["SMTPServer"]);
                smtpClient1.Send("YL.Huang@advantech.com.tw", "Frank.Chung@advantech.com.tw,YL.Huang@advantech.com.tw,Javian.Tsai@advantech.com.tw",
                    string.Format("Check Point Auto-Create Shipto Failed"),
                    string.Format("One of countrycode, statename or companyname is null or empty.") + "\r\nTime: " + DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss"));
                return "";
            }

            _CountryCode = _CountryCode.ToUpper();
            _CompanyName = _CompanyName.ToUpper();
            if (!String.IsNullOrEmpty(_Region)) _Region = _Region.ToUpper();

            // Remove non letter and non numeric char
            Regex reg = new Regex(@"[^\p{L}\p{N}]+");
            _CompanyName = reg.Replace(_CompanyName, "");

            if (_CountryCode.Equals("US", StringComparison.CurrentCultureIgnoreCase))
            {
                ERPID = "U" + _Region.Substring(0, 2) + _CompanyName.Substring(0, 3) + "01";
                while (DataAccess.SAPDAL.isERPIDExist((ERPID + Convert.ToChar(ascii_no).ToString()), _isTesting))
                {
                    ascii_no++;
                }
                ERPID = ERPID + Convert.ToChar(ascii_no).ToString();
            }
            else
            {
                ERPID = "UZ" + _CountryCode + _CompanyName.Substring(0, 3) + "1";
                while (DataAccess.SAPDAL.isERPIDExist((ERPID + Convert.ToChar(ascii_no).ToString()), _isTesting))
                {
                    ascii_no++;
                }
                ERPID = ERPID + Convert.ToChar(ascii_no).ToString();
            }

            return ERPID;
        }

        public static String GenerateNewSoldToID_ForANASalesTeam(String _CompanyName, AOnlineRegion aonlineReg, Boolean _isTesting)
        {
            String ERPID = "";
            //int ascii_no = 65; // Represents "A"
            int seqno = 1; // Represents "A"

            // Input parameter can't be null or empty.
            if (String.IsNullOrEmpty(_CompanyName))
            {
                //System.Net.Mail.SmtpClient smtpClient1 = new System.Net.Mail.SmtpClient(ConfigurationManager.AppSettings["SMTPServer"]);
                //smtpClient1.Send("YL.Huang@advantech.com.tw", "Frank.Chung@advantech.com.tw,YL.Huang@advantech.com.tw,Alex.Chiu@advantech.com.tw",
                //    string.Format("eQ create Shipto Failed"),
                //    string.Format("One of countrycode, statename or companyname is null or empty.") + "\r\nTime: " + DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss"));
                return "";
            }

            //_CountryCode = _CountryCode.ToUpper();
            _CompanyName = _CompanyName.ToUpper();
            //if (!String.IsNullOrEmpty(_Region)) _Region = _Region.ToUpper();

            // Remove non letter and non numeric char
            Regex reg = new Regex(@"[^\p{L}\p{N}]+");
            _CompanyName = reg.Replace(_CompanyName, "");


            //Denise 20180711
            //Users that are part of aonline.usa email group -> U + (1st 3 letters of the account name) + 5xxx
            //Users that are part of aonline.usa.iag & Aonline.USA.iSystem email group -> U + (1st 3 letters of the account name) +000x

            switch (aonlineReg)
            {
                case AOnlineRegion.AUS_AOnline:
                    int _baseval = 5000;
                    do
                    {
                        ERPID = "U" + _CompanyName.Substring(0, 3) + Convert.ToString(_baseval + seqno);
                        seqno++;
                    } while (DataAccess.SAPDAL.isERPIDExist(ERPID, _isTesting));

                    break;

                case AOnlineRegion.AUS_AOnline_IAG | AOnlineRegion.AUS_AOnline_iSystem:
                    do
                    {
                        ERPID = "U" + _CompanyName.Substring(0, 3) + "000" + Convert.ToString(seqno);
                        seqno++;
                    } while (DataAccess.SAPDAL.isERPIDExist(ERPID, _isTesting));

                    break;

                default:
                    return string.Empty;

            }

            //ERPID = ERPID + Convert.ToChar(ascii_no).ToString();

            return ERPID;
        }




        public static DataTable GetInvoiceFromMYA(String _erpid)
        {
            // Get Invoice From ACLSTNR12, if require real-time data, should change source to SAP
            String str = "select distinct top 1000 a.idh_inv_nbr,a.due_date,a.SOamt,b.INVOICE_NO,b.CREATE_DATE " +
                         " from EAI_SALE_FACT a inner join SAP_INVOICE_SN_V2 b  " +
                         " on a.idh_inv_nbr = b.INVOICE_NO " +
                         " where a.Customer_ID = '" + _erpid + "' " +
                         " ORDER BY b.CREATE_DATE desc ";

            DataTable dt = SqlProvider.dbGetDataTable("MY", str);
            return dt;
        }

        public static DataTable GetOpenInvoiceStatus(String _erpid)
        {
            DataTable dt_invoice = GetInvoiceFromMYA(_erpid);
            String invoicelist = String.Empty;

            DataTable dt = new DataTable();
            dt.Columns.Add("AR_NO", typeof(System.String));
            dt.Columns.Add("AR_DATE", typeof(System.String));
            dt.Columns.Add("AMOUNT", typeof(System.Double));
            dt.Columns.Add("CURRENCY", typeof(System.String));
            dt.Columns.Add("AR_DUE_DATE", typeof(System.String));
            dt.Columns.Add("LOCAL_AMOUNT", typeof(System.Double));
            dt.Columns.Add("AR_STATUS", typeof(System.String));

            if (dt_invoice != null && dt_invoice.Rows.Count > 0)
            {
                List<String> a = new List<string>();
                foreach (var d in (from DataRow dr in dt_invoice.Rows select dr["idh_inv_nbr"]).Distinct().ToList())
                {
                    a.Add("'" + "00" + d.ToString() + "'");
                }
                invoicelist = "(" + String.Join(",", a.ToArray()) + ")";

                // Get open invoice from SAP bsid table.
                String str_sapbsid = "SELECT vbeln,budat,blart,xzahl,shkzg,nvl(wrbtr,0) as wrbtr,zfbdt,zbd1t,waers " +
                                     " From SAPRDP.bsid " +
                                     " where mandt='168' and kunnr='" + _erpid + "' " +
                                     " and vbeln in " + invoicelist;
                DataTable dt_bsid = OracleProvider.GetDataTable("SAP_PRD", str_sapbsid);

                if (dt_bsid.Rows.Count > 0)
                {
                    foreach (DataRow r in dt_bsid.Rows)
                    {
                        DataRow row = dt.NewRow();
                        row["AR_NO"] = r["vbeln"];
                        row["AR_DATE"] = DateTime.ParseExact(r["budat"].ToString(), "yyyyMMdd", null);
                        row["CURRENCY"] = r["waers"];

                        // amount calculating                     
                        Decimal amount = 0;
                        foreach (DataRow d in (from DataRow x in dt_invoice.Rows where x["idh_inv_nbr"].ToString().Equals(r["vbeln"].ToString().Substring(2)) select x).ToList())
                        {
                            amount += Convert.ToDecimal(d["SOamt"].ToString());
                        }
                        row["AMOUNT"] = amount;

                        row["AR_DUE_DATE"] = DateTime.ParseExact(r["zfbdt"].ToString(), "yyyyMMdd", null).AddDays(Convert.ToDouble(r["zbd1t"].ToString()));
                        if (r["shkzg"].ToString() == "H")
                        {
                            DataRow[] oridr = dt.Select("AR_NO='" + r["vbeln"].ToString() + "'");
                            if (oridr.Length > 0)
                            {
                                row["AR_DATE"] = oridr[0]["AR_DATE"];
                                row["LOCAL_AMOUNT"] = Convert.ToDecimal(row["AMOUNT"].ToString()) + Convert.ToDecimal(r["wrbtr"].ToString());
                                dt.Rows[dt.Rows.IndexOf(oridr[0])].Delete();
                            }
                        }
                        else
                        {
                            row["LOCAL_AMOUNT"] = r["wrbtr"];
                        }

                        if (String.IsNullOrEmpty(row["LOCAL_AMOUNT"].ToString()))
                        {
                            row["AR_STATUS"] = "Cleared";
                        }
                        else if (Convert.ToDecimal(row["LOCAL_AMOUNT"].ToString()) == 0)
                        {
                            row["AR_STATUS"] = "Cleared";
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(row["AR_DUE_DATE"].ToString()) | String.IsNullOrEmpty(row["AR_DUE_DATE"].ToString()))
                            {
                                row["AR_STATUS"] = "Open";
                            }
                            else
                            {
                                if (Convert.ToDecimal(row["AMOUNT"].ToString()) - Convert.ToDecimal(row["LOCAL_AMOUNT"].ToString()) != 0)
                                {
                                    if (Convert.ToDateTime(row["AR_DUE_DATE"]) < System.DateTime.Today)
                                    {
                                        row["AR_STATUS"] = "Partial Overdue";
                                    }
                                    else
                                    {
                                        row["AR_STATUS"] = "Partially Cleared";
                                    }
                                }
                                else
                                {
                                    if (Convert.ToDateTime(row["AR_DUE_DATE"].ToString()) < System.DateTime.Today)
                                    {
                                        row["AR_STATUS"] = "Overdue";
                                    }
                                    else
                                    {
                                        row["AR_STATUS"] = "Open";
                                    }
                                }
                            }
                        }
                        dt.Rows.Add(row);
                    }
                }
            }
            return dt;
        }

        public static String GetAJPTermsSummary(String _quoteid)
        {
            Advantech.Myadvantech.DataAccess.AJP_ConfiguratorTerms AJP_Entity = Advantech.Myadvantech.DataAccess.eQuotationDAL.Get_AJPTermsRecord(_quoteid);
            String result = String.Empty;

            if (AJP_Entity != null)
            {
                if (!String.IsNullOrEmpty(AJP_Entity.HW_COMUSB))
                    result += "ＣＯＭ／ＵＳＢブラケットの設置位置: " + AJP_Entity.HW_COMUSB + "\n";

                if (!String.IsNullOrEmpty(AJP_Entity.HW_Storage))
                    result += "ストレージの取り付け順序: " + AJP_Entity.HW_Storage + "\n";

                if (!String.IsNullOrEmpty(AJP_Entity.HW_SATA))
                    result += "ＳＡＴＡケーブルの接続順序について: " + AJP_Entity.HW_SATA + "\n";

                if (!String.IsNullOrEmpty(AJP_Entity.HW_Disk_Division))
                    result += "パーティションの指示: " + AJP_Entity.HW_Disk_Division + "\n";

                if (!String.IsNullOrEmpty(AJP_Entity.HW_Cable))
                    result += "ケーブル整理・固定: " + AJP_Entity.HW_Cable + "\n";

                if (!String.IsNullOrEmpty(AJP_Entity.HW_BIOS))
                    result += "ＢＩＯＳ設定: " + AJP_Entity.HW_BIOS + "\n";

                if (!String.IsNullOrEmpty(AJP_Entity.HW_OS_License))
                    result += "ＯＳライセンスシールは本体シリアル番号の近くに貼付する: " + AJP_Entity.HW_OS_License + "\n";

                if (!String.IsNullOrEmpty(AJP_Entity.HW_OS_Activation))
                    result += "出荷時にＯＳのアクティベーションは行いません: " + AJP_Entity.HW_OS_Activation + "\n";

                if (!String.IsNullOrEmpty(AJP_Entity.HW_Others))
                    result += "その他: " + AJP_Entity.HW_Others + "\n";

                if (!String.IsNullOrEmpty(AJP_Entity.SW_OS_Installation))
                    result += "注文したＯＳをインストールします: " + AJP_Entity.SW_OS_Installation + "\n";

                if (!String.IsNullOrEmpty(AJP_Entity.SW_Username))
                    result += "ユーザー名の設定について: " + AJP_Entity.SW_Username + "\n";

                if (!String.IsNullOrEmpty(AJP_Entity.SW_OS_Timezone))
                    result += "OSのタイムゾーンの設定について: " + AJP_Entity.SW_OS_Timezone + "\n";

                if (!String.IsNullOrEmpty(AJP_Entity.SW_OS_Input))
                    result += "キーボード配列の設定について: " + AJP_Entity.SW_OS_Input + "\n";

                if (!String.IsNullOrEmpty(AJP_Entity.SW_IP_Settings))
                    result += "ＩＰアドレスの設定について: " + AJP_Entity.SW_IP_Settings + "\n";

                if (!String.IsNullOrEmpty(AJP_Entity.SW_Settings))
                    result += "その他の設定について: " + AJP_Entity.SW_Settings + "\n";

                if (!String.IsNullOrEmpty(AJP_Entity.SW_Others))
                    result += "その他: " + AJP_Entity.SW_Others + "\n";

                return result;
            }
            else
                return result;
        }

        public static String GetAJPBTOSOrderAssemblyPlant(String _orderid)
        {
            // This function is to check AJP BTOS order is AGS-SYS-A or AGS-SYS-B
            List<ORDER_DETAIL> od = MyAdvantechDAL.GetOrderDetail(_orderid);

            if (od.Count > 0)
            {
                if (od.Where(d => d.PART_NO.Equals("AGS-CTOS-SYS-A", StringComparison.OrdinalIgnoreCase)).Count() > 0)
                    return "A";
                else if (od.Where(d => d.PART_NO.Equals("OPTION 100 IQC", StringComparison.OrdinalIgnoreCase)).Count() > 0)
                    return "A";
                else if (od.Where(d => d.PART_NO.Equals("AGS-CTOS-SYS-B", StringComparison.OrdinalIgnoreCase)).Count() > 0)
                    return "B";
                else
                    return "";
            }
            else
                return "";
        }

        public static Boolean HasSAPEndCustomer(String _companyid, ref String _defaultid)
        {
            // 1. If has default end customer then return true, set ref String to default EM ID
            // 2. If has end customer but no default, then return true, but ref String will be String.empty
            // 3. If has no end customer maintained, then return false
            List<SAP_COMPANY_PARTNERS> scp_list = MyAdvantechDAL.GetSAPPARTNERSByERPID(_companyid);

            if (scp_list.Count > 0)
            {
                if (scp_list.Where(d => d.PARTNER_FUNCTION == "EM" && d.DEFPA.Equals("X")).Any())
                {
                    _defaultid = scp_list.Where(d => d.PARTNER_FUNCTION == "EM" && d.DEFPA.Equals("X")).FirstOrDefault().COMPANY_ID;
                    return true;
                }
                else if (scp_list.Where(d => d.PARTNER_FUNCTION == "EM").Any())
                    return true;
                else
                    return false;
            }
            else
                return false;
        }

        public static String GetSAPPartnerAddressString(String _ORGID, String _ParentID, String _PartnerID = "", String _COMPANYNAME = "", String _TYPE = "")
        {
            String result = String.Empty;

            result = " SELECT distinct A.KUNN2 AS company_id, A.VKORG as ORG_ID, B.NAME1 AS COMPANY_NAME, " +
                    " D.street || ' ' || D.city1 || ' ' || D.region || ' ' || D.post_code1 || ' ' || (select e.landx from saprdp.t005t e where e.land1 = B.land1 and e.spras = 'E' and rownum = 1) AS Address, " +
                    " B.Land1 AS COUNTRY, B.Ort01 AS CITY, B.STRAS as STREET, " +
                    " B.PSTLZ AS ZIP_CODE, D.region AS STATE, B.TELF1 AS TEL_NO, B.TELFX AS FAX_NO, D.NAME_CO as Attention, " +
                    " '' as PARTNER_FUNCTION, " +
                    " E.VKBUR as SalesOffice, E.VKGRP As SalesGroup, E.SPART As division, D.STR_SUPPL3 " +
                    " From saprdp.kna1 B " +
                    " Left join saprdp.adr6 C on B.adrnr = C.addrnumber " +
                    " inner join  saprdp.knvp A on A.KUNN2 = B.KUNNR " +
                    " inner join saprdp.adrc D on D.country = B.land1 And D.addrnumber = B.adrnr " +
                    " inner join saprdp.knvv E on B.KUNNR = E.KUNNR " +
                    " where B.loevm <> 'X' ";
            if (!String.IsNullOrEmpty(_COMPANYNAME)) result += String.Format(" and (Upper(B.NAME1) LIKE '%{0}%' or B.NAME2 like '%{0}%') ", _COMPANYNAME.Replace("'", "''").Trim());
            result += String.Format(" And A.Kunnr Like '%{0}%' ", _ParentID.Replace("'", "''").Trim());
            if (!String.IsNullOrEmpty(_PartnerID) && !_ParentID.Equals(_PartnerID)) result += String.Format(" AND A.KUNN2 like '%{0}%' ", _PartnerID.Replace("'", "''").Trim());
            if (!String.IsNullOrEmpty(_TYPE)) result += String.Format(" AND A.PARVW ='{0}' ", _TYPE.Replace("'", "''").Trim());
            if (!String.IsNullOrEmpty(_ORGID)) result += String.Format(" And A.VKORG = '{0}' ", _ORGID);
            result += String.Format("  ORDER BY A.Kunn2 ", _ORGID);

            return result;
        }

        public static List<Tuple<string, string>> getSAPTempGL(string org)
        {
            

            var ReadSAPTable = new Read_Sap_Table.Read_Sap_Table();
            var SAPTableData = new Read_Sap_Table.TAB512Table(); var SAPTableFields = new Read_Sap_Table.RFC_DB_FLDTable();
            var SAPTableQuery = new Read_Sap_Table.RFC_DB_OPTTable();

            SAPTableFields.Add(new Read_Sap_Table.RFC_DB_FLD() { Fieldname = "BELNR"});
            SAPTableFields.Add(new Read_Sap_Table.RFC_DB_FLD() { Fieldname = "DMBTR" });
            SAPTableQuery.Add(new Read_Sap_Table.RFC_DB_OPT() { Text = string.Format("BUKRS EQ '{0}' AND HKONT EQ '0000121004'", org) });
            SAPTableQuery.Add(new Read_Sap_Table.RFC_DB_OPT() { Text = " AND AUGBL EQ '' " });

            ReadSAPTable.Connection = new SAP.Connector.SAPConnection(System.Configuration.ConfigurationManager.AppSettings["SAP_PRD"]);
            ReadSAPTable.Connection.Open();
            ReadSAPTable.Rfc_Read_Table(";", "", "BSEG", 1000, 0, ref SAPTableData, ref SAPTableFields, ref SAPTableQuery);
            ReadSAPTable.Connection.Close();
            var InvoiceList = new List<string>();
            //gv1.DataSource = SAPTableData.ToADODataTable(); gv1.DataBind();
            var InvoiceInClause = new List<Tuple<string, string>>();
            foreach (Read_Sap_Table.TAB512 SAPTableRec in SAPTableData)
            {
                 // InvoiceList.Add("'" + SAPTableRec.Wa + "'");
                var SapTableRecFields = SAPTableRec.Wa.Split(new string[] { ";" }, StringSplitOptions.None);
                InvoiceInClause.Add(new Tuple<string, string>(SapTableRecFields[0], SapTableRecFields[1]));
                //dlCredRepGrp.Items.Add(new ListItem(SapTableRecFields[1] + " (" + SapTableRecFields[0] + ")", SapTableRecFields[0]));
            }
            
            //var InvoiceInClause = "(" + string.Join(",", InvoiceList.ToArray()) + ")";
            //Response.Write(InvoiceInClause);
            return InvoiceInClause;
        }

        public static String GetAJPOrderItemCategory(String _ORDERID)
        {
            String result = String.Empty;
            List<ORDER_DETAIL> list = MyAdvantechDAL.GetOrderDetail(_ORDERID);
            if (list.Where(d => d.PART_NO.Equals("AGS-CTOS-SYS-A", StringComparison.OrdinalIgnoreCase)).Any())
                result = "ZTM5";
            else if (list.Where(d => d.PART_NO.Equals("AGS-CTOS-SYS-B", StringComparison.OrdinalIgnoreCase)).Any())
                result = "ZTM6";
            else if (list.Where(d => d.PART_NO.Equals("OPTION 100 IQC", StringComparison.OrdinalIgnoreCase)).Any())
                result = "ZTM5";
            else
                result = "";

            return result;
        }

        public static String GetAJPAddressString(String _COMPANYID = "", String _COMPANYNAME = "")
        {
            //AJP will need to select some non-Z001 companyID, no need to join KNVP table.
            String result = String.Empty;

            result = " SELECT distinct B.KUNNR AS company_id, B.NAME1 AS COMPANY_NAME, " +
                    " D.street || ' ' || D.city1 || ' ' || D.region || ' ' || D.post_code1 || ' ' || (select e.landx from saprdp.t005t e where e.land1 = B.land1 and e.spras = 'E' and rownum = 1) AS Address, " +
                    " B.Land1 AS COUNTRY, B.Ort01 AS CITY, B.STRAS as STREET, " +
                    " B.PSTLZ AS ZIP_CODE, D.region AS STATE, B.TELF1 AS TEL_NO, B.TELFX AS FAX_NO, D.NAME_CO as Attention, " +
                    " '' as PARTNER_FUNCTION, " +
                    " E.VKBUR as SalesOffice, E.VKGRP As SalesGroup, E.SPART As division, D.STR_SUPPL3 " +
                    " From saprdp.kna1 B " +
                    " Left join saprdp.adr6 C on B.adrnr = C.addrnumber " +
                    " inner join saprdp.adrc D on D.country = B.land1 And D.addrnumber = B.adrnr " +
                    " inner join saprdp.knvv E on B.KUNNR = E.KUNNR " +
                    " where B.loevm <> 'X' ";
            if (!String.IsNullOrEmpty(_COMPANYNAME)) result += String.Format(" and (Upper(B.NAME1) LIKE '%{0}%' or B.NAME2 like '%{0}%') ", _COMPANYNAME.Replace("'", "''").Trim());
            if (!String.IsNullOrEmpty(_COMPANYID)) result += String.Format(" And B.Kunnr Like '%{0}%' ", _COMPANYID.Replace("'", "''").Trim());
            result += "AND B.KTOKD IN ('Z001', 'Z002' ,'Z150') AND E.VKORG = 'JP01' ORDER BY B.KUNNR ";

            return result;
        }

        public static Boolean CopySAPOrder2Cart(String _SONo, String _CartID, String _ERPID, String _ORGID, String _Currency, ref String _ErrMsg, Decimal _Tax = 0)
        {
            try
            {
                // Remove all items from current cart.
                CartDetailHelper.RemoveCartDetailByID(_CartID);

                DataTable SAPDetail = DataAccess.SAPDAL.GetSAPOrderDetailBySONo(_SONo);
                if (SAPDetail != null && SAPDetail.Rows.Count > 0)
                {
                    // Remove Phased out items
                    foreach (DataRow d in SAPDetail.Rows)
                    {
                        var o = SqlProvider.dbExecuteScalar("MY", String.Format("select top 1 part_no from SAP_PRODUCT_STATUS_ORDERABLE where PART_NO = '{0}' and SALES_ORG = '{1}' ", DataAccess.SAPDAL.RemovePrecedingZeros(d["PARTNO"].ToString()), _ORGID));
                        if (o == null || String.IsNullOrEmpty(o.ToString()))
                        {
                            d.Delete();
                        }
                        else
                        {
                            if (d["PARTNO"].ToString().StartsWith("AGS-EW"))
                                d.Delete();
                        }
                    }
                    SAPDetail.AcceptChanges();
                    if (SAPDetail.Rows.Count == 0)
                    {
                        _ErrMsg = "No items can be copied from this order.";
                        return false;
                    }


                    // Processing loose items' line no
                    if (SAPDetail.AsEnumerable().Where(p => p["HIGHERLEVEL"].ToString().Equals("0") && !p["PARTNO"].ToString().ToUpper().EndsWith("BTO")).Any())
                    {
                        int i = 1;
                        foreach (DataRow d in SAPDetail.Rows)
                        {
                            if (d["HIGHERLEVEL"].ToString().Equals("0") && !d["PARTNO"].ToString().ToUpper().EndsWith("BTO"))
                            {
                                d["LINENO"] = i;
                                i++;
                            }
                        }

                        SAPDetail.AcceptChanges();
                    }

                    // Processing system items' line no
                    if (SAPDetail.AsEnumerable().Where(p => p["HIGHERLEVEL"].ToString().Equals("0") && p["PARTNO"].ToString().ToUpper().EndsWith("BTO")).Any())
                    {
                        int i = 100;
                        List<DataRow> BTOSParents = SAPDetail.AsEnumerable().Where(p => p["HIGHERLEVEL"].ToString().Equals("0") && p["PARTNO"].ToString().ToUpper().EndsWith("BTO")).ToList();
                        foreach (DataRow BTOSParent in BTOSParents)
                        {
                            List<DataRow> BTOSChilds = SAPDetail.AsEnumerable().Where(p => p["HIGHERLEVEL"].ToString().Equals(BTOSParent["LINENO"].ToString())).ToList();

                            int j = i + 1;
                            foreach (DataRow BTOSChild in BTOSChilds)
                            {
                                BTOSChild["HIGHERLEVEL"] = i;
                                BTOSChild["LINENO"] = j;
                                j++;
                            }

                            BTOSParent["LINENO"] = i;
                            i += 100;
                        }
                        SAPDetail.AcceptChanges();
                    }

                    // Check if current currency needs extra mark up. Defined in TCURX table.
                    var objCurrencyMarkUp = OracleProvider.ExecuteScalar("SAP_PRD", String.Format("SELECT CURRDEC FROM SAPRDP.TCURX WHERE CURRKEY = '{0}'", SAPDetail.Rows[0]["WAERK"].ToString()));
                    int CurrencyMarkUp = 0;
                    if (objCurrencyMarkUp != null && int.TryParse(objCurrencyMarkUp.ToString(), out CurrencyMarkUp))
                    {
                        CurrencyMarkUp = (int)(100 * Math.Pow(10, CurrencyMarkUp));
                        foreach (DataRow d in SAPDetail.Rows)
                        {
                            d["AMOUNT"] = Convert.ToDecimal(d["AMOUNT"].ToString()) * CurrencyMarkUp;
                            d["UNITPRICE"] = Convert.ToDecimal(d["UNITPRICE"].ToString()) * CurrencyMarkUp;
                        }
                        SAPDetail.AcceptChanges();
                    }

                    List<cart_DETAIL_V2> CartItems = new List<cart_DETAIL_V2>();
                    foreach (DataRow d in SAPDetail.Rows)
                    {
                        cart_DETAIL_V2 c = new cart_DETAIL_V2();
                        c.Cart_Id = _CartID;
                        c.Line_No = Convert.ToInt32(d["LINENO"].ToString());
                        c.Part_No = DataAccess.SAPDAL.RemovePrecedingZeros(d["PARTNO"].ToString());
                        c.Description = d["ARKTX"].ToString();
                        c.Qty = Convert.ToInt32(d["QTY"].ToString());
                        c.List_Price = 0;
                        c.Unit_Price = Convert.ToDecimal(d["UNITPRICE"].ToString());
                        c.oUnit_Price = 0;
                        c.Itp = 0;
                        c.RecyclingFee = 0;
                        c.Delivery_Plant = d["WERKS"].ToString();
                        c.Category = "Copy from SAP";
                        c.rohs = 0;
                        c.Ew_Flag = 0;
                        c.req_date = DateTime.Now;
                        c.due_date = DateTime.Now;
                        c.SatisfyFlag = 0;
                        c.CanbeConfirmed = 0;
                        c.higherLevel = Convert.ToInt32(d["HigherLevel"].ToString());
                        //ICC 20170922 中科專案在copy訂單時，也要將customer material pn複製到cart
                        if (!d.IsNull("KDMAT") && d["KDMAT"].ToString().ToUpper().StartsWith("CM-"))
                            c.CustMaterial = d["KDMAT"].ToString();
                        else
                            c.CustMaterial = "";

                        if (c.Line_No % 100 == 0 && c.Part_No.ToUpper().Contains("-BTO"))
                            c.otype = (int)LineItemType.BTOSParent;
                        else if (c.Line_No > 100 && c.higherLevel != 0)
                            c.otype = (int)LineItemType.BTOSChild;
                        else
                            c.otype = (int)LineItemType.LooseItem;

                        CartItems.Add(c);
                    }

                    // Order simulation for getting latest price info (currently only overwrite listprice)
                    Order order = CartDetailHelper.CartDetail2Order(CartItems, _ERPID, _ORGID, _Currency);
                    String errMsg = String.Empty;
                    order.Tax = _Tax;
                    Advantech.Myadvantech.DataAccess.SAPDAL.SimulateOrder(ref order, ref errMsg);
                    foreach (Product _part in order.LineItems)
                    {
                        CartItems.Where(d => d.Part_No.Equals(_part.PartNumber) && d.Line_No == _part.LineNumber).ToList().ForEach(c => { c.List_Price = _part.ListPrice; });
                    }

                    // Get ITP from ADVAJP order simulation for AJP
                    if (_ORGID.ToUpper().Equals("JP01"))
                    {
                        order = CartDetailHelper.CartDetail2Order(CartItems, "ADVAJP", "TW01", "JPY");
                        Advantech.Myadvantech.DataAccess.SAPDAL.SimulateOrder(ref order, ref errMsg);
                        foreach (Product _part in order.LineItems)
                        {
                            CartItems.Where(d => d.Part_No.Equals(_part.PartNumber) && d.Line_No == _part.LineNumber).ToList().ForEach(c => { c.Itp = _part.UnitPrice * (Decimal)1.03; });
                        }
                    }
                    else if (_ORGID.ToUpper().StartsWith("CN"))
                    {
                        CartItems.ForEach(d => d.Unit_Price = d.Unit_Price * (1 + _Tax));
                    }

                    MyAdvantechContext.Current.cart_DETAIL_V2.AddRange(CartItems);
                    MyAdvantechContext.Current.SaveChanges();

                    return true;
                }
            }
            catch (Exception e)
            {
                _ErrMsg = e.ToString();
                return false;
            }
            return false;
        }

        public static Tuple<bool, string> BBeStoreData2MyAdvantechTable(String _OrderNo, String _ERPID, Boolean _isTesting)
        {
            try
            {
                //String ERPID = String.Empty;
                Advantech.Myadvantech.DataAccess.Entities.Order eStoreOrder = BBeStoreDAL.GetBBeStoreOrderByOrderNo(_OrderNo);

                // No ERPID
                if (eStoreOrder == null || String.IsNullOrEmpty(_ERPID))
                    return new Tuple<bool,string>(false, "No ERP ID.");

                //Delete data
                SqlProvider.dbExecuteNoQuery("MY", string.Format("delete from ORDER_MASTER where ORDER_NO='{0}'; delete from ORDER_DETAIL where ORDER_ID='{0}'; delete from ORDER_PARTNERS where ORDER_ID='{0}'; delete from OrderForwarderService where OrderId='{0}'; delete from order_Master_ExtensionV2 where order_id='{0}'; delete from FREIGHT where order_id='{0}'; delete from BB_CREDITCARD_ORDER where ORDER_NO = '{0}';", _OrderNo));

                // Order Master
                Advantech.Myadvantech.DataAccess.ORDER_MASTER OrderMaster = new Advantech.Myadvantech.DataAccess.ORDER_MASTER();
                OrderMaster.ORDER_ID = eStoreOrder.OrderNo;
                OrderMaster.ORDER_NO = eStoreOrder.OrderNo;
                OrderMaster.ORDER_TYPE = "ZOR2";
                OrderMaster.PO_NO = String.IsNullOrEmpty(eStoreOrder.PurchaseNO) ? "" : eStoreOrder.PurchaseNO;
                OrderMaster.PO_DATE = DateTime.Now;
                OrderMaster.SOLDTO_ID = _ERPID;
                OrderMaster.SHIPTO_ID = _ERPID;
                OrderMaster.BILLTO_ID = _ERPID;
                OrderMaster.ORDER_DATE = eStoreOrder.OrderDate;
                OrderMaster.PARTIAL_FLAG = eStoreOrder.PartialFlag.Equals("N") ? "0" : "1";
                OrderMaster.DUE_DATE = eStoreOrder.DueDate;
                OrderMaster.REQUIRED_DATE = eStoreOrder.RequiredDate;
                OrderMaster.CREATED_BY = eStoreOrder.UserID;
                OrderMaster.ORDER_STATUS = "FINISH";
                OrderMaster.CURRENCY = eStoreOrder.Cart.Currency;
                OrderMaster.LAST_UPDATED = eStoreOrder.LastUpdated;
                OrderMaster.CREATED_DATE = eStoreOrder.ConfirmedDate;
                OrderMaster.INCOTERM_TEXT = String.IsNullOrEmpty(eStoreOrder.CourierAccount) ? "" : eStoreOrder.CourierAccount;
                OrderMaster.IS_EARLYSHIP = Convert.ToInt32(eStoreOrder.EarlyShipFlag);

                // Set order as tax exempt if has reseller ID on eStore
                int isExempt = 1;
                if (!String.IsNullOrEmpty(eStoreOrder.ResellerID))
                    isExempt = 0;
                OrderMaster.isExempt = isExempt; 

                OrderMaster.TOTAL_AMOUNT = (eStoreOrder.Cart != null && eStoreOrder.Cart.TotalAmount != 0) ? eStoreOrder.Cart.TotalAmount : 0;
                OrderMaster.DISTRICT = String.Empty;
                OrderMaster.SALES_NOTE = string.IsNullOrEmpty(eStoreOrder.CustomerComment) ? string.Empty : eStoreOrder.CustomerComment.Trim();
                OrderMaster.ORDER_NOTE = String.Empty;
                OrderMaster.prj_Note = String.Empty;
                OrderMaster.OP_NOTE = String.Empty;
                OrderMaster.BILLINGINSTRUCTION_INFO = String.Empty;
                OrderMaster.ER_EMPLOYEE = String.Empty;
                OrderMaster.END_CUST = String.Empty;
                OrderMaster.FREIGHT = 0;

                Advantech.Myadvantech.DataAccess.SAP_DIMCOMPANY sd = Advantech.Myadvantech.DataAccess.MyAdvantechDAL.GetSAPDIMCompanyByERPID(_ERPID).FirstOrDefault();
                if (sd != null)
                {                  
                    OrderMaster.INCOTERM = sd.INCO1;

                    // First set ship condtion from its SAP company setting first.
                    OrderMaster.SHIP_CONDITION = (sd.SHIPCONDITION == null) ? String.Empty : sd.SHIPCONDITION;
                    // Second check if its eStore freight name can be mapped to a SAP shipping condition or not.
                    Advantech.Myadvantech.DataAccess.FreightOption FOption = Advantech.Myadvantech.DataAccess.MyAdvantechDAL.GetAllFreightOptions().Where(d => !String.IsNullOrEmpty(d.EStoreServiceName) && d.EStoreServiceName.Equals(eStoreOrder.ShippingMethod)).FirstOrDefault();
                    if (FOption != null && !String.IsNullOrEmpty(FOption.SAPShippingCondition))
                    {
                        OrderMaster.SHIP_CONDITION = FOption.SAPShippingCondition;
                    }
                }

                Advantech.Myadvantech.DataAccess.Entities.Payment Payment = BBeStoreDAL.GetBBeStorePaymentByOrderNo(eStoreOrder.PaymentID);
                if (Payment != null && Payment.PaymentType.Equals("AthorizeNet", StringComparison.OrdinalIgnoreCase))
                {
                    OrderMaster.PAYTERM = "CODC"; // credit card
                    OrderMaster.CREDIT_CARD = "************" + Payment.LastFourDigit.ToString();
                    int month = int.Parse(Payment.CardExpiredDate.Substring(0, 2));
                    int year = 2000 + int.Parse(Payment.CardExpiredDate.Substring(2, 2));
                    OrderMaster.CREDIT_CARD_EXPIRE_DATE = new DateTime(year, month, 1);
                    OrderMaster.CREDIT_CARD_VERIFY_NUMBER = "N/A";
                    OrderMaster.CREDIT_CARD_HOLDER = Payment.CardHolderName;
                    if (!string.IsNullOrEmpty(Payment.CardType) && Payment.CardType.Equals("American Express", StringComparison.OrdinalIgnoreCase))
                        Payment.CardType = "AMEX";
                    if(!string.IsNullOrEmpty(Payment.CardType) && Payment.CardType.Equals("MasterCard", StringComparison.OrdinalIgnoreCase))
                        Payment.CardType = "MC";
                    if (!string.IsNullOrEmpty(Payment.CardType) && Payment.CardType.Equals("Discover", StringComparison.OrdinalIgnoreCase))
                        Payment.CardType = "DISC";
                    OrderMaster.CREDIT_CARD_TYPE = Payment.CardType;

                    OrderMaster.BILLINGINSTRUCTION_INFO = Payment.CCPNREF;
                }
                else
                {
                    OrderMaster.PAYTERM = "PPD"; // wire transfer
                }

                // Order Detail
                List<Advantech.Myadvantech.DataAccess.ORDER_DETAIL> OrderDetails = new List<Advantech.Myadvantech.DataAccess.ORDER_DETAIL>();
                if (eStoreOrder.Cart.CartItem != null && eStoreOrder.Cart.CartItem.Count > 0)
                {
                    foreach (Advantech.Myadvantech.DataAccess.Entities.CartItem cartitem in eStoreOrder.Cart.CartItem)
                    {
                        Advantech.Myadvantech.DataAccess.ORDER_DETAIL OrderDetail = new Advantech.Myadvantech.DataAccess.ORDER_DETAIL();

                        OrderDetail.ORDER_ID = OrderMaster.ORDER_ID;
                        OrderDetail.LINE_NO = cartitem.ItemNo;
                        OrderDetail.PRODUCT_LINE = "";
                        OrderDetail.ORDER_LINE_TYPE = "0"; // to be confirmed, set as loose item first  //ICC Yes, only set 0 in this field
                        OrderDetail.PART_NO = cartitem.SProductID;
                        OrderDetail.QTY = cartitem.Qty;
                        OrderDetail.LIST_PRICE = cartitem.UnitPrice;
                        OrderDetail.UNIT_PRICE = cartitem.UnitPrice;
                        OrderDetail.REQUIRED_DATE = cartitem.RequiredDate;
                        OrderDetail.DUE_DATE = cartitem.DueDate;
                        OrderDetail.LINE_PARTIAL_FLAG = 0;
                        OrderDetail.RoHS_FLAG = "0";
                        OrderDetail.EXWARRANTY_FLAG = "0";
                        OrderDetail.NoATPFlag = "0";
                        OrderDetail.DeliveryPlant = string.Empty; //String.IsNullOrEmpty(cartitem.DeliveryPlant) ? "UBH1" : cartitem.DeliveryPlant; ICC 2017/12/25 先不帶值進SAP
                        OrderDetail.Description = cartitem.Description;
                        OrderDetail.HigherLevel = 0;
                        OrderDetail.itp = 0;
                        OrderDetail.CustMaterialNo = String.Empty;
                        OrderDetail.DMF_Flag = String.Empty;
                        OrderDetail.Cate = String.Empty;

                        OrderDetails.Add(OrderDetail);
                    }
                }


                // Order Partners
                List<Advantech.Myadvantech.DataAccess.ORDER_PARTNERS> OrderPartners = new List<Advantech.Myadvantech.DataAccess.ORDER_PARTNERS>();
                if (eStoreOrder.Cart.SoldToContact != null)
                {
                    // Sold-to Partner
                    Advantech.Myadvantech.DataAccess.ORDER_PARTNERS SoldtoParnter = new Advantech.Myadvantech.DataAccess.ORDER_PARTNERS();
                    SoldtoParnter.ORDER_ID = OrderMaster.ORDER_ID;
                    SoldtoParnter.ROWID = "";
                    SoldtoParnter.ERPID = _ERPID;
                    SoldtoParnter.NAME = eStoreOrder.Cart.SoldToContact.AttCompanyName;
                    SoldtoParnter.ADDRESS = eStoreOrder.Cart.SoldToContact.UserID;
                    SoldtoParnter.TYPE = "SOLDTO"; // sold-to
                    SoldtoParnter.ATTENTION = eStoreOrder.UserID;
                    SoldtoParnter.TEL = eStoreOrder.Cart.SoldToContact.TelNo;
                    SoldtoParnter.MOBILE = eStoreOrder.Cart.SoldToContact.Mobile;
                    SoldtoParnter.ZIPCODE = eStoreOrder.Cart.SoldToContact.ZipCode;
                    SoldtoParnter.COUNTRY = eStoreOrder.Cart.SoldToContact.CountryCode;

                    //ICC If U.S customer entered more than 5 digits. Only get 5 digits.
                    if (SoldtoParnter.COUNTRY == "US")
                    {
                        if (SoldtoParnter.ZIPCODE.Length > 5)
                            SoldtoParnter.ZIPCODE = SoldtoParnter.ZIPCODE.Substring(0, 5);
                        if (SoldtoParnter.ZIPCODE.Length < 5)
                            SoldtoParnter.ZIPCODE = SoldtoParnter.ZIPCODE.PadLeft(5, '0');
                    }

                    SoldtoParnter.CITY = eStoreOrder.Cart.SoldToContact.City;
                    SoldtoParnter.STREET = eStoreOrder.Cart.SoldToContact.Address1.Length > 50 ? eStoreOrder.Cart.SoldToContact.Address1.Substring(0, 50) : eStoreOrder.Cart.SoldToContact.Address1;
                    SoldtoParnter.STREET2 = eStoreOrder.Cart.SoldToContact.Address2;
                    SoldtoParnter.STATE = eStoreOrder.Cart.SoldToContact.State;
                    SoldtoParnter.TAXJURI = ""; // get from sap by using ERPID
                    OrderPartners.Add(SoldtoParnter);
                }
                if (eStoreOrder.Cart.ShipToContact != null)
                {
                    // Ship-to Partner
                    Advantech.Myadvantech.DataAccess.ORDER_PARTNERS ShiptoParnter = new Advantech.Myadvantech.DataAccess.ORDER_PARTNERS();
                    ShiptoParnter.ORDER_ID = OrderMaster.ORDER_ID;
                    ShiptoParnter.ROWID = "";
                    ShiptoParnter.ERPID = _ERPID;
                    ShiptoParnter.NAME = eStoreOrder.Cart.ShipToContact.AttCompanyName;
                    ShiptoParnter.ADDRESS = eStoreOrder.Cart.ShipToContact.UserID;
                    ShiptoParnter.TYPE = "S"; // ship-to
                    ShiptoParnter.ATTENTION = eStoreOrder.UserID;
                    ShiptoParnter.TEL = eStoreOrder.Cart.ShipToContact.TelNo;
                    ShiptoParnter.MOBILE = eStoreOrder.Cart.ShipToContact.Mobile;
                    ShiptoParnter.ZIPCODE = eStoreOrder.Cart.ShipToContact.ZipCode;
                    ShiptoParnter.COUNTRY = eStoreOrder.Cart.ShipToContact.CountryCode;

                    //ICC If U.S customer entered more than 5 digits. Only get 5 digits.
                    if (ShiptoParnter.COUNTRY == "US")
                    {
                        if (ShiptoParnter.ZIPCODE.Length > 5)
                            ShiptoParnter.ZIPCODE = ShiptoParnter.ZIPCODE.Substring(0, 5);
                        if (ShiptoParnter.ZIPCODE.Length < 5)
                            ShiptoParnter.ZIPCODE = ShiptoParnter.ZIPCODE.PadLeft(5, '0');
                    }

                    ShiptoParnter.CITY = eStoreOrder.Cart.ShipToContact.City;
                    ShiptoParnter.STREET = eStoreOrder.Cart.ShipToContact.Address1.Length > 50 ? eStoreOrder.Cart.ShipToContact.Address1.Substring(0, 50) : eStoreOrder.Cart.ShipToContact.Address1;
                    ShiptoParnter.STREET2 = eStoreOrder.Cart.ShipToContact.Address2;
                    ShiptoParnter.STATE = eStoreOrder.Cart.ShipToContact.State;
                    ShiptoParnter.TAXJURI = eStoreOrder.Cart.ShipToContact.State + ShiptoParnter.ZIPCODE;
                    OrderPartners.Add(ShiptoParnter);
                }
                if (eStoreOrder.Cart.BillToContact != null)
                {
                    // Bill-to Partner
                    Advantech.Myadvantech.DataAccess.ORDER_PARTNERS BilltoParnter = new Advantech.Myadvantech.DataAccess.ORDER_PARTNERS();
                    BilltoParnter.ORDER_ID = OrderMaster.ORDER_ID;
                    BilltoParnter.ROWID = "";
                    BilltoParnter.ERPID = _ERPID;
                    BilltoParnter.NAME = eStoreOrder.Cart.BillToContact.AttCompanyName;
                    BilltoParnter.ADDRESS = eStoreOrder.Cart.BillToContact.UserID;
                    BilltoParnter.TYPE = "B"; // bill-to
                    BilltoParnter.ATTENTION = eStoreOrder.UserID;
                    BilltoParnter.TEL = eStoreOrder.Cart.BillToContact.TelNo;
                    BilltoParnter.MOBILE = eStoreOrder.Cart.BillToContact.Mobile;
                    BilltoParnter.ZIPCODE = eStoreOrder.Cart.BillToContact.ZipCode;
                    BilltoParnter.COUNTRY = eStoreOrder.Cart.BillToContact.CountryCode;

                    //ICC If U.S customer entered more than 5 digits. Only get 5 digits.
                    if (BilltoParnter.COUNTRY == "US")
                    {
                        if (BilltoParnter.ZIPCODE.Length > 5)
                            BilltoParnter.ZIPCODE = BilltoParnter.ZIPCODE.Substring(0, 5);
                        if (BilltoParnter.ZIPCODE.Length < 5)
                            BilltoParnter.ZIPCODE = BilltoParnter.ZIPCODE.PadLeft(5, '0');
                    }

                    BilltoParnter.CITY = eStoreOrder.Cart.BillToContact.City;
                    BilltoParnter.STREET = eStoreOrder.Cart.BillToContact.Address1.Length > 50 ? eStoreOrder.Cart.BillToContact.Address1.Substring(0, 50) : eStoreOrder.Cart.BillToContact.Address1;
                    BilltoParnter.STREET2 = eStoreOrder.Cart.BillToContact.Address2;
                    BilltoParnter.STATE = eStoreOrder.Cart.BillToContact.State;
                    BilltoParnter.TAXJURI = ""; // get from sap by using ERPID
                    OrderPartners.Add(BilltoParnter);
                }
                if (!String.IsNullOrEmpty(eStoreOrder.CourierAccount) && eStoreOrder.Cart.ShipToContact != null)
                {
                    // Freight Charge By
                    Advantech.Myadvantech.DataAccess.ORDER_PARTNERS FreightChargeBy = new Advantech.Myadvantech.DataAccess.ORDER_PARTNERS();
                    FreightChargeBy.ORDER_ID = OrderMaster.ORDER_ID;
                    FreightChargeBy.ROWID = "";
                    FreightChargeBy.ERPID = _ERPID;
                    FreightChargeBy.NAME = eStoreOrder.Cart.ShipToContact.AttCompanyName;
                    FreightChargeBy.ADDRESS = eStoreOrder.Cart.ShipToContact.UserID;
                    FreightChargeBy.TYPE = "ZP"; // freight charge by
                    FreightChargeBy.ATTENTION = ""; // to be confirmed
                    FreightChargeBy.TEL = eStoreOrder.Cart.ShipToContact.TelNo;
                    FreightChargeBy.MOBILE = eStoreOrder.Cart.ShipToContact.Mobile;
                    FreightChargeBy.ZIPCODE = eStoreOrder.Cart.ShipToContact.ZipCode;
                    FreightChargeBy.COUNTRY = eStoreOrder.Cart.ShipToContact.CountryCode;
                    FreightChargeBy.CITY = eStoreOrder.Cart.ShipToContact.City;
                    FreightChargeBy.STREET = eStoreOrder.Cart.ShipToContact.Address1.Length > 50 ? eStoreOrder.Cart.ShipToContact.Address1.Substring(0, 50) : eStoreOrder.Cart.ShipToContact.Address1;
                    FreightChargeBy.STREET2 = eStoreOrder.Cart.ShipToContact.Address2;
                    FreightChargeBy.STATE = eStoreOrder.Cart.ShipToContact.State;
                    FreightChargeBy.TAXJURI = ""; // get from sap by using ERPID
                    OrderPartners.Add(FreightChargeBy);
                }
                if (!String.IsNullOrEmpty(eStoreOrder.UserID))
                {
                    // Contact Person (Type = AP in SAP partner function)

                    // 1. Check email registered in SAP or not, if not, needs to create SAP contact
                    String ContactSAPID = String.Empty;
                    ContactSAPID = DataAccess.SAPDAL.GetSAPContactRowID(_ERPID, eStoreOrder.UserID, _isTesting);

                    // 2. Create New Contact if SAPID is still nothing
                    if (String.IsNullOrEmpty(ContactSAPID))
                    {
                        DataAccess.SAPDAL.CreateSAPContact(_isTesting, _ERPID, eStoreOrder.Cart.SoldToContact.FirstName, eStoreOrder.Cart.SoldToContact.LastName, eStoreOrder.UserID, string.Empty, string.Empty, "0005", "12");

                        System.Threading.Thread.Sleep(3000);
                        ContactSAPID = DataAccess.SAPDAL.GetSAPContactRowID(_ERPID, eStoreOrder.UserID, _isTesting);
                    }

                    // 3. Set AP to Order Partner
                    if (!String.IsNullOrEmpty(ContactSAPID))
                    {
                        Advantech.Myadvantech.DataAccess.ORDER_PARTNERS APContactPerson = new Advantech.Myadvantech.DataAccess.ORDER_PARTNERS();
                        APContactPerson.ORDER_ID = OrderMaster.ORDER_ID;
                        APContactPerson.ROWID = "";
                        APContactPerson.ERPID = ContactSAPID; // Will be contact person id defined in SAP KNVK table PARNR field.
                        APContactPerson.NAME = "";
                        //ICC 2018/7/31 Make up AP contact person data for SAP.
                        object companyName = SqlProvider.dbExecuteScalar("MY", string.Format("SELECT TOP 1 ISNULL(COMPANY_NAME, '') FROM SAP_DIMCOMPANY WHERE COMPANY_ID = '{0}' AND ORG_ID = 'US10' AND COMPANY_TYPE IN ('partner','Z001')", _ERPID));
                        if (companyName != null && !string.IsNullOrEmpty(companyName.ToString()))
                            APContactPerson.NAME = companyName.ToString();
                        APContactPerson.ADDRESS = eStoreOrder.UserID; //ICC 2018/7/31 Set customer email as AP's address
                        APContactPerson.TYPE = "AP"; // contact person
                        APContactPerson.ATTENTION = "";
                        APContactPerson.TEL = "";
                        APContactPerson.MOBILE = "";
                        APContactPerson.ZIPCODE = "";
                        APContactPerson.COUNTRY = "";
                        APContactPerson.CITY = "";
                        APContactPerson.STREET = "";
                        APContactPerson.STREET2 = "";
                        APContactPerson.STATE = "";
                        APContactPerson.TAXJURI = "";
                        OrderPartners.Add(APContactPerson);
                    }
                }
                if (Payment != null && Payment.PaymentType.Equals("AthorizeNet", StringComparison.OrdinalIgnoreCase))
                {
                    // Credit card info
                    Advantech.Myadvantech.DataAccess.ORDER_PARTNERS CreditCardData = new Advantech.Myadvantech.DataAccess.ORDER_PARTNERS();
                    CreditCardData.ORDER_ID = OrderMaster.ORDER_ID;
                    CreditCardData.ROWID = Payment.CCPNREF + "|" + Payment.CCAuthCode;
                    CreditCardData.TYPE = "B_CC";
                    CreditCardData.ERPID = _ERPID;
                    CreditCardData.NAME = "";
                    CreditCardData.ADDRESS = "";
                    CreditCardData.ATTENTION = "";
                    CreditCardData.TEL = "";
                    CreditCardData.MOBILE = "";
                    CreditCardData.ZIPCODE = "";
                    CreditCardData.COUNTRY = "";
                    CreditCardData.CITY = "";
                    CreditCardData.STREET = "";
                    CreditCardData.STREET2 = "";
                    CreditCardData.STATE = "";
                    CreditCardData.TAXJURI = "";

                    if (eStoreOrder.Cart.BillToContact != null)
                    {

                        CreditCardData.NAME = eStoreOrder.Cart.BillToContact.AttCompanyName; ;
                        CreditCardData.ATTENTION = eStoreOrder.UserID;
                        CreditCardData.ZIPCODE = eStoreOrder.Cart.BillToContact.ZipCode;
                        CreditCardData.COUNTRY = eStoreOrder.Cart.BillToContact.CountryCode;

                        if (CreditCardData.COUNTRY == "US")
                        {
                            if (CreditCardData.ZIPCODE.Length > 5)
                                CreditCardData.ZIPCODE = CreditCardData.ZIPCODE.Substring(0, 5);
                            if (CreditCardData.ZIPCODE.Length < 5)
                                CreditCardData.ZIPCODE = CreditCardData.ZIPCODE.PadLeft(5, '0');
                        }

                        CreditCardData.CITY = eStoreOrder.Cart.BillToContact.City;
                        CreditCardData.STREET = eStoreOrder.Cart.BillToContact.Address1.Length > 50 ? eStoreOrder.Cart.BillToContact.Address1.Substring(0, 50) : eStoreOrder.Cart.BillToContact.Address1; ;
                        CreditCardData.STREET2 = eStoreOrder.Cart.BillToContact.Address2;
                        CreditCardData.STATE = eStoreOrder.Cart.BillToContact.State;
                    }


                    OrderPartners.Add(CreditCardData);

                    //Add reocrd to bb_credtiCard_order table too
                    try
                    {
                        var ccOrder = new Advantech.Myadvantech.DataAccess.BB_CREDITCARD_ORDER();
                        ccOrder.ORDER_NO = OrderMaster.ORDER_ID;
                        ccOrder.CARD_NO = OrderMaster.CREDIT_CARD;
                        ccOrder.CARD_TYPE = OrderMaster.CREDIT_CARD_TYPE;
                        ccOrder.TRANSACTION_TYPE = Payment.TranxType;
                        ccOrder.STATUS = "Success";
                        ccOrder.TRANSACTION_ID = Payment.CCPNREF;
                        ccOrder.AUTH_CODE = Payment.CCAuthCode;
                        ccOrder.TOTAL_AUTH_AMOUNT = eStoreOrder.TotalAmount.HasValue == true ? eStoreOrder.TotalAmount.Value : 0;
                        ccOrder.CREATED_DATE = Payment.CreatedDate;
                        ccOrder.CREATED_By = eStoreOrder.UserID;
                        if(Payment.CCRESPMSG !=null)
                            ccOrder.MESSAGE = Payment.CCRESPMSG;
                        Advantech.Myadvantech.Business.OrderBusinessLogic.CreateBBCreditCardOrderRecord(ccOrder);

                        //Alex: 20170425 create paymnet profile for custoemr in authorize.net CIM
                        string customerProfileId = Advantech.Myadvantech.Business.AuthorizeNetSolution.GetOrCreateCustomerProfileId(_ERPID, "US10", _isTesting);
                        if (!string.IsNullOrEmpty(customerProfileId))
                            Advantech.Myadvantech.Business.AuthorizeNetSolution.CreatePaymentProfileForCustomerFromTransaction(Payment.CCPNREF, customerProfileId, _isTesting);

                    }
                    catch
                    {

                    }
                }

                //Freight
                //ICC TO DO: eStore has freight discount, so we need to calculate real freight in the future
                decimal freight = 0;
                if (eStoreOrder.Freight.HasValue == true && decimal.TryParse(eStoreOrder.Freight.ToString(), out freight) == true && freight > 0)
                    SqlProvider.dbExecuteNoQuery("MY", string.Format("INSERT INTO FREIGHT VALUES ('{0}', 'ZHD0', {1})", eStoreOrder.OrderNo, freight));


                // Order Forwarder Service
                Advantech.Myadvantech.DataAccess.OrderForwarderService OrderForwarderService = new Advantech.Myadvantech.DataAccess.OrderForwarderService();
                OrderForwarderService.OrderId = OrderMaster.ORDER_ID;
                Advantech.Myadvantech.DataAccess.FreightOption FO = Advantech.Myadvantech.DataAccess.MyAdvantechDAL.GetAllFreightOptions().Where(d => !String.IsNullOrEmpty(d.EStoreServiceName) && d.EStoreServiceName.Equals(eStoreOrder.ShippingMethod)).FirstOrDefault();
                OrderForwarderService.FreightOption = (FO == null) ? "" : FO.CarrierCode + ": " + FO.Description;
                if (String.IsNullOrEmpty(eStoreOrder.CourierAccount))
                    OrderForwarderService.FreightChargeBy = "SHIPPER";
                else
                {
                    OrderForwarderService.FreightChargeBy = "RECEIVER";
                    OrderMaster.INCOTERM_TEXT = eStoreOrder.CourierAccount;
                }
                OrderForwarderService.CustomChargeBy = "RECEIVER";

                Advantech.Myadvantech.DataAccess.order_Master_ExtensionV2 OrderExtension = new order_Master_ExtensionV2();
                OrderExtension.ORDER_ID = OrderMaster.ORDER_ID;
                OrderExtension.PI2CUSTOMER_FLAG = 1;
                OrderExtension.OrderNoScheme = 0;
                OrderExtension.OrderTaxRate = (Decimal)(eStoreOrder.TaxRate / 100);

                Advantech.Myadvantech.DataAccess.MyAdvantechContext.Current.ORDER_MASTER.Add(OrderMaster);
                Advantech.Myadvantech.DataAccess.MyAdvantechContext.Current.ORDER_DETAIL.AddRange(OrderDetails);
                Advantech.Myadvantech.DataAccess.MyAdvantechContext.Current.ORDER_PARTNERS.AddRange(OrderPartners);
                Advantech.Myadvantech.DataAccess.MyAdvantechContext.Current.OrderForwarderServices.Add(OrderForwarderService);
                Advantech.Myadvantech.DataAccess.MyAdvantechContext.Current.order_Master_ExtensionV2.Add(OrderExtension);
                Advantech.Myadvantech.DataAccess.MyAdvantechContext.Current.SaveChanges();
            }
            catch (Exception e)
            {
                return new Tuple<bool,string>(false, e.StackTrace);
            }

            return new Tuple<bool, string>(true, string.Empty);
        }

        /// <summary>
        /// return order list from BB eStore
        /// </summary>
        /// <param name="Email">Order placer</param>
        /// <returns></returns>
        public static List<Advantech.Myadvantech.DataAccess.Entities.Order> GetBBeStoreOrder(String Email)
        {
            List<Advantech.Myadvantech.DataAccess.Entities.Order> _orders = BBeStoreDAL.GetBBeStoreOrderByEmail(Email);

            return _orders;
        }

        /// <summary>
        /// return BB order by order number
        /// </summary>
        /// <param name="OrderNo">Order Number</param>
        /// <returns></returns>
        public static Advantech.Myadvantech.DataAccess.Entities.Order GetBBeStoreOrderByOrderNo(String OrderNo)
        {
            return BBeStoreDAL.GetBBeStoreOrderByOrderNo(OrderNo);
        }

        public static Tuple<bool, string> CreateBBorderRecord(string orderNo, string ERPID, BBeStoreOrderStatus status)
        {
            BB_ESTORE_ORDER bb = new BB_ESTORE_ORDER();
            bb.ORDER_NO = orderNo;
            bb.ERPID = ERPID;
            bb.ORDER_STATUS = status.ToString();
            bb.PROCESS_LOG = string.Empty;
            bb.CREATED_DATE = DateTime.Now;
            bb.UPDATED_DATE = DateTime.Now;
            return MyAdvantechDAL.CreateBBorderRecord(bb);
        }

        public static void UpdateBBorderRecord(string orderNo, BBeStoreOrderStatus status, string message)
        {
            var order = MyAdvantechContext.Current.BB_ESTORE_ORDER.Where(p => p.ORDER_NO == orderNo).FirstOrDefault();
            if (order != null)
            {
                order.ORDER_STATUS = status.ToString();
                order.PROCESS_LOG = message;
                order.UPDATED_DATE = DateTime.Now;
                MyAdvantechContext.Current.SaveChanges();
            }
        }

        public static BB_ESTORE_ORDER GetBBorderRecord(string orderNo)
        {
            return MyAdvantechDAL.GetBBorderRecord(orderNo);
        }

        public static List<BB_ESTORE_ORDER> GetBBordersByStatus(BBeStoreOrderStatus status)
        {
            List<string> list = new List<string>() { status.ToString() };
            return MyAdvantechDAL.GetBBorderWithStatus(list);
        }

        public static List<Myadvantech.DataAccess.Entities.Order> GetBBordersList(string email = "", string orderNo = "", string orderStatus = "")
        {
            List<Myadvantech.DataAccess.Entities.Order> result = new List<DataAccess.Entities.Order>();
            List<string> status;

            if (string.IsNullOrEmpty(orderStatus))
                status = new List<string>() { BBeStoreOrderStatus.NeedERPID.ToString(), BBeStoreOrderStatus.ReadyToSAP.ToString(), BBeStoreOrderStatus.FailedToSAP.ToString(), BBeStoreOrderStatus.ToBeVerifiedShipToAddr.ToString() };
            else
                status = new List<string>() { orderStatus };

            var list = MyAdvantechDAL.GetBBorderWithStatus(status);

            if (list.Count > 0)
            {
                var confirmedstatus = new List<string>() { "Confirmed", "Closed_Converted", "ConfirmdButNeedTaxIDReview", "ConfirmdButNeedFreightReview" };
                var nos = list.Select(p => p.ORDER_NO).ToList();
                var orderlist = BBeStoreContext.Current.Order.Where(p => nos.Contains(p.OrderNo) && confirmedstatus.Contains(p.OrderStatus)).ToList();
                
                if (!string.IsNullOrEmpty(orderNo))
                    orderlist = orderlist.Where(p => p.OrderNo == orderNo).ToList();

                if (!string.IsNullOrEmpty(email))
                    orderlist = orderlist.Where(p => p.UserID.IndexOf(email, StringComparison.InvariantCultureIgnoreCase) > -1).ToList();

                foreach (var order in orderlist)
                {
                    var l = list.Where(p => p.ORDER_NO == order.OrderNo).FirstOrDefault();
                    if (l != null)
                    {
                        var customer = UserRoleBusinessLogic.getBBcustomerByUserID(order.UserID);
                        if (customer != null && !string.IsNullOrEmpty(customer.CustomerID) && customer.CustomerID != l.ERPID)
                        {
                            l.ERPID = customer.CustomerID;
                            if (l.ORDER_STATUS == BBeStoreOrderStatus.NeedERPID.ToString())
                                l.ORDER_STATUS = BBeStoreOrderStatus.ReadyToSAP.ToString();
                            SqlProvider.dbExecuteNoQuery("MY", string.Format("UPDATE BB_ESTORE_ORDER SET ERPID = '{0}', ORDER_STATUS = '{2}' WHERE ID = {1}", customer.CustomerID, l.ID, l.ORDER_STATUS));
                        }
                        else if (customer == null && !string.IsNullOrEmpty(l.ERPID))
                        {
                            l.ERPID = string.Empty;
                            l.ORDER_STATUS = BBeStoreOrderStatus.NeedERPID.ToString();
                        }

                        order.SAPSyncBy = l.ERPID;
                        order.SAPSyncStatus = l.ORDER_STATUS;
                    }
                    result.Add(order);
                }
            }

            return result;
        }

        /// <summary>
        /// Get b+b eStore orders which are not be synced to SAP
        /// </summary>
        public static List<Myadvantech.DataAccess.Entities.Order> GetBBeStoreUnsyncedSAPorders()
        {
            List<Myadvantech.DataAccess.Entities.Order> result = new List<DataAccess.Entities.Order>();
            List<string> status = new List<string>() { BBeStoreOrderStatus.NeedERPID.ToString(), BBeStoreOrderStatus.ReadyToSAP.ToString(), BBeStoreOrderStatus.FailedToSAP.ToString(), BBeStoreOrderStatus.UnProcess.ToString() };
            var list = MyAdvantechDAL.GetBBorderWithStatus(status);

            if (list.Count > 0)
            {
                var nos = list.Select(p => p.ORDER_NO).ToList();
                var orderlist = BBeStoreContext.Current.Order.Where(p => nos.Contains(p.OrderNo)).ToList();
                foreach (var order in orderlist)
                {
                    var l = list.Where(p => p.ORDER_NO == order.OrderNo).FirstOrDefault();
                    if (l != null)
                    {
                        order.SAPSyncBy = l.ERPID;
                        order.SAPSyncStatus = l.ORDER_STATUS;
                    }
                    result.Add(order);
                }
            }

            return result;
        }

        /// <summary>
        /// Get b+b eStore credit card orders which total amount are already be catured
        /// </summary>
        public static List<BB_CREDITCARD_ORDER> GetAllCaptruedBBCreditCardOrders()
        {
            var capturedStatus = new List<string> { CCTransactionType.Capture.ToString() };
            return MyAdvantechDAL.GetBBCreditCardOrdersByTranType(capturedStatus);
        }

        public static List<BB_CREDITCARD_ORDER> GetBBordersByStatus(CCTransactionType status)
        {
            List<string> list = new List<string>() { status.ToString() };
            return MyAdvantechDAL.GetBBCreditCardOrdersByTranType(list);
        }

        /// <summary>
        /// Get b+b eStore credit card orders which total amount are already be catured
        /// </summary>
        public static void CreateBBCreditCardOrderRecord(BB_CREDITCARD_ORDER order)
        {
            MyAdvantechDAL.CreateBBCreditCardOrder(order);
        }

        public static Boolean IsCreditCardPayment(String OrderNo)
        {
            ORDER_MASTER om = MyAdvantechDAL.GetOrderMaster(OrderNo);
            if (om != null && om.PAYTERM.Equals("CODC", StringComparison.InvariantCultureIgnoreCase))
            { 
                return true;
            }
            return false;
        }

        public static void UnblockSOCreditCard(String OrderNo,Boolean IsTesting)
        {
            try
            {
                Advantech.Myadvantech.DataAccess.SAPDAL.UnblockSOCreditCard(OrderNo, IsTesting);
            }
            catch(Exception e)
            {

            }
        }

        public static void AddCreditCardInfo2SAPSO(string SONO, string AuthCode, string TranId, string CardType, string CardNum, decimal AuthAmt, bool isTesting)
        {
            try
            {
                DataAccess.SAPDAL.AddCreditCardInfo2SAPSO(SONO, AuthCode, TranId, CardType, CardNum, AuthAmt, isTesting);
            }
            catch
            { }
        }

        public static UpdateDBResult ConfingSRP2Cart(string parentItem, int parentQty, DataTable component, string ERPID, string orgID, string cartID)
        {
            UpdateDBResult updateresult = new UpdateDBResult();

            try
            {
                //Remove current
                CartDetailHelper.RemoveCartDetailByID(cartID);

                //Parent Item
                cart_DETAIL_V2 CartDetail = new cart_DETAIL_V2();
                int lineNo = 100;
                CartDetail.Cart_Id = cartID;
                CartDetail.Line_No = lineNo;
                CartDetail.higherLevel = 0;

                CartDetail.Part_No = parentItem;
                CartDetail.Description = string.Empty;
                CartDetail.Qty = parentQty;
                CartDetail.Ew_Flag = 0;
                CartDetail.SatisfyFlag = 0;
                CartDetail.QUOTE_ID = string.Empty;
                CartDetail.Category = string.Empty;
                CartDetail.CustMaterial = string.Empty;

                CartDetail.otype = 0;
                CartDetail.req_date = DateTime.Now.AddDays(2);
                CartDetail.otype = (int)QuoteItemType.BtosParent;
                CartDetail.due_date = CartDetail.req_date;

                CartDetail.Delivery_Plant = DataAccess.DataCore.CBOMV2_ConfiguratorDAL.GetDeliveryPlant(ERPID, orgID, CartDetail.Part_No, (QuoteItemType)Enum.Parse(typeof(QuoteItemType), CartDetail.otype.ToString()));
                CartDetail.List_Price = 0;
                CartDetail.Unit_Price = 0;
                CartDetail.Itp = 0;

                CartDetail.Model_No = string.Empty;
                object model = SqlProvider.dbExecuteScalar("MY", string.Format("SELECT TOP 1 MODEL_NO FROM SAP_PRODUCT WHERE PART_NO = '{0}' ", parentItem));
                if (model != null && !string.IsNullOrEmpty(model.ToString()))
                    CartDetail.Model_No = model.ToString();

                MyAdvantechContext.Current.cart_DETAIL_V2.Add(CartDetail);

                //Component
                foreach (DataRow dr in component.Rows)
                {
                    cart_DETAIL_V2 detail = new cart_DETAIL_V2();
                    lineNo += 1;
                    detail.Cart_Id = cartID;
                    detail.Line_No = lineNo;
                    detail.higherLevel = 100;

                    detail.Part_No = dr["CATEGORY_ID"].ToString();
                    detail.Description = dr["CATEGORY_NAME"].ToString();

                    int qty = 1;
                    int.TryParse(dr["CATEGORY_QTY"].ToString(), out qty);
                    detail.Qty = qty;

                    detail.Ew_Flag = 0;
                    detail.SatisfyFlag = 0;
                    detail.QUOTE_ID = string.Empty;
                    detail.Category = detail.Description;
                    detail.CustMaterial = string.Empty;

                    detail.otype = 0;
                    detail.req_date = DateTime.Now.AddDays(2);
                    detail.otype = (int)QuoteItemType.BtosPart;
                    detail.due_date = detail.req_date;

                    detail.Delivery_Plant = DataAccess.DataCore.CBOMV2_ConfiguratorDAL.GetDeliveryPlant(ERPID, orgID, detail.Part_No, (QuoteItemType)Enum.Parse(typeof(QuoteItemType), detail.otype.ToString()));

                    decimal price = 0;
                    decimal.TryParse(dr["CATEGORY_PRICE"].ToString(), out price);
                    detail.List_Price = price;
                    detail.Unit_Price = price;
                    detail.Itp = 0;

                    detail.Model_No = string.Empty;
                    object md = SqlProvider.dbExecuteScalar("MY", string.Format("SELECT TOP 1 MODEL_NO FROM SAP_PRODUCT WHERE PART_NO = '{0}' ", CartDetail.Part_No));
                    if (md != null && !string.IsNullOrEmpty(md.ToString()))
                        detail.Model_No = md.ToString();

                    MyAdvantechContext.Current.cart_DETAIL_V2.Add(detail);
                }
                MyAdvantechContext.Current.SaveChanges();
                updateresult.IsUpdated = true;
            }
            catch (Exception ex)
            {
                updateresult.IsUpdated = false;
                updateresult.ServerMessage = ex.ToString();
            }
            return updateresult;
        }
    }
}

