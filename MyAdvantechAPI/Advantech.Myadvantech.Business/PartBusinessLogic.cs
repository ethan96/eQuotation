//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Text;
using Advantech.Myadvantech.DataAccess;
using System.Web.Configuration;

namespace Advantech.Myadvantech.Business
{

    /// <summary>
    /// Part business layer
    /// </summary>
    public class PartBusinessLogic
    {

        /// <summary>
        /// 
        /// </summary>
        /// <param name="SystemPartNo"></param>
        /// <returns></returns>
        public static void ExpandSchneiderSystemPartToCart(String SystemPartNo, String cart_id, String user_id, String erp_id, String org_id)
        {
            String _plant = "TWH1"; string _Currency = "USD";

            //1. Expanding BOM
            DataTable dt = Advantech.Myadvantech.DataAccess.SAPDAL.ExpandSystemPartToBOM(SystemPartNo, 1);

            //1.5 Get deliveryplant from SAP_Product_Org. Ryan 20160316
            dt.Columns.Add("DELIVERYPLANT", typeof(String));
            List<String> list_partno = new List<String>();
            foreach (DataRow d in dt.Rows)
            {
                list_partno.Add("'" + d["Idnrk"].ToString() + "'");
            }
            String sql_in = string.Join(",", list_partno);
            String sql_str = "select PART_NO,ORG_ID,DELIVERYPLANT from SAP_PRODUCT_ORG where ORG_ID = 'TW01' AND PART_NO IN (" + sql_in + ")";
            DataTable dt_plant = SqlProvider.dbGetDataTable("MY", sql_str);

            foreach (DataRow d in dt.Rows)
            {
                DataRow[] rows = dt_plant.Select("PART_NO='" + d["Idnrk"].ToString() + "'");
                if (rows.Count() > 0)
                    d["DELIVERYPLANT"] = dt_plant.Select("PART_NO='" + d["Idnrk"].ToString() + "'")[0][2];
                else
                    d["DELIVERYPLANT"] = _plant;
            }


            //2. Get system part's unit price by order simulation 
            Order _order = new Order();
            _order.Currency = _Currency;
            _order.OrgID = org_id;
            _order.DistChannel = "10";
            _order.Division = "00";

            int i = 0;
            foreach (DataRow d in dt.Rows)
            {
                _order.AddLooseItem(Advantech.Myadvantech.DataAccess.SAPDAL.RemovePrecedingZeros(d["Idnrk"].ToString()), 1);
                _order.LineItems[i].PlantID = d["DELIVERYPLANT"].ToString();
                i++;
            }
            _order.SetOrderPartnet(new OrderPartner(erp_id, org_id, OrderPartnerType.SoldTo));
            _order.SetOrderPartnet(new OrderPartner(erp_id, org_id, OrderPartnerType.ShipTo));
            _order.SetOrderPartnet(new OrderPartner(erp_id, org_id, OrderPartnerType.BillTo));

            String _errMsg = String.Empty;
            Advantech.Myadvantech.DataAccess.SAPDAL.SimulateOrder(ref _order, ref _errMsg);
            List<Product> pr = _order.LineItems;

            //3.
            //_UnitPrice = 1000;
            //var totalcost = dt.AsEnumerable().Sum(x => x.Field<decimal>("Stprs"));

            //CARTMASTERV2 CartMaster = new CARTMASTERV2();
            //CartMaster.CartID = cart_id;
            //CartMaster.ErpID = erp_id;
            //CartMaster.CreatedDate = DateTime.Now;
            //CartMaster.Currency = _Currency;
            //CartMaster.CreatedBy = user_id;
            //CartMaster.LastUpdatedDate = DateTime.Now;
            //CartMaster.LastUpdatedBy = user_id;
            //MyAdvantechContext.Current.CARTMASTERV2.Add(CartMaster);

            // Get Bto_Parent Line_No
            List<cart_DETAIL_V2> cd = new MyAdvantechDAL().GetCartDetailV2ByCartID(cart_id);
            int Bto_LineNo = 0;
            do
            {
                Bto_LineNo += 100;
            } while ((from d in cd where d.Cart_Id == cart_id && d.Line_No == Bto_LineNo select d).Any());

            // Set Bto_Parent
            cart_DETAIL_V2 CartDetail = new cart_DETAIL_V2();
            CartDetail.Cart_Id = cart_id;
            CartDetail.Line_No = Bto_LineNo;
            CartDetail.Part_No = "PTRADE-BTO";
            CartDetail.Description = SystemPartNo;
            CartDetail.Qty = 1;
            CartDetail.CustMaterial = "";
            CartDetail.Ew_Flag = 0;
            CartDetail.SatisfyFlag = 0;
            CartDetail.QUOTE_ID = "";
            CartDetail.Delivery_Plant = _plant;
            CartDetail.higherLevel = 0;
            CartDetail.otype = (int)QuoteItemType.BtosParent;
            CartDetail.List_Price = 0;
            CartDetail.Unit_Price = 0;
            CartDetail.Itp = 0;
            CartDetail.Description = SystemPartNo;

            CartDetail.req_date = DateTime.Now.AddDays(1);
            String LandStr = SAPDAL.SAPDAL.GetCalendarIDbyOrg(org_id.Substring(0, 1));
            DateTime reqdate = CartDetail.req_date.Value;
            SAPDAL.SAPDAL.Get_Next_WorkingDate_ByCode(ref reqdate, WebConfigurationManager.AppSettings["TWBTOSWorkingDay"].ToString(), LandStr);
            CartDetail.req_date = reqdate;
            CartDetail.due_date = reqdate;

            MyAdvantechContext.Current.cart_DETAIL_V2.Add(CartDetail);

            // Set Bto_Part
            Bto_LineNo++;
            foreach (DataRow d in dt.Rows)
            {
                CartDetail = new cart_DETAIL_V2();

                CartDetail.Cart_Id = cart_id;
                CartDetail.Line_No = Bto_LineNo;
                CartDetail.Part_No = Advantech.Myadvantech.DataAccess.SAPDAL.RemovePrecedingZeros(d["Idnrk"].ToString());
                CartDetail.Description = d["Ojtxp"].ToString();
                CartDetail.Qty = Convert.ToInt32(d["Menge"]);
                CartDetail.CustMaterial = "";
                CartDetail.Ew_Flag = 0;
                CartDetail.SatisfyFlag = 0;
                CartDetail.QUOTE_ID = "";
                CartDetail.Delivery_Plant = d["DELIVERYPLANT"].ToString();
                CartDetail.higherLevel = 100;
                CartDetail.otype = (int)QuoteItemType.Part;

                // Get req_date
                CartDetail.req_date = DateTime.Now.AddDays(1);
                LandStr = SAPDAL.SAPDAL.GetCalendarIDbyOrg(org_id.Substring(0, 1));
                reqdate = CartDetail.req_date.Value;
                SAPDAL.SAPDAL.Get_Next_WorkingDate_ByCode(ref reqdate, "0", LandStr);
                CartDetail.req_date = reqdate;
                CartDetail.due_date = reqdate;

                // Set list price
                Decimal list_price = 0, unit_price = 0;
                if ((from p in pr where p.PartNumber == CartDetail.Part_No select p.ListPrice).Any())
                    list_price = (from p in pr where p.PartNumber == CartDetail.Part_No select p.ListPrice).FirstOrDefault();
                if ((from p in pr where p.PartNumber == CartDetail.Part_No select p.UnitPrice).Any())
                    unit_price = (from p in pr where p.PartNumber == CartDetail.Part_No select p.UnitPrice).FirstOrDefault();
                CartDetail.List_Price = list_price;
                CartDetail.Unit_Price = unit_price;
                CartDetail.Itp = 0;
                Bto_LineNo++;
                MyAdvantechContext.Current.cart_DETAIL_V2.Add(CartDetail);
            }
            MyAdvantechContext.Current.SaveChanges();

            //With BOMTable.Columns
            //    .Remove("Mandt")
            //    '.Remove("Alprf") : .Remove("Alpgr") : .Remove("Ewahr")
            //    .Item("Alprf").ColumnName = "Alt. Item Rank Order" : .Item("Alpgr").ColumnName = "Alt. Item Grp." : .Item("Ewahr").ColumnName = "Usage Prob (%)"
            //    .Item("Matnr").ColumnName = "Parent Item" : .Item("Bstmi").ColumnName = "MoQ" : .Item("Ojtxb").ColumnName = "Parent Desc."
            //    .Item("Idnrk").ColumnName = "Child Item" : .Item("Ojtxp").ColumnName = "Child Desc." : .Item("Stprs").ColumnName = "Cost"
            //    .Item("Stprs_Usd").ColumnName = "USD Cost" : .Item("Werks").ColumnName = "Plant" : .Item("Waers").ColumnName = "Currency"
            //    .Item("Stufe").ColumnName = "Level" : .Item("Menge").ColumnName = "Component Qty." : .Item("Peinh").ColumnName = "Price Unit"
            //    .Item("Peinh_Usd").ColumnName = "USD Price Unit" : .Add("MPN") : .Add("Manufacture Name")
            //End With

        }

        public static bool IsNonStandardSensitiveITP(string PartNo)
        {
            if (string.IsNullOrEmpty(PartNo)) { return false; }
            if (PartNo.ToUpper().StartsWith("CTOS-")) { return true; }
            if (PartNo.ToUpper().StartsWith("C-CU-")) { return true; }
            if (PartNo.ToUpper().StartsWith("IMG-")) { return true; }
            if (PartNo.ToUpper().StartsWith("AGS-"))
            {
                if (PartNo.ToUpper().StartsWith("AGS-EW"))
                {
                    return true;
                }
                else
                {
                    return IsServicePart(PartNo, "EU10");
                }
            }
            return false;
        }


        public static bool IsServicePart(string PartNumber, string ORGID)
        {
            SAP_PRODUCT sp = Advantech.Myadvantech.DataAccess.MyAdvantechDAL.GetSAP_ProductByOrg(PartNumber, ORGID);
            if (sp == null || string.IsNullOrEmpty(sp.GENITEMCATGRP))
            {
                return false;
            }
            if (sp.GENITEMCATGRP.Equals("DIEN", StringComparison.InvariantCultureIgnoreCase))
            {
                return true;
            }
            else if (sp.GENITEMCATGRP.Equals("LEIS", StringComparison.InvariantCultureIgnoreCase))
            {
                return true;
            }
            return false;
        }

        public static bool IsServicePart2(string partNo)
        {
            SAP_PRODUCT sp = Advantech.Myadvantech.DataAccess.MyAdvantechDAL.GetSAPProduct(partNo);
            if (sp != null && sp.PRODUCT_TYPE.Equals("ZSRV", StringComparison.InvariantCultureIgnoreCase))
                return true;
            return false;
        }

        public static int GetKR01AssemblyPartPrice(string PartNumber)
        {
            if (string.IsNullOrEmpty(PartNumber))
            {
                return 0;
            }
            if (PartNumber.Equals("AGS-CTOS-SYS-A", StringComparison.InvariantCultureIgnoreCase))
            {
                return 40000;
            }
            if (PartNumber.Equals("AGS-CTOS-SYS-B", StringComparison.InvariantCultureIgnoreCase))
            {
                return 60000;
            }
            return 0;
        }

        /// <summary>
        /// Get part's reference plant by Special Procurement
        /// </summary>
        /// <param name="PartNumber"></param>
        /// <param name="plant"></param>
        /// <returns></returns>
        public static string GetReferencePlantBySpecialProcurement(string PartNumber, string plant)
        {
            string _SpecialProcurement = Advantech.Myadvantech.DataAccess.SAPDAL.GetSpecialProcurement(PartNumber, plant);

            if (_SpecialProcurement.Equals("C1", StringComparison.InvariantCultureIgnoreCase))
            {
                return "TWH1";
            }
            else if (_SpecialProcurement.Equals("C2", StringComparison.InvariantCultureIgnoreCase))
            {
                return "CKH2";
            }

            return "TWH1";
        }

        public enum ShippingVia
        {
            Air,
            Sea,
            NA
        }

        public static ShippingVia GetShippingVia(string PartNumber, string plant)
        {
            string _ShippingVia = Advantech.Myadvantech.DataAccess.SAPDAL.GetShippingVia(PartNumber, plant);
            if (_ShippingVia.Equals("0001", StringComparison.InvariantCultureIgnoreCase))
            {
                return ShippingVia.Air;
            }
            else if (_ShippingVia.Equals("0002", StringComparison.InvariantCultureIgnoreCase))
            {
                return ShippingVia.Sea;
            }
            return ShippingVia.NA;
        }

        /// <summary>
        /// Get part instance that including related model, and load basic model information
        /// The other model's attributes will be loaded when the attribute is called
        /// </summary>
        /// <param name="PartNumber"></param>
        /// <returns></returns>
        public static Part GetPartWithCompleteModelInformation(string PartNumber)
        {
            Part _part = new Part(PartNumber);
            _part.LoadPartDetail();
            _part.LoadModels(true);
            return _part;
        }

        /// <summary>
        /// Get part instance that including related models, and load complete model information
        /// </summary>
        /// <param name="PartNumber"></param>
        /// <returns></returns>
        public static Part GetPartWithBasicModelInformation(string PartNumber)
        {
            Part _part = new Part(PartNumber);
            _part.LoadPartDetail();
            _part.LoadModels(false);
            return _part;
        }

        //public static DateTime GetInventoryAvailableDate()

        //================================================================================================

        public static void GetPrice(List<Advantech.Myadvantech.DataAccess.Part> parts, ref string errorMsg)
        {
            //SAPDAL.GetPrice(parts, ref errorMsg);
        }
        public static void GetPrice(Advantech.Myadvantech.DataAccess.Part part, ref string errorMsg)
        {
            List<Advantech.Myadvantech.DataAccess.Part> parts = new List<Advantech.Myadvantech.DataAccess.Part>();
            parts.Add(part);
            //SAPDAL.GetPrice(parts, ref errorMsg);
            part = parts.FirstOrDefault();
        }

        public static String GetDeliveryPlant(String company_id, String org_id, String part_no, QuoteItemType type)
        {
            if (company_id.Equals("UZISCHE01"))
                return "TWM3";

            if (!String.IsNullOrEmpty(org_id))
            {
                if (org_id.Equals("TW01", StringComparison.OrdinalIgnoreCase))
                {
                    if (type == QuoteItemType.BtosParent || type == QuoteItemType.BtosPart)
                    {
                        return "TWH1";
                    }
                    else
                    {
                        String str = String.Format("select top 1 DELIVERYPLANT from SAP_PRODUCT_ORG where ORG_ID='TW01' and PART_NO = '{0}'", part_no);
                        DataTable dt = DataAccess.SqlProvider.dbGetDataTable("MY", str);
                        if (dt.Rows.Count > 0)
                            return dt.Rows[0][0].ToString();
                        else
                            return "TWH1";
                    }
                }
                else if (org_id.Substring(0, 2).Equals("CN", StringComparison.OrdinalIgnoreCase))
                {
                    if (org_id.Equals("CN30", StringComparison.OrdinalIgnoreCase))
                        return "CNH3";
                    else
                        return "CNH1";
                }
                else if (org_id.Substring(0, 2).Equals("EU", StringComparison.OrdinalIgnoreCase))
                {
                    if (org_id.Equals("EU80", StringComparison.OrdinalIgnoreCase))
                        return "DLM1";
                    else
                        return "EU10";
                }
                else if (org_id.Substring(0, 2).Equals("US", StringComparison.OrdinalIgnoreCase))
                {
                    if (org_id.Equals("US10", StringComparison.OrdinalIgnoreCase))
                        return "UBH1";
                    else
                        return "USH1";
                }
                else
                    return org_id.Substring(0, 2) + "H1";
            }
            else
                return "TWH1";
        }

        public static Boolean IsNoEWParts(String part_no, Boolean isFromEQ = false)
        {
            String sql_str = "";
            if (!isFromEQ)
            {
                sql_str = "select * from CBOM_WithoutEW where Part_No = '" + part_no + "'";
            }
            else
            {
                sql_str = "SELECT * FROM EZ_CBOM_MAPPING a inner join CBOM_WithoutEW b on 'EZ-'+a.NUMBER = b.Part_No where a.VNUMBER = '" + part_no + "'";
            }

            DataTable dt = DataAccess.SqlProvider.dbGetDataTable("MY", sql_str);
            if (dt.Rows.Count > 0)
                return true;
            else
                return false;
        }

        public static Boolean IsANANCNRParts(String _partno, String _indicator, String _producttype)
        {
            if (_indicator.StartsWith("C", StringComparison.OrdinalIgnoreCase) || _indicator.StartsWith("D", StringComparison.OrdinalIgnoreCase)
                || _indicator.StartsWith("T", StringComparison.OrdinalIgnoreCase) || _indicator.StartsWith("P", StringComparison.OrdinalIgnoreCase))
                return true;
            else if ((_partno.StartsWith("X", StringComparison.OrdinalIgnoreCase) || _partno.StartsWith("Y", StringComparison.OrdinalIgnoreCase))
                 && _producttype.Equals("ZPER", StringComparison.OrdinalIgnoreCase))
                return true;
            else
                return false;
        }

        public static String GetABCIndicator(String _partno, String _plant)
        {
            String sql_str = "select * from SAP_PRODUCT_ABC where PART_NO = '" + _partno + "' and PLANT = '" + _plant + "'";
            DataTable dt = DataAccess.SqlProvider.dbGetDataTable("MY", sql_str);
            if (dt.Rows.Count > 0)
                return String.IsNullOrEmpty(dt.Rows[0]["ABC_INDICATOR"].ToString()) ? "" : dt.Rows[0]["ABC_INDICATOR"].ToString();
            else
                return "";
        }

        public static Boolean PatentLitigationParts(String _PartNo, String _CountryCode, ref String _Msg)
        {
            DataTable dt = DataAccess.OracleProvider.GetDataTable("SAP_PRD", "select * from saprdp.ZTSD_121 where matnr = '" + _PartNo + "'");
            _Msg = "";

            if (dt != null && dt.Rows.Count > 0)
            {
                Object obj = DataAccess.OracleProvider.ExecuteScalar("SAP_PRD", "select ZMSG from saprdp.ZTSD_122 WHERE matnr = '" + _PartNo + "' AND ROWNUM = 1");
                String zmsg = String.Empty;
                if (obj == null)
                    zmsg = "Failed to add part due to local wireless certification issue.";
                else if (String.IsNullOrEmpty(obj.ToString()) || String.IsNullOrWhiteSpace(obj.ToString()))
                    zmsg = "Failed to add part due to local wireless certification issue.";
                else
                    zmsg = obj.ToString();

                if (dt.Select("LAND1 = '" + _CountryCode + "' AND ZACTIVE = 'X'").Count() > 0)
                {
                    return false;
                }
                else if (dt.Select("LAND1 = '" + _CountryCode + "' AND ZACTIVE = ' '").Count() > 0)
                {
                    _Msg = zmsg;
                    return true;
                }
                else if (dt.Select("LAND1 = '" + _CountryCode + "'").Count() == 0)
                {
                    _Msg = zmsg;
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        public static Boolean IsTPPart(string partNo, string plant)
        {
            String ABC_Indicator = Business.PartBusinessLogic.GetABCIndicator(partNo, plant);
            if (ABC_Indicator.StartsWith("T", StringComparison.OrdinalIgnoreCase) || ABC_Indicator.StartsWith("P", StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
            return false;
        }

        public static Boolean IsODMTPart(string _PartNo)
        {
            SAP_PRODUCT sp = MyAdvantechDAL.GetSAPProduct(_PartNo);

            // ODM/T parts materail group is defined in ACLSQL7-[ePricerV2].[dbo].[ItemNoProductType]
            if (
                (sp != null && !String.IsNullOrEmpty(sp.MATERIAL_GROUP))
                &&
                (sp.MATERIAL_GROUP.ToUpper().Equals("ODM") || sp.MATERIAL_GROUP.ToUpper().Equals("T") ||
                sp.MATERIAL_GROUP.ToUpper().Equals("170-ODM") || sp.MATERIAL_GROUP.ToUpper().Equals("CM-ASSY") ||
                sp.MATERIAL_GROUP.ToUpper().Equals("CM-PRDT"))
                )
            {
                return true;
            }
            return false;
        }

        public static Boolean IsInvalidParts(String _CompanyID, String _ORGID, String _PartNo, String _Plant, String _CountryCode, Boolean _isInternalUser, ref String _Msg)
        {
            // Bypass all parts validation for ACN per Jingjing's request.
            if (_ORGID.ToString().ToUpper().StartsWith("CN"))
            {
                return false;
            }


            // 1. Check 968T
            if (_PartNo.StartsWith("968T"))
            {
                if (!Business.UserRoleBusinessLogic.CanSee968TParts(_CompanyID))
                {
                    _Msg = "Due to MS licenses policy it is not allowed to add part numbers start with 968T.";
                    return true;
                }
            }
            //-------------------------------------------------------------------------------------------------------------


            // 2. Check T/P
            if (!_isInternalUser)
            {
                SAP_PRODUCT sp = MyAdvantechDAL.GetSAP_ProductByOrg(_PartNo, _ORGID);
                if (sp != null && !String.IsNullOrEmpty(sp.MATERIAL_GROUP))
                {
                    if (sp.MATERIAL_GROUP.ToUpper().Equals("PRODUCT") || sp.MATERIAL_GROUP.ToUpper().Equals("ADLOGPROD"))
                    {
                        if (IsTPPart(_PartNo, _Plant))
                        {
                            _Msg = "This item is an ODM/OEM item, for detail please contact your sales representative.";
                            return true;
                        }
                    }
                    else if (sp.MATERIAL_GROUP.ToUpper().Equals("ODM") || sp.MATERIAL_GROUP.ToUpper().Equals("ODM-P") || sp.MATERIAL_GROUP.ToUpper().Equals("T"))
                    {
                        _Msg = "This item is an ODM/T item, for detail please contact your sales representative.";
                        return true;
                    }
                }
            }
            //-------------------------------------------------------------------------------------------------------------


            // 3. Check X/Y
            if (!_isInternalUser)
            {
                if (_PartNo.StartsWith("X", StringComparison.OrdinalIgnoreCase) || _PartNo.StartsWith("Y", StringComparison.OrdinalIgnoreCase))
                {
                    _Msg = "X/Y products are not available, for detail please contact your sales representative.";
                    return true;
                }
            }
            //-------------------------------------------------------------------------------------------------------------

            // Ryan 20160921 Mark out litigation check logic, pull it as a independent validation in OrderInfo page.
            // 4. Check Patent Litigation
            //if (Business.PartBusinessLogic.PatentLitigationParts(_PartNo, _CountryCode, ref msg4))
            //{
            //    result4 = true;

            //    _Msg = msg4;
            //    return result4;
            //}
            //-------------------------------------------------------------------------------------------------------------

            return false;
        }

        public static DataTable AACPriceListFilter(DataTable dt)
        {
            foreach (DataRow d in dt.Rows)
            {
                if (d["PART_NO"].ToString().StartsWith("X") || d["PART_NO"].ToString().StartsWith("Y"))
                {
                    d.Delete();
                }
                else if (d["PART_NO"].ToString().StartsWith("C-") || d["PART_NO"].ToString().StartsWith("D-"))
                {
                    d.Delete();
                }
                else if (d["PART_NO"].ToString().StartsWith("DC-") || d["PART_NO"].ToString().StartsWith("DL-") || d["PART_NO"].ToString().StartsWith("IG-"))
                {
                    d.Delete();
                }
                else if (d["PART_NO"].ToString().StartsWith("DAC-") || d["PART_NO"].ToString().StartsWith("DCU-") || d["PART_NO"].ToString().StartsWith("DMS-"))
                {
                    d.Delete();
                }
                else if (d["PART_NO"].ToString().StartsWith("APP8-") || d["PART_NO"].ToString().StartsWith("MTC6-"))
                {
                    d.Delete();
                }
                else if (d["PART_NO"].ToString().StartsWith("EDGEVR"))
                {
                    d.Delete();
                }
                else if (d["PART_NO"].ToString().EndsWith("-T") || d["PART_NO"].ToString().EndsWith("-ES") || d["PART_NO"].ToString().EndsWith("-BTO"))
                {
                    d.Delete();
                }
            }
            dt.AcceptChanges();

            return dt;
        }

        public static List<String> isMSSWParts(List<String> _parts, String _orgid)
        {
            if (_parts.Count == 0)
                return new List<String>();

            //String str = String.Format(" select a.part_no from SAP_PRODUCT a inner join SAP_PRODUCT_ORG b on a.part_no=b.part_no " +
            //                                   " inner join SAP_PRODUCT_STATUS_ORDERABLE c on  c.PART_NO = a.PART_NO  and c.SALES_ORG = b.ORG_ID " +
            //                                   " where c.PRODUCT_STATUS IN " + WebConfigurationManager.AppSettings["CanOrderProdStatus"].ToString() + " AND b.org_id='{0}' and a.part_no in ({1}) " +
            //                                   " and ( " +
            //                                   "       ( " +
            //                                   "         a.genitemcatgrp NOT IN ('zslb','ZSWL') " +
            //                                   "         and " +
            //                                   "         a.MATERIAL_GROUP not in ('968MS','96SW','206','968MS/SW') " +
            //                                   "       ) " +
            //                                   "       OR a.PART_NO LIKE '968T%' " +
            //                                   "     ) ", _orgid, String.Join(", ", _parts.Select(d => d = "'" + d + "'").ToList().ToArray()));

            // Ryan 20161026 Comment out old sql string, new select string will no longer check its product status here.
            String str = String.Format(" select a.part_no from SAP_PRODUCT a inner join SAP_PRODUCT_ORG b on a.part_no=b.part_no " +
                                               " where b.org_id='{0}' and a.part_no in ({1}) " +
                                               " and ( " +
                                               "       ( " +
                                               "         a.genitemcatgrp NOT IN ('zslb','ZSWL') " +
                                               "         and " +
                                               "         a.MATERIAL_GROUP not in ('968MS','206','968MS/SW') " +
                                               "       ) " +
                                               "       OR a.PART_NO LIKE '968T%' " +
                                               "     ) ", _orgid, String.Join(", ", _parts.Select(d => d = "'" + d + "'").ToList().ToArray()));

            DataTable dt = SqlProvider.dbGetDataTable("MY", str);

            List<string> validlist = dt.AsEnumerable().Select(r => r.Field<string>("part_no")).ToList();
            List<string> invalidlist = _parts.Except(validlist).ToList();

            return invalidlist;
        }

        public static decimal GetBBWebPrice(String PartNo)
        {
            decimal _webprice = 0;

            DataTable _dt = MyAdvantechDAL.GetBBWebPrice(PartNo);
            if (_dt != null && _dt.Rows.Count > 0)
            {
                decimal.TryParse(_dt.Rows[0]["L1Price"].ToString(), out _webprice);
            }
            _dt = null;
            return _webprice;

        }

        public static List<String> GetConfiguratorEOLItems(String CategoryID, String ORGID)
        {
            List<String> result = new List<String>();
            List<String> items = new List<String>();

            String sql = String.Format(@"with cteCBOM (CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_TYPE, SEQ_NO, CONFIGURATION_RULE, DEFAULT_FLAG, DEPTH, HIERARCHY) 
                                        as (
                                        select CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_TYPE, SEQ_NO,CONFIGURATION_RULE, isnull(DEFAULT_FLAG,0) as DEFAULT_FLAG, 
                                        0 as DEPTH, cast('' as nvarchar(max)) as HIERARCHY from MyAdvantechGlobal.dbo.CBOM_CATALOG_CATEGORY 
                                        where CATEGORY_ID='{0}' and ORG='{1}' 
                                        union all 
                                        select a.CATEGORY_ID, a.PARENT_CATEGORY_ID, a.CATEGORY_TYPE, a.SEQ_NO, a.CONFIGURATION_RULE, a.DEFAULT_FLAG, b.DEPTH+1 as DEPTH, 
                                        cast(b.HIERARCHY+'->'+a.CATEGORY_ID as nvarchar(max)) as HIERARCHY 
                                        from MyAdvantechGlobal.dbo.CBOM_CATALOG_CATEGORY a inner join cteCBOM b on a.PARENT_CATEGORY_ID=b.CATEGORY_ID 
                                        where a.PARENT_CATEGORY_ID=b.CATEGORY_ID and a.ORG='{1}' and a.CATEGORY_ID<>a.PARENT_CATEGORY_ID 
                                        ) 
                                        select distinct CATEGORY_ID from cteCBOM where CATEGORY_TYPE = 'component' and depth <= 2 
                                        order by CATEGORY_ID option (maxrecursion 500)", CategoryID, ORGID.Substring(0, 2));
            DataTable dt = SqlProvider.dbGetDataTable("MY", sql);

            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow d in dt.Rows)
                {
                    if (d["CATEGORY_ID"].ToString().Contains("|"))
                    {
                        String[] pipelineitems = d["CATEGORY_ID"].ToString().Split('|');
                        foreach (String s in pipelineitems)
                        {
                            int count = Convert.ToInt32(SqlProvider.dbExecuteScalar("MY", String.Format(" select count(part_no) as c from SAP_PRODUCT_STATUS_ORDERABLE " +
                                                        " where product_status in {0} and part_no ='{1}' and sales_org='{2}'", ConfigurationManager.AppSettings["CanOrderProdStatus"], s, ORGID)));

                            if (count == 0 && !result.Contains(s))
                                result.Add(s);
                        }
                    }
                    else
                    {
                        int count = Convert.ToInt32(SqlProvider.dbExecuteScalar("MY", String.Format(" select count(part_no) as c from SAP_PRODUCT_STATUS_ORDERABLE " +
                                                        " where product_status in {0} and part_no ='{1}' and sales_org='{2}'", ConfigurationManager.AppSettings["CanOrderProdStatus"], d["CATEGORY_ID"].ToString(), ORGID)));

                        if (count == 0 && !result.Contains(d["CATEGORY_ID"].ToString()))
                            result.Add(d["CATEGORY_ID"].ToString());
                    }
                }
            }

            return result;
        }

        public static Boolean IsPTD(String PartNo)
        {
            if (PartNo.StartsWith("SQR") || (PartNo.StartsWith("SQF") || PartNo.StartsWith("EXM")))
            {
                return false;
            }

            String STR = String.Format(("select count(*) from SAP_PRODUCT where " + (" ((PRODUCT_TYPE = \'ZPER\') " + (" OR " + (@" ((PRODUCT_TYPE = 'ZFIN' OR PRODUCT_TYPE = 'ZOEM') AND (PART_NO LIKE 'BT%' OR PART_NO LIKE 'DSD%' OR PART_NO LIKE 'ES%' OR PART_NO LIKE 'EWM%' OR PART_NO LIKE 'GPS%' OR PART_NO LIKE 'SQF%' OR PART_NO LIKE 'WIFI%' OR PART_NO LIKE 'PMM%' OR PART_NO LIKE 'Y%')) " + (" OR " + (" ((PRODUCT_TYPE = \'ZRAW\') AND (PART_NO LIKE \'206Q%\')) " + (" OR " + (" ((PRODUCT_TYPE = \'ZSEM\') AND (PART_NO LIKE \'968Q%\'))) " + " AND PART_NO = \'{0}\'")))))))), PartNo);
            int count = Convert.ToInt32(SqlProvider.dbExecuteScalar("MY", STR));
            if (count > 0)
                return true;
            else
                return false;
        }

        public static Boolean IsSAPStatusOrderable(String PartNo, String OrgID)
        {

            String STR = "select count(*) from SAP_PRODUCT_STATUS_ORDERABLE Where PART_NO='" + PartNo + "' and SALES_ORG='" + OrgID + "' ";
            int count = Convert.ToInt32(SqlProvider.dbExecuteScalar("MY", STR));
            if (count > 0)
                return true;
            else
                return false;
        }

        public static Boolean isACNOSParts(String _PartNo)
        {
            // Ryan 20180417 New ACN OS logic from Alex
            if ((!String.IsNullOrEmpty(_PartNo)) && (_PartNo.StartsWith("968C") || _PartNo.StartsWith("968B") || _PartNo.StartsWith("209B")))
            {
                return true;
            }
            else
            {
                return false;
            }

            // Ryan 20180417 Comment below out due to new logic is applied 
            //if ((!String.IsNullOrEmpty(_PartNo)) && (_PartNo.StartsWith("968") || _PartNo.StartsWith("206") || _PartNo.StartsWith("209")))
            //{
            //    return true;
            //}
            //else
            //    return false;            
        }

        /// <summary>
        /// For part No to check CheckCompatibility
        /// </summary>
        /// <param name="partNos"></param>
        /// <param name="type"></param>
        /// <returns>True 表示產品內有不相容!，False 則可加入購物車!</returns>
        public static Tuple<bool, string> CheckCompatibility(List<string> partNos, Compatibility type)
        {
            if (partNos != null && type != null)
            {
                List<PRODUCT_COMPATIBILITY> pcList = MyAdvantechDAL.GetProductCompatibility(type);
                foreach (string partNo in partNos)
                {
                    var checkList = partNos.ToList();
                    checkList.Remove(partNo);
                    Tuple<bool, string> result = DataAccess.DataCore.CBOMV2_ConfiguratorDAL.CheckCompatibility(partNo, checkList, pcList);
                    if (result.Item1 == true)
                        return new Tuple<bool, string>(true, string.Format("This part - {0} is {1} with {2}", partNo, type.ToString().ToLower(), result.Item2));
                }
                return new Tuple<bool, string>(false, string.Empty);
            }
            else
                return new Tuple<bool, string>(true, "No data!");
        }

        /// <summary>
        /// For part No to check CheckCompatibility for TW
        /// </summary>
        /// <param name="partNos"></param>
        /// <param name="type"></param>
        /// <returns>True 表示產品內有不相容!，False 則可加入購物車!</returns>
        public static Tuple<bool, string> CheckCompatibilityTW(List<string> partNos, Compatibility type)
        {
            if (partNos != null && type != null)
            {
                DataTable dt = SqlProvider.dbGetDataTable("MY", string.Format("SELECT * FROM PRODUCT_COMPATIBILITY_TW WHERE RELATION = {0}", (int)type));
                if (dt != null && dt.Rows.Count > 0)
                {
                    List<PRODUCT_COMPATIBILITY> pcList = DataAccess.DataCore.CBOMV2_ConfiguratorDAL.DataTableToList<PRODUCT_COMPATIBILITY>(dt) as List<PRODUCT_COMPATIBILITY>;
                    foreach (string partNo in partNos)
                    {
                        var checkList = partNos.ToList();
                        checkList.Remove(partNo);
                        Tuple<bool, string> result = DataAccess.DataCore.CBOMV2_ConfiguratorDAL.CheckCompatibility(partNo, checkList, pcList);
                        if (result.Item1 == true)
                            return new Tuple<bool, string>(true, string.Format("This part - {0} is {1} with {2}", partNo, type.ToString().ToLower(), result.Item2));
                    }
                }
                return new Tuple<bool, string>(false, string.Empty);
            }
            else
                return new Tuple<bool, string>(true, "No data!");
        }

        public static bool IsBBProduct(string partNo)
        {
            string BBMaterialGroup = "PRODUCT,BBPROD";
            List<string> materialgroup = BBMaterialGroup.Split(',').ToList();
            var sapproduct = MyAdvantechContext.Current.SAP_PRODUCT
                .Where(p => p.PART_NO.Equals(partNo, StringComparison.OrdinalIgnoreCase) && materialgroup.Contains(p.MATERIAL_GROUP)).FirstOrDefault();

            if (sapproduct != null)
            {
                string BBProductLine = "BCEL,BDTN,BDTR,BENI,BESR,BFBR,BSRL,BOTS,BTLM,BUSB,BWFI,BWOT,BWZD,IOTG,EKIW";
                List<string> productline = BBProductLine.Split(',').ToList();
                return productline.Contains(sapproduct.PRODUCT_LINE);
            }
            return false;
        }

        public static string GetCustomerPartNoFromSAP(String _PartNo, String _ORGID, String _ERPID)
        {
            String sql = String.Format("select KDMAT from saprdp.knmt where MANDT = '168' and MATNR = '{0}' and VKORG = '{1}' and  KUNNR = '{2}' and rownum = 1", _PartNo, _ORGID, _ERPID);
            var objCPN = OracleProvider.ExecuteScalar("SAP_PRD", sql);

            if (objCPN != null && !String.IsNullOrEmpty(objCPN.ToString()))
            {
                return objCPN.ToString();
            }
            else
            {
                return String.Empty;
            }
        }

        public static Boolean isATWPartsWithoutZMIP(List<String> _parts, String _org, String _companyID, ref List<String> _invalidparts)
        {
            List<String> StandardParts = new List<String>();
            List<String> StandardPartsProductType = new List<string> { "ZFIN", "ZOEM", "T" };

            foreach (String part in _parts)
            {
                List<String> temp = new List<string>();

                // Split pipeline items
                if (part.Contains("|"))
                {
                    foreach (var i in part.Split('|').ToList())
                    {
                        temp.Add(i);
                    }
                }
                else
                    temp.Add(part);

                foreach(String t in temp)
                {
                    SAP_PRODUCT sp = MyAdvantechDAL.GetSAPProduct(t);
                    if (sp != null && StandardPartsProductType.Contains(sp.PRODUCT_TYPE))
                    {
                        StandardParts.Add(t);
                    }
                }               
            }

            if (StandardParts.Count > 0)
            {
                SAP_DIMCOMPANY sc = DataAccess.DataCore.MyAdvantech.SAPCompanyHelper.GetSAPDIMCompanyByID(_companyID).FirstOrDefault();

                Order _order = new Order();
                _order.Currency = (sc != null && !String.IsNullOrEmpty(sc.CURRENCY)) ? sc.CURRENCY : "TWD";
                _order.OrgID = _org;
                _order.DistChannel = "10";
                _order.Division = "00";
                foreach (String part in StandardParts)
                {
                    _order.AddLooseItem(part);
                }
                _order.SetOrderPartnet(new OrderPartner(_companyID, _org, OrderPartnerType.SoldTo));
                _order.SetOrderPartnet(new OrderPartner(_companyID, _org, OrderPartnerType.ShipTo));
                _order.SetOrderPartnet(new OrderPartner(_companyID, _org, OrderPartnerType.BillTo));

                // Do order simulation
                String _errMsg = String.Empty;
                Advantech.Myadvantech.DataAccess.SAPDAL.SimulateOrder(ref _order, ref _errMsg);

                if (_order != null && String.IsNullOrEmpty(_errMsg))
                {
                    foreach (Product p in _order.LineItems)
                    {
                        if (p.MinimumPrice != null && (p.MinimumPrice == -1 || p.MinimumPrice == 0))
                        {
                            _invalidparts.Add(p.PartNumber);
                        }
                    }
                }
            }

            if (_invalidparts.Count > 0)
                return true;
            else
                return false;
        }
    }
}

