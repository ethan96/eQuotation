//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Data;

[assembly: InternalsVisibleTo("Advantech.Myadvantech.Business")]
namespace Advantech.Myadvantech.DataAccess
{
    public partial class Order : DocumentBase
    {

        public override List<Product> LineItems
        {
            get;
            set;
        }

        public virtual String OrderNumber
        {
            get;
            set;
        }

        public Decimal Discount
        {
            get;
            set;
        }

        public OrderStatus OrderStatus
        {
            get;
            internal set;
        }

        public string DistChannel
        {
            get;
            set;
        }


        public string Division
        {
            get;
            set;
        }


        public string SalesGroup
        {
            get;
            set;
        }

        public string SalesOffice
        {
            get;
            set;
        }

        public string Incoterms1
        {
            get;
            set;
        }
        public string Incoterms2
        {
            get;
            set;
        }
        public string District
        {
            get;
            set;
        }
        public string PaymentTerm
        {
            get;
            set;
        }

        public string ShiptoCountry
        {
            get;
            set;
        }
        public string TaxClass
        {
            get;
            set;
        }

        /// <summary>
        /// Tax of the order
        /// </summary>
        [System.ComponentModel.DefaultValue(0)]
        public Decimal Tax
        {
            get;
            set;
        }


        public string TriangularIndicator
        {
            get;
            set;
        }
        public DateTime? RequireDate
        {
            get;
            set;
        }
        public string ShipCondition
        {
            get;
            set;
        }
        public string CustomerPONumber
        {
            get;
            set;
        }
        public string ShipToCustomerPONumber
        {
            get;
            set;
        }
        public DateTime? PODate
        {
            get;
            set;
        }
        public Boolean PartialShipment
        {
            get;
            set;
        }
        public string EarlyShipment
        {
            get;
            set;
        }
        public string TAXDEL_CTY
        {
            get;
            set;
        }
        public string TAXDES_CTY
        {
            get;
            set;
        }



        public SAPOrderType OrderType
        {
            get;
            set;
        }

        public string SalesNote
        {
            get;
            set;
        }

        public string OrderNote
        {
            get;
            set;
        }

        public string OPNote
        {
            get;
            set;
        }

        public string PrjNote
        {
            get;
            set;
        }

        public string BillingInstructionInfo
        {
            get;
            set;
        }


        public CreditCard CreditCartInfo
        {
            get;
            set;
        }

        public List<Freight> Freight
        {
            get;
            set;
        }

        public DataTable ConvertToOrderResult
        {
            get;
            set;
        }

        private List<OrderPartner> _OrderPartners = new List<OrderPartner>();

        public void SetOrderPartnet(OrderPartner _OrderPartner)
        {
            List<OrderPartner> _returnval = this._OrderPartners.OfType<OrderPartner>().Where(o => o.Type == _OrderPartner.Type).ToList();
            if (_returnval.Count > 0)
            {
                this._OrderPartners.Remove(_returnval[0]);
            }
            _OrderPartners.Add(_OrderPartner);
        }

        public OrderPartner GetOrderPartnet(OrderPartnerType _PartnerType)
        {
            List<OrderPartner> _returnval = this._OrderPartners.OfType<OrderPartner>().Where(o => o.Type == _PartnerType).ToList();
            if (_returnval.Count > 0)
            {
                return _returnval[0];
            }
            return null;
        }

        public List<OrderPartner> GetAllOrderPartnet()
        {
            return this._OrderPartners;
        }



        private void GenerateID()
        {
            this.ID = System.Guid.NewGuid().ToString().Replace("-", "").Substring(0, 10);

            if (this.LineItems == null)
            {
                this.LineItems = new List<Product>();
            }

        }

        public Order()
        {
            this.GenerateID();
        }

        public Order(String SoldToErpID)
        {
            this.GenerateID();
            //this.SoldTo.ErpID = SoldToErpID;
            this.LoadOrderHeader();
        }

        private void LoadOrderHeader()
        {
            //Load default order header information by the SoldToERPID
        }

        public void AddLooseItem(String PartNumber, String Plant, int LineNo, int Quantity = 1)
        {
            Product _lineItem = new Product();
            //Alex 20180418 Adjust using parameter :
            //_lineItem.LineNumber = this.GetNextLineNumber(LineItemType.LooseItem);
            _lineItem.LineNumber = LineNo;
            _lineItem.PartNumber = PartNumber;
            _lineItem.Quantity = Quantity;
            _lineItem.LineItemType = LineItemType.LooseItem;
            _lineItem.PlantID = Plant;
            this.LineItems.Add(_lineItem);
        }

        public void AddLooseItem(String PartNumber, int Quantity = 1)
        {
            Product _lineItem = new Product();
            _lineItem.LineNumber = this.GetNextLineNumber(LineItemType.LooseItem);
            _lineItem.PartNumber = PartNumber;
            _lineItem.Quantity = Quantity;
            _lineItem.LineItemType = LineItemType.LooseItem;
            this.LineItems.Add(_lineItem);
        }

        public void AddLooseItem(Product _lineItem)
        {
            _lineItem.LineNumber = this.GetNextLineNumber(LineItemType.LooseItem);
            this.LineItems.Add(_lineItem);
        }

        public void AddBTOSParentItem(String PartNumber, String Plant, int LineNo, int Quantity = 1)
        {
            Product _lineItem = new Product();
            _lineItem.LineNumber = LineNo;
            _lineItem.PartNumber = PartNumber;
            _lineItem.Quantity = Quantity;
            _lineItem.PlantID = Plant;
            _lineItem.LineItemType = LineItemType.BTOSParent;
            this.LineItems.Add(_lineItem);
        }

        public void AddBTOSParentItem(String PartNumber,String Plant, int Quantity = 1)
        {
            Product _lineItem = new Product();
            _lineItem.LineNumber = this.GetNextLineNumber(LineItemType.BTOSParent);
            _lineItem.PartNumber = PartNumber;
            _lineItem.Quantity = Quantity;
            _lineItem.PlantID = Plant;
            _lineItem.LineItemType = LineItemType.BTOSParent;
            this.LineItems.Add(_lineItem);
        }

        public void AddBTOSParentItem(String PartNumber, int Quantity = 1)
        {
            Product _lineItem = new Product();
            _lineItem.LineNumber = this.GetNextLineNumber(LineItemType.BTOSParent);
            _lineItem.PartNumber = PartNumber;
            _lineItem.Quantity = Quantity;
            _lineItem.LineItemType = LineItemType.BTOSParent;
            this.LineItems.Add(_lineItem);
        }
        public void AddBTOSChildItem(String PartNumber, int ParentItemLineNumber, String Plant, int LineNo, int Quantity = 1)
        {
            Product _lineItem = new Product();
            _lineItem.LineNumber = LineNo;
            _lineItem.PartNumber = PartNumber;
            _lineItem.ParentLineNumber = ParentItemLineNumber;
            _lineItem.Quantity = Quantity;
            _lineItem.LineItemType = LineItemType.BTOSChild;
            _lineItem.PlantID = Plant;
            this.LineItems.Add(_lineItem);
        }

        public void AddBTOSChildItem(String PartNumber, int ParentItemLineNumber,String Plant, int Quantity = 1)
        {
            Product _lineItem = new Product();
            _lineItem.LineNumber = this.GetNextLineNumber(LineItemType.BTOSChild, ParentItemLineNumber);
            _lineItem.PartNumber = PartNumber;
            _lineItem.ParentLineNumber = ParentItemLineNumber;
            _lineItem.Quantity = Quantity;
            _lineItem.LineItemType = LineItemType.BTOSChild;
            _lineItem.PlantID = Plant;
            this.LineItems.Add(_lineItem);
        }

        public void AddBTOSChildItem(String PartNumber, int ParentItemLineNumber, int Quantity = 1)
        {
            Product _lineItem = new Product();
            _lineItem.LineNumber = this.GetNextLineNumber(LineItemType.BTOSChild, ParentItemLineNumber);
            _lineItem.PartNumber = PartNumber;
            _lineItem.ParentLineNumber = ParentItemLineNumber;
            _lineItem.Quantity = Quantity;
            _lineItem.LineItemType = LineItemType.BTOSChild;
            this.LineItems.Add(_lineItem);
        }

        private int GetNextLineNumber(LineItemType lineItemType, int ParentItemLineNumber = 100)
        {
            int returnLineNumber = 1;
            List<Product> _items = null;
            switch (lineItemType)
            {
                case LineItemType.LooseItem:

                    if (this.LineItems == null)
                    {
                        return returnLineNumber;
                    }

                    _items = this.LineItems.OfType<Product>().Where(
                         o => o.LineItemType == LineItemType.LooseItem).ToList();

                    returnLineNumber = _items.Count + 1;
                    break;

                case LineItemType.BTOSParent:

                    if (this.LineItems == null)
                    {
                        return 100;
                    }

                    _items = this.LineItems.OfType<Product>().Where(
                          o => o.LineItemType == LineItemType.BTOSParent).ToList();

                    returnLineNumber = (_items.Count + 1) * 100;
                    break;

                case LineItemType.BTOSChild:

                    if (this.LineItems == null)
                    {
                        return 101;
                    }

                    _items = this.LineItems.OfType<Product>().Where(
                         o => o.ParentLineNumber == ParentItemLineNumber && o.LineItemType == LineItemType.BTOSChild).ToList();

                    returnLineNumber = ParentItemLineNumber + _items.Count + 1;
                    break;
            }
            return returnLineNumber;
        }

    }
}

