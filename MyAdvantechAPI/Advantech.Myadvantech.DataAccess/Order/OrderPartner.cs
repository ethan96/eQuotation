using Advantech.Myadvantech.DataAccess;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
[assembly: InternalsVisibleTo("Advantech.Myadvantech.Business")]
namespace Advantech.Myadvantech.DataAccess
{

    public class OrderPartner
    {
        public virtual String ErpID
        {
            get;
            set;
        }
        public virtual String Name
        {
            get;
            set;
        }
        public virtual String Tel
        {
            get;
            set;
        }

        //public MyEnum EnumProperty

        public virtual OrderPartnerType Type
        {
            get;
            set;
        }

        public virtual String Address
        {
            get;
            set;
        }

        public virtual String Attention
        {
            get;
            set;
        }

        public virtual String Mobile
        {
            get;
            set;
        }

        public virtual String ZipCode
        {
            get;
            set;
        }

        public virtual String Country
        {
            get;
            set;
        }

        public virtual String City
        {
            get;
            set;
        }

        public virtual String Street
        {
            get;
            set;
        }

        public virtual String State
        {
            get;
            set;
        }

        public virtual String District
        {
            get;
            set;
        }

        public virtual String TaxJuri
        {
            get;
            set;
        }

        public virtual string Street2
        { get; set; }

        public OrderPartner()
        {

        }

        public OrderPartner(String ErpID, string Org_id, OrderPartnerType partnerType)
        {
            LoadPartner(ErpID, Org_id, partnerType);

            // Add for exception case
            if (String.IsNullOrEmpty(this.ErpID))
            {                
                this.Type = partnerType;
                this.ErpID = ErpID;
            }
        }

        public void LoadPartner(String ErpID, string Org_id, OrderPartnerType partnerType)
        {
            string CompanyName = string.Empty; string Division = string.Empty; string SalesGroup = string.Empty;
            string SalesOffice = string.Empty;
            DataTable dt = new DataTable();
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(" SELECT A.KUNN2 AS company_id ");
            sb.AppendLine(" , A.VKORG as ORG_ID ");
            sb.AppendLine(" , case A.PARVW when 'WE' then 'Ship-To' when 'AG' then 'Sold-To' when 'RE' then 'Bill-To' end as PARTNER_FUNCTION ");
            sb.AppendLine(" FROM saprdp.knvp A ");
            sb.AppendLine(" Where A.Kunnr = '" + ErpID + "' ");
            sb.AppendLine(" AND A.KUNN2 like '%" + ErpID + "%' ");
            sb.AppendLine(" AND A.VKORG = '" + Org_id + "' ");
            if (partnerType != null)
            {
                switch (partnerType)
                {
                    case OrderPartnerType.SoldTo:
                        sb.Append(" AND A.PARVW = 'AG' ");
                        break;
                    case OrderPartnerType.ShipTo:
                        sb.Append(" AND A.PARVW ='WE' ");
                        break;
                    case OrderPartnerType.BillTo:
                        sb.Append(" AND A.PARVW ='RE' ");
                        break;
                }
            }
            dt = OracleProvider.GetDataTable("SAP_PRD", sb.ToString());
            if (dt.Rows.Count > 0)
            {
                var dr = dt.Rows[0];
                this.District = "";
                this.ErpID = dr["company_id"].ToString();
                this.TaxJuri = "";
                this.Type = partnerType;
            }

            sb.Clear();
            sb.AppendLine(" SELECT B.NAME1 AS COMPANY_NAME ");
            sb.AppendLine(" , B.Land1 AS  COUNTRY ");
            sb.AppendLine(" , B.Ort01 AS CITY ");
            sb.AppendLine(" , B.STRAS as STREET ");
            sb.AppendLine(" , B.PSTLZ AS ZIP_CODE ");
            sb.AppendLine(" , B.TELF1 AS TEL_NO ");
            sb.AppendLine(" , B.TELFX AS FAX_NO ");
            sb.AppendLine(" , B.adrnr ");
            sb.AppendLine(" FROM saprdp.kna1 B ");
            sb.AppendLine(" Where B.KUNNR='" + this.ErpID + "' ");
            sb.AppendLine(" AND B.loevm<>'X' ");
            dt = OracleProvider.GetDataTable("SAP_PRD", sb.ToString());

            string b_adrsr = string.Empty;
            if (dt.Rows.Count > 0)
            {
                var dr = dt.Rows[0];
                this.City = dr["CITY"].ToString();
                this.Country = dr["COUNTRY"].ToString();
                this.Name = dr["COMPANY_NAME"].ToString();
                this.Mobile = dr["FAX_NO"].ToString();
                this.Street = dr["STREET"].ToString();
                this.Tel = dr["TEL_NO"].ToString();
                this.ZipCode = dr["ZIP_CODE"].ToString();
                b_adrsr = dr["adrnr"].ToString();
            }

            sb.Clear();
            sb.AppendLine(" SELECT D.street  ||' '|| D.city1 ||' '|| D.region ||' '|| D.post_code1 ||' '|| ");
            sb.Append(" (select e.landx from saprdp.t005t e where e.land1='" + this.Country + "' and e.spras='E' and rownum=1) AS Address  ");
            sb.AppendLine(", D.region AS STATE ");
            sb.AppendLine(", D.NAME_CO as Attention ");
            sb.AppendLine(",D.STR_SUPPL3 ");
            sb.AppendLine(" FROM saprdp.adrc D ");
            sb.AppendLine(" Where D.country='" + this.Country + "' ");
            sb.AppendLine(" AND D.addrnumber='" + b_adrsr + "' ");
            dt = OracleProvider.GetDataTable("SAP_PRD", sb.ToString());


            if (dt.Rows.Count > 0)
            {
                var dr = dt.Rows[0];
                this.State = dr["STATE"].ToString();
                this.Address = dr["Address"].ToString();
                this.Attention = dr["Attention"].ToString();
            }

            this.TaxJuri = this.State + this.ZipCode;

        }

        //public void LoadPartner(String ErpID, string Org_id, PartnerType partnerType)
        //{
        //    //Hi Ming, Please implement the code to get partner information from data access layer 
        //    //and fill the data to the attributes of the class
        //    string CompanyName = string.Empty; string Division = string.Empty; string SalesGroup = string.Empty;
        //    string SalesOffice = string.Empty;
        //    DataTable dt = new DataTable();
        //    StringBuilder sb = new StringBuilder();

        //    sb.AppendLine(" SELECT A.KUNN2 AS company_id, A.VKORG as ORG_ID, B.NAME1 AS COMPANY_NAME, " + " D.street  ||' '|| D.city1 ||' '|| D.region ||' '|| D.post_code1 ||' '|| (select e.landx from saprdp.t005t e where e.land1=B.land1 and e.spras='E' and rownum=1) AS Address, ");
        //    sb.AppendLine(" B.Land1 AS  COUNTRY,B.Ort01 AS CITY,B.STRAS as STREET,");
        //    sb.AppendLine(" B.PSTLZ AS ZIP_CODE, D.region AS STATE,  C.smtp_addr AS CONTACT_EMAIL,B.TELF1 AS TEL_NO,B.TELFX AS FAX_NO, D.NAME_CO as Attention, ");
        //    sb.AppendLine(" case A.PARVW when 'WE' then 'Ship-To' when 'AG' then 'Sold-To' when 'RE' then 'Bill-To' end as PARTNER_FUNCTION, ");
        //    sb.AppendLine(" E.VKBUR as SalesOffice, E.VKGRP as SalesGroup, E.SPART as division,D.STR_SUPPL3  ");
        //    sb.AppendLine(" FROM saprdp.knvp A  ");
        //    sb.AppendLine(" INNER JOIN saprdp.kna1 B on A.KUNN2 = B.KUNNR left join saprdp.adr6 C on B.adrnr=C.addrnumber ");
        //    sb.AppendLine(" inner join saprdp.adrc D on  D.country=B.land1 and D.addrnumber=B.adrnr inner join saprdp.knvv E on B.KUNNR=E.KUNNR  ");
        //    sb.AppendLine(" where rownum<=60 and B.loevm<>'X' ");

        //    if (!string.IsNullOrEmpty(State))
        //        sb.AppendFormat(" and Upper(D.region) LIKE '%{0}%' ", State.Replace("'", "''").Trim().ToUpper());
        //    if (!string.IsNullOrEmpty(Address))
        //        sb.AppendFormat(" and Upper(B.STRAS) LIKE '%{0}%' ", Address.Replace("'", "''").Trim().ToUpper());
        //    if (!string.IsNullOrEmpty(CompanyName))
        //        sb.AppendFormat(" and (Upper(B.NAME1) LIKE '%{0}%' or B.NAME2 like '%{0}%') ", CompanyName.Replace("'", "''").Trim().ToUpper());
        //    if (!string.IsNullOrEmpty(ErpID))
        //        sb.AppendFormat(" and (A.Kunnr LIKE '%{0}%' or A.KUNN2 like '%{0}%') ", ErpID.Replace("'", "''").Trim().ToUpper());
           
        //    if (!string.IsNullOrEmpty(Org_id))
        //        sb.AppendFormat(" and A.VKORG = '{0}' ", Org_id.Replace("'", "''").Trim().ToUpper());
        //    if (!string.IsNullOrEmpty(Division))
        //    {
        //        sb.AppendFormat(" and E.SPART = '{0}' ", Division.Replace("'", "''").Trim().ToUpper());
        //    }
        //    if (!string.IsNullOrEmpty(SalesGroup))
        //    {
        //        sb.AppendFormat(" and E.VKGRP = '{0}' ", SalesGroup.Replace("'", "''").Trim().ToUpper());
        //    }
        //    if (!string.IsNullOrEmpty(SalesOffice))
        //    {
        //        sb.AppendFormat(" and E.VKBUR = '{0}' ", SalesOffice.Replace("'", "''").Trim().ToUpper());
        //    }
        //    //when 'WE' then 'Ship-To' when 'AG' then 'Sold-To' when 'RE' then 'Bill-To'
        //    if (partnerType != null)
        //    {
        //        switch (partnerType)
        //        {
        //            case PartnerType.SoldTo:
        //                sb.Append(" AND A.PARVW = 'AG' ");
        //                break;
        //            case PartnerType.ShipTo:
        //                sb.Append(" AND A.PARVW ='WE' ");
        //                break;
        //            case PartnerType.BillTo:
        //                sb.Append(" AND A.PARVW ='RE' ");
        //                break;
        //        }
        //    }
        //    //if (!string.IsNullOrEmpty(WhereStr))
        //    //{
        //    //    sb.AppendFormat(" AND B.ktokd in ({0})", WhereStr);
        //    //}
        //    //sb.AppendFormat(" AND A.PARVW in ('WE','AG','RE','EM') ORDER BY A.Kunn2 ", Org_id);

        //    sb.Append(" ORDER BY A.Kunn2 ");

        //    dt = OracleProvider.GetDataTable("SAP_PRD", sb.ToString());
        //    dt.TableName = "SAPPF";
        //    if (dt.Rows.Count > 0)
        //    {
        //        var dr = dt.Rows[0];
        //        this.Address = dr["Address"].ToString();
        //        this.Attention = dr["Attention"].ToString();
        //        this.City = dr["CITY"].ToString();
        //        this.Country = dr["COUNTRY"].ToString();
        //        this.District = "";
        //        this.ErpID = dr["company_id"].ToString();
        //        this.Name = dr["COMPANY_NAME"].ToString();
        //        this.Mobile = dr["FAX_NO"].ToString();
        //        this.State = dr["STATE"].ToString();
        //        this.Street = dr["STREET"].ToString();
        //        this.TaxJuri ="";
        //        this.Tel = dr["TEL_NO"].ToString();
        //        this.Type = partnerType;
        //        this.ZipCode = dr["ZIP_CODE"].ToString();
            
        //    }

        //}
    }
}

